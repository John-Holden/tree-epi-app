[{"/home/john/code/tree-epi-app/front/src/index.js":"1","/home/john/code/tree-epi-app/front/src/reportWebVitals.js":"2","/home/john/code/tree-epi-app/front/src/components/SimPanel.js":"3","/home/john/code/tree-epi-app/front/src/components/InputParams.js":"4","/home/john/code/tree-epi-app/front/src/components/App.test.js":"5"},{"size":525,"mtime":1657468490874,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1657468490874,"results":"8","hashOfConfig":"7"},{"size":1456,"mtime":1657468490874,"results":"9","hashOfConfig":"7"},{"size":5075,"mtime":1657468490874,"results":"10","hashOfConfig":"7"},{"size":275,"mtime":1657468490874,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qxppyr",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/john/code/tree-epi-app/front/src/index.js",[],[],"/home/john/code/tree-epi-app/front/src/reportWebVitals.js",[],[],"/home/john/code/tree-epi-app/front/src/components/SimPanel.js",["29","30"],[],"import '../styles/app.css'\nimport React, { useState, useRef} from 'react';\n\n\nfunction SimulationPanel() {\n  const simulationPath = './media/sim.mp4'\n  const catImagePath = 'https://tree-epi-site-bucket.s3.etu-west-2.amazonaws.com/Thinking-of-getting-a-cat.png'\n\n  const vidRef = useRef(null);\n  const buttonRef = useRef(null);\n  const [buttonText, setButtonText] = useState('>');\n  \n  const onButtonClick = () => {\n    if (vidRef.current.paused) {\n      vidRef.current.play()\n      setButtonText('||')\n    }\n    else {\n      vidRef.current.pause()\n      setButtonText('>')\n    }\n  }\n\n  const isSimGenerated = () => {\n    try {\n      const simulation = require(`${simulationPath}`)\n      console.log('succces', simulation)\n     return true;\n    } catch (err) {\n      console.log('fail')\n     return false;\n    }\n  };\n\n  const mySim = isSimGenerated()\n  \n  if  ( mySim == false) {\n    console.log('Sim not generate, rendering cat')\n    return (\n        <div className='simulationPanel'> \n            <p> Image not here</p> \n            <img src={catImagePath} />\n          </div>\n    );\n  }\n  \n  else {\n    console.log('rendering vid')\n    const mySim = require(`${simulationPath}`) \n    return (\n        <div className='simulationPanel'> \n            <video ref={vidRef} src={mySim} type=\"video/mp4\"> </video> \n        <button ref={buttonRef} onClick={() => onButtonClick()}> {buttonText} </button>\n        </div>\n    );\n}}\n\nexport default SimulationPanel;\n","/home/john/code/tree-epi-app/front/src/components/InputParams.js",["31"],[],"import '../styles/app.css';\nimport 'katex/dist/katex.min.css';\nimport React, { useState } from 'react';\nimport { InlineMath } from 'react-katex';\n// import module_exports from '../environments';\n\nconst labelSize = {\n  fontSize: 15\n}\n\nfunction InputParameters() {\n  const ApiHostName = process.env.REACT_APP_API_URL;\n  const [message, setMessage] = useState(\"\");\n  const [dispersaType, setDispersal] = useState(\"gaussian\");\n  const [dispersalScale, setDispersalScale] = useState(100);\n  const [domainX, setDomainX] = useState(500);\n  const [domainY, setDomainY] = useState(500);\n  const [hostNumber, setHostNumber] = useState(1000);\n  const [secondaryR0, setSecondaryR0] = useState(2.0);\n  const [infectiousLT, setInfectiousLT] = useState(100);\n  const [simulationRT, setSimulationRT] = useState(1000);\n  const [initiallyInfected, setInitiallyInfected] = useState(20);\n  const [initiallyInfectedDist, setInitiallyInfectedDist] = useState(\"centralised\");\n  const susceptibleHosts = 'S';\n  const infectedHosts = 'I';\n  const secondaryR0Label = 'R\\_{0}';\n let handleSubmitResp = async (e) => {\n    e.preventDefault();\n    try {\n      let res = await fetch(ApiHostName, \n      { \n        method: \"POST\",\n        body: JSON.stringify({\"dispersal_type\": dispersaType,\n                              \"dispersal_param\": dispersalScale,\n                              \"domain_size\": [domainX, domainY],\n                              \"host_number\": hostNumber,\n                              \"secondary_R0\": secondaryR0,\n                              \"infectious_lifetime\": infectiousLT,\n                              \"simulation_runtime\": simulationRT,\n                              \"initially_infected_hosts\": initiallyInfected,\n                              \"initially_infected_dist\": initiallyInfectedDist})\n      });\n      res.json().then((data) => {console.log(\"back end resp: \", data['message'])})\n      if (res.status === 200) {\n        console.log('api url :: ', process.env.REACT_APP_API_URL)\n        setMessage(\"successfull\");\n        console.log('successfull post')\n        setMessage(\"error\");\n      } else {\n        console.log('failed failed')\n      }\n    } catch (err) {\n      console.log(err);\n      alert(`${message}, dispersal type is ${dispersaType}`)\n    }\n  };\n\n\n  return (\n      <div className='inputParamPanel'>\n        <form onSubmit={handleSubmitResp} style={{width: 185}}>\n          <label style={labelSize}>  <InlineMath math={susceptibleHosts}/> Hosts: {hostNumber} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={hostNumber}  onChange={e => setHostNumber(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> <InlineMath math={infectedHosts}/> Hosts: {initiallyInfected} </label>\n          <input type=\"range\" min=\"1\" max=\"100\" value={initiallyInfected}  onChange={e => setInitiallyInfected(e.target.value)}/> \n          <br></br>\n          <label style={labelSize} > <InlineMath math={infectedHosts}/> Distribution </label> \n          <select value={initiallyInfectedDist} onChange={e => setInitiallyInfectedDist(e.target.value)}> \n            <option value=\"centralised\"> Centralised</option>\n            <option value=\"random\"> Random </option>  \n          </select>  \n          <br></br>\n          <label style={labelSize}> Secondary <InlineMath math={secondaryR0Label}/>: {secondaryR0} </label>\n          <input type=\"range\" min=\"0\" max=\"10\" step=\"0.1\" value={secondaryR0}  onChange={e => setSecondaryR0(e.target.value)}/> \n          <br></br>\n          <label style={labelSize}> Infectious period: {infectiousLT} </label>\n          <input type=\"range\" min=\"1\" max=\"500\" value={infectiousLT}  onChange={e => setInfectiousLT(e.target.value)}/>  \n          <br></br>\n          <label style={labelSize} > Dispersal Kernel: </label> \n          <select value={dispersaType} onChange={e => setDispersal(e.target.value)}> \n            <option value=\"gaussian\">Gaussian</option>  \n            <option value=\"exponential\">Exponential</option>\n            <option value=\"inverse_power_Law\">Inverse power law</option>\n          </select>\n          <br></br>\n          <label style={labelSize}> Dispersal length: {dispersalScale}(m) </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={dispersalScale}  onChange={e => setDispersalScale(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Domain width: {domainX}(m) : </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={domainX}  onChange={e => setDomainX(e.target.value)}/>   \n          <label style={labelSize}> Domain height: {domainY}(m) : </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={domainY}  onChange={e => setDomainY(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Time Steps (days): {simulationRT} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={simulationRT}  onChange={e => setSimulationRT(e.target.value)}/>\n          <p></p>\n          <input type=\"submit\" value=\"Simulate\" />\n        </form>\n      </div>\n  );\n}\n\nexport default InputParameters;\n","/home/john/code/tree-epi-app/front/src/components/App.test.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":37,"column":15,"nodeType":"34","messageId":"35","endLine":37,"endColumn":17},{"ruleId":"36","severity":1,"message":"37","line":42,"column":13,"nodeType":"38","endLine":42,"endColumn":39},{"ruleId":"39","severity":1,"message":"40","line":26,"column":30,"nodeType":"41","messageId":"42","endLine":26,"endColumn":31,"suggestions":"43"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\_.","Literal","unnecessaryEscape",["44","45"],{"messageId":"46","fix":"47","desc":"48"},{"messageId":"49","fix":"50","desc":"51"},"removeEscape",{"range":"52","text":"53"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"54","text":"55"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1043,1044],"",[1043,1043],"\\"]