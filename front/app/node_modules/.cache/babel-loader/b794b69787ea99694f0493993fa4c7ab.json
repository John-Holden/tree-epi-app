{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nvar WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nvar FetchCompileWasmPlugin = /*#__PURE__*/function () {\n  function FetchCompileWasmPlugin(options) {\n    _classCallCheck(this, FetchCompileWasmPlugin);\n\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(FetchCompileWasmPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"FetchCompileWasmPlugin\", function (compilation) {\n        var globalWasmLoading = compilation.outputOptions.wasmLoading;\n\n        var isEnabledForChunk = function isEnabledForChunk(chunk) {\n          var options = chunk.getEntryOptions();\n          var wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n          return wasmLoading === \"fetch\";\n        };\n\n        var generateLoadBinaryCode = function generateLoadBinaryCode(path) {\n          return \"fetch(\".concat(RuntimeGlobals.publicPath, \" + \").concat(path, \")\");\n        };\n\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"FetchCompileWasmPlugin\", function (chunk, set) {\n          if (!isEnabledForChunk(chunk)) return;\n          var chunkGraph = compilation.chunkGraph;\n\n          if (!chunkGraph.hasModuleInGraph(chunk, function (m) {\n            return m.type === \"webassembly/sync\";\n          })) {\n            return;\n          }\n\n          set.add(RuntimeGlobals.moduleCache);\n          set.add(RuntimeGlobals.publicPath);\n          compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n            generateLoadBinaryCode: generateLoadBinaryCode,\n            supportsStreaming: true,\n            mangleImports: _this.options.mangleImports,\n            runtimeRequirements: set\n          }));\n        });\n      });\n    }\n  }]);\n\n  return FetchCompileWasmPlugin;\n}();\n\nmodule.exports = FetchCompileWasmPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/web/FetchCompileWasmPlugin.js"],"names":["RuntimeGlobals","require","WasmChunkLoadingRuntimeModule","FetchCompileWasmPlugin","options","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","publicPath","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,IAAMC,6BAA6B,GAAGD,OAAO,CAAC,4CAAD,CAA7C;AAEA;AAEA;;;IAEME,sB;AACL,kCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CACC,wBADD,EAEC,UAAAC,WAAW,EAAI;AACd,YAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,WAApD;;AACA,YAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK,EAAI;AAClC,cAAMV,OAAO,GAAGU,KAAK,CAACC,eAAN,EAAhB;AACA,cAAMH,WAAW,GAChBR,OAAO,IAAIA,OAAO,CAACQ,WAAR,KAAwBI,SAAnC,GACGZ,OAAO,CAACQ,WADX,GAEGF,iBAHJ;AAIA,iBAAOE,WAAW,KAAK,OAAvB;AACA,SAPD;;AAQA,YAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAC,IAAI;AAAA,iCACzBlB,cAAc,CAACmB,UADU,gBACMD,IADN;AAAA,SAAnC;;AAGAT,QAAAA,WAAW,CAACH,KAAZ,CAAkBc,wBAAlB,CACEC,GADF,CACMrB,cAAc,CAACsB,mBADrB,EAEEd,GAFF,CAEM,wBAFN,EAEgC,UAACM,KAAD,EAAQS,GAAR,EAAgB;AAC9C,cAAI,CAACV,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;AAC/B,cAAMU,UAAU,GAAGf,WAAW,CAACe,UAA/B;;AACA,cACC,CAACA,UAAU,CAACC,gBAAX,CACAX,KADA,EAEA,UAAAY,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,KAAW,kBAAf;AAAA,WAFD,CADF,EAKE;AACD;AACA;;AACDJ,UAAAA,GAAG,CAACK,GAAJ,CAAQ5B,cAAc,CAAC6B,WAAvB;AACAN,UAAAA,GAAG,CAACK,GAAJ,CAAQ5B,cAAc,CAACmB,UAAvB;AACAV,UAAAA,WAAW,CAACqB,gBAAZ,CACChB,KADD,EAEC,IAAIZ,6BAAJ,CAAkC;AACjCe,YAAAA,sBAAsB,EAAtBA,sBADiC;AAEjCc,YAAAA,iBAAiB,EAAE,IAFc;AAGjCC,YAAAA,aAAa,EAAE,KAAI,CAAC5B,OAAL,CAAa4B,aAHK;AAIjCC,YAAAA,mBAAmB,EAAEV;AAJY,WAAlC,CAFD;AASA,SAxBF;AAyBA,OAxCF;AA0CA;;;;;;AAGFW,MAAM,CAACC,OAAP,GAAiBhC,sBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass FetchCompileWasmPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"FetchCompileWasmPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\n\t\t\t\tconst isEnabledForChunk = chunk => {\n\t\t\t\t\tconst options = chunk.getEntryOptions();\n\t\t\t\t\tconst wasmLoading =\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\n\t\t\t\t\t\t\t? options.wasmLoading\n\t\t\t\t\t\t\t: globalWasmLoading;\n\t\t\t\t\treturn wasmLoading === \"fetch\";\n\t\t\t\t};\n\t\t\t\tconst generateLoadBinaryCode = path =>\n\t\t\t\t\t`fetch(${RuntimeGlobals.publicPath} + ${path})`;\n\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\n\t\t\t\t\t.tap(\"FetchCompileWasmPlugin\", (chunk, set) => {\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/sync\"\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\n\t\t\t\t\t\t\t\tsupportsStreaming: true,\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\n\t\t\t\t\t\t\t\truntimeRequirements: set\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = FetchCompileWasmPlugin;\n"]},"metadata":{},"sourceType":"script"}