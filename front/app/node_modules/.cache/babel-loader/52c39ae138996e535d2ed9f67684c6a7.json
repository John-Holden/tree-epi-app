{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar util = require(\"util\");\n\nvar ExportsInfo = require(\"./ExportsInfo\");\n\nvar ModuleGraphConnection = require(\"./ModuleGraphConnection\");\n\nvar SortableSet = require(\"./util/SortableSet\");\n\nvar WeakTupleMap = require(\"./util/WeakTupleMap\");\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./ExportsInfo\").ExportInfo} ExportInfo */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleProfile\")} ModuleProfile */\n\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @callback OptimizationBailoutFunction\n * @param {RequestShortener} requestShortener\n * @returns {string}\n */\n\n\nvar EMPTY_SET = new Set();\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by origin module\n */\n\nvar getConnectionsByOriginModule = function getConnectionsByOriginModule(set) {\n  var map = new Map();\n  /** @type {Module | 0} */\n\n  var lastModule = 0;\n  /** @type {ModuleGraphConnection[]} */\n\n  var lastList = undefined;\n\n  var _iterator = _createForOfIteratorHelper(set),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var connection = _step.value;\n      var originModule = connection.originModule;\n\n      if (lastModule === originModule) {\n        lastList.push(connection);\n      } else {\n        lastModule = originModule;\n        var list = map.get(originModule);\n\n        if (list !== undefined) {\n          lastList = list;\n          list.push(connection);\n        } else {\n          var _list = [connection];\n          lastList = _list;\n          map.set(originModule, _list);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return map;\n};\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by module\n */\n\n\nvar getConnectionsByModule = function getConnectionsByModule(set) {\n  var map = new Map();\n  /** @type {Module | 0} */\n\n  var lastModule = 0;\n  /** @type {ModuleGraphConnection[]} */\n\n  var lastList = undefined;\n\n  var _iterator2 = _createForOfIteratorHelper(set),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var connection = _step2.value;\n      var _module = connection.module;\n\n      if (lastModule === _module) {\n        lastList.push(connection);\n      } else {\n        lastModule = _module;\n        var list = map.get(_module);\n\n        if (list !== undefined) {\n          lastList = list;\n          list.push(connection);\n        } else {\n          var _list2 = [connection];\n          lastList = _list2;\n          map.set(_module, _list2);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return map;\n};\n\nvar ModuleGraphModule = /*#__PURE__*/_createClass(function ModuleGraphModule() {\n  _classCallCheck(this, ModuleGraphModule);\n\n  /** @type {SortableSet<ModuleGraphConnection>} */\n  this.incomingConnections = new SortableSet();\n  /** @type {SortableSet<ModuleGraphConnection> | undefined} */\n\n  this.outgoingConnections = undefined;\n  /** @type {Module | null} */\n\n  this.issuer = undefined;\n  /** @type {(string | OptimizationBailoutFunction)[]} */\n\n  this.optimizationBailout = [];\n  /** @type {ExportsInfo} */\n\n  this.exports = new ExportsInfo();\n  /** @type {number} */\n\n  this.preOrderIndex = null;\n  /** @type {number} */\n\n  this.postOrderIndex = null;\n  /** @type {number} */\n\n  this.depth = null;\n  /** @type {ModuleProfile} */\n\n  this.profile = undefined;\n  /** @type {boolean} */\n\n  this.async = false;\n  /** @type {ModuleGraphConnection[]} */\n\n  this._unassignedConnections = undefined;\n});\n\nvar ModuleGraph = /*#__PURE__*/function () {\n  function ModuleGraph() {\n    _classCallCheck(this, ModuleGraph);\n\n    /** @type {WeakMap<Dependency, ModuleGraphConnection>} */\n    this._dependencyMap = new WeakMap();\n    /** @type {Map<Module, ModuleGraphModule>} */\n\n    this._moduleMap = new Map();\n    /** @type {WeakMap<any, Object>} */\n\n    this._metaMap = new WeakMap();\n    /** @type {WeakTupleMap<any[], any>} */\n\n    this._cache = undefined;\n    /** @type {Map<Module, WeakTupleMap<any, any>>} */\n\n    this._moduleMemCaches = undefined;\n  }\n  /**\n   * @param {Module} module the module\n   * @returns {ModuleGraphModule} the internal module\n   */\n\n\n  _createClass(ModuleGraph, [{\n    key: \"_getModuleGraphModule\",\n    value: function _getModuleGraphModule(module) {\n      var mgm = this._moduleMap.get(module);\n\n      if (mgm === undefined) {\n        mgm = new ModuleGraphModule();\n\n        this._moduleMap.set(module, mgm);\n      }\n\n      return mgm;\n    }\n    /**\n     * @param {Dependency} dependency the dependency\n     * @param {DependenciesBlock} block parent block\n     * @param {Module} module parent module\n     * @param {number=} indexInBlock position in block\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setParents\",\n    value: function setParents(dependency, block, module) {\n      var indexInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n      dependency._parentDependenciesBlockIndex = indexInBlock;\n      dependency._parentDependenciesBlock = block;\n      dependency._parentModule = module;\n    }\n    /**\n     * @param {Dependency} dependency the dependency\n     * @returns {Module} parent module\n     */\n\n  }, {\n    key: \"getParentModule\",\n    value: function getParentModule(dependency) {\n      return dependency._parentModule;\n    }\n    /**\n     * @param {Dependency} dependency the dependency\n     * @returns {DependenciesBlock} parent block\n     */\n\n  }, {\n    key: \"getParentBlock\",\n    value: function getParentBlock(dependency) {\n      return dependency._parentDependenciesBlock;\n    }\n    /**\n     * @param {Dependency} dependency the dependency\n     * @returns {number} index\n     */\n\n  }, {\n    key: \"getParentBlockIndex\",\n    value: function getParentBlockIndex(dependency) {\n      return dependency._parentDependenciesBlockIndex;\n    }\n    /**\n     * @param {Module} originModule the referencing module\n     * @param {Dependency} dependency the referencing dependency\n     * @param {Module} module the referenced module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setResolvedModule\",\n    value: function setResolvedModule(originModule, dependency, module) {\n      var connection = new ModuleGraphConnection(originModule, dependency, module, undefined, dependency.weak, dependency.getCondition(this));\n\n      var connections = this._getModuleGraphModule(module).incomingConnections;\n\n      connections.add(connection);\n\n      if (originModule) {\n        var mgm = this._getModuleGraphModule(originModule);\n\n        if (mgm._unassignedConnections === undefined) {\n          mgm._unassignedConnections = [];\n        }\n\n        mgm._unassignedConnections.push(connection);\n\n        if (mgm.outgoingConnections === undefined) {\n          mgm.outgoingConnections = new SortableSet();\n        }\n\n        mgm.outgoingConnections.add(connection);\n      } else {\n        this._dependencyMap.set(dependency, connection);\n      }\n    }\n    /**\n     * @param {Dependency} dependency the referencing dependency\n     * @param {Module} module the referenced module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateModule\",\n    value: function updateModule(dependency, module) {\n      var connection = this.getConnection(dependency);\n      if (connection.module === module) return;\n      var newConnection = connection.clone();\n      newConnection.module = module;\n\n      this._dependencyMap.set(dependency, newConnection);\n\n      connection.setActive(false);\n\n      var originMgm = this._getModuleGraphModule(connection.originModule);\n\n      originMgm.outgoingConnections.add(newConnection);\n\n      var targetMgm = this._getModuleGraphModule(module);\n\n      targetMgm.incomingConnections.add(newConnection);\n    }\n    /**\n     * @param {Dependency} dependency the referencing dependency\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeConnection\",\n    value: function removeConnection(dependency) {\n      var connection = this.getConnection(dependency);\n\n      var targetMgm = this._getModuleGraphModule(connection.module);\n\n      targetMgm.incomingConnections.delete(connection);\n\n      var originMgm = this._getModuleGraphModule(connection.originModule);\n\n      originMgm.outgoingConnections.delete(connection);\n\n      this._dependencyMap.set(dependency, null);\n    }\n    /**\n     * @param {Dependency} dependency the referencing dependency\n     * @param {string} explanation an explanation\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addExplanation\",\n    value: function addExplanation(dependency, explanation) {\n      var connection = this.getConnection(dependency);\n      connection.addExplanation(explanation);\n    }\n    /**\n     * @param {Module} sourceModule the source module\n     * @param {Module} targetModule the target module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"cloneModuleAttributes\",\n    value: function cloneModuleAttributes(sourceModule, targetModule) {\n      var oldMgm = this._getModuleGraphModule(sourceModule);\n\n      var newMgm = this._getModuleGraphModule(targetModule);\n\n      newMgm.postOrderIndex = oldMgm.postOrderIndex;\n      newMgm.preOrderIndex = oldMgm.preOrderIndex;\n      newMgm.depth = oldMgm.depth;\n      newMgm.exports = oldMgm.exports;\n      newMgm.async = oldMgm.async;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeModuleAttributes\",\n    value: function removeModuleAttributes(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.postOrderIndex = null;\n      mgm.preOrderIndex = null;\n      mgm.depth = null;\n      mgm.async = false;\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeAllModuleAttributes\",\n    value: function removeAllModuleAttributes() {\n      var _iterator3 = _createForOfIteratorHelper(this._moduleMap.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var mgm = _step3.value;\n          mgm.postOrderIndex = null;\n          mgm.preOrderIndex = null;\n          mgm.depth = null;\n          mgm.async = false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * @param {Module} oldModule the old referencing module\n     * @param {Module} newModule the new referencing module\n     * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n     * @returns {void}\n     */\n\n  }, {\n    key: \"moveModuleConnections\",\n    value: function moveModuleConnections(oldModule, newModule, filterConnection) {\n      if (oldModule === newModule) return;\n\n      var oldMgm = this._getModuleGraphModule(oldModule);\n\n      var newMgm = this._getModuleGraphModule(newModule); // Outgoing connections\n\n\n      var oldConnections = oldMgm.outgoingConnections;\n\n      if (oldConnections !== undefined) {\n        if (newMgm.outgoingConnections === undefined) {\n          newMgm.outgoingConnections = new SortableSet();\n        }\n\n        var newConnections = newMgm.outgoingConnections;\n\n        var _iterator4 = _createForOfIteratorHelper(oldConnections),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var connection = _step4.value;\n\n            if (filterConnection(connection)) {\n              connection.originModule = newModule;\n              newConnections.add(connection);\n              oldConnections.delete(connection);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } // Incoming connections\n\n\n      var oldConnections2 = oldMgm.incomingConnections;\n      var newConnections2 = newMgm.incomingConnections;\n\n      var _iterator5 = _createForOfIteratorHelper(oldConnections2),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _connection = _step5.value;\n\n          if (filterConnection(_connection)) {\n            _connection.module = newModule;\n            newConnections2.add(_connection);\n            oldConnections2.delete(_connection);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n    /**\n     * @param {Module} oldModule the old referencing module\n     * @param {Module} newModule the new referencing module\n     * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n     * @returns {void}\n     */\n\n  }, {\n    key: \"copyOutgoingModuleConnections\",\n    value: function copyOutgoingModuleConnections(oldModule, newModule, filterConnection) {\n      if (oldModule === newModule) return;\n\n      var oldMgm = this._getModuleGraphModule(oldModule);\n\n      var newMgm = this._getModuleGraphModule(newModule); // Outgoing connections\n\n\n      var oldConnections = oldMgm.outgoingConnections;\n\n      if (oldConnections !== undefined) {\n        if (newMgm.outgoingConnections === undefined) {\n          newMgm.outgoingConnections = new SortableSet();\n        }\n\n        var newConnections = newMgm.outgoingConnections;\n\n        var _iterator6 = _createForOfIteratorHelper(oldConnections),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var connection = _step6.value;\n\n            if (filterConnection(connection)) {\n              var newConnection = connection.clone();\n              newConnection.originModule = newModule;\n              newConnections.add(newConnection);\n\n              if (newConnection.module !== undefined) {\n                var otherMgm = this._getModuleGraphModule(newConnection.module);\n\n                otherMgm.incomingConnections.add(newConnection);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n    }\n    /**\n     * @param {Module} module the referenced module\n     * @param {string} explanation an explanation why it's referenced\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addExtraReason\",\n    value: function addExtraReason(module, explanation) {\n      var connections = this._getModuleGraphModule(module).incomingConnections;\n\n      connections.add(new ModuleGraphConnection(null, null, module, explanation));\n    }\n    /**\n     * @param {Dependency} dependency the dependency to look for a referenced module\n     * @returns {Module} the referenced module\n     */\n\n  }, {\n    key: \"getResolvedModule\",\n    value: function getResolvedModule(dependency) {\n      var connection = this.getConnection(dependency);\n      return connection !== undefined ? connection.resolvedModule : null;\n    }\n    /**\n     * @param {Dependency} dependency the dependency to look for a referenced module\n     * @returns {ModuleGraphConnection | undefined} the connection\n     */\n\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(dependency) {\n      var connection = this._dependencyMap.get(dependency);\n\n      if (connection === undefined) {\n        var _module2 = this.getParentModule(dependency);\n\n        if (_module2 !== undefined) {\n          var mgm = this._getModuleGraphModule(_module2);\n\n          if (mgm._unassignedConnections && mgm._unassignedConnections.length !== 0) {\n            var foundConnection;\n\n            var _iterator7 = _createForOfIteratorHelper(mgm._unassignedConnections),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var _connection2 = _step7.value;\n\n                this._dependencyMap.set(_connection2.dependency, _connection2);\n\n                if (_connection2.dependency === dependency) foundConnection = _connection2;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n\n            mgm._unassignedConnections.length = 0;\n\n            if (foundConnection !== undefined) {\n              return foundConnection;\n            }\n          }\n        }\n\n        this._dependencyMap.set(dependency, null);\n\n        return undefined;\n      }\n\n      return connection === null ? undefined : connection;\n    }\n    /**\n     * @param {Dependency} dependency the dependency to look for a referenced module\n     * @returns {Module} the referenced module\n     */\n\n  }, {\n    key: \"getModule\",\n    value: function getModule(dependency) {\n      var connection = this.getConnection(dependency);\n      return connection !== undefined ? connection.module : null;\n    }\n    /**\n     * @param {Dependency} dependency the dependency to look for a referencing module\n     * @returns {Module} the referencing module\n     */\n\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin(dependency) {\n      var connection = this.getConnection(dependency);\n      return connection !== undefined ? connection.originModule : null;\n    }\n    /**\n     * @param {Dependency} dependency the dependency to look for a referencing module\n     * @returns {Module} the original referencing module\n     */\n\n  }, {\n    key: \"getResolvedOrigin\",\n    value: function getResolvedOrigin(dependency) {\n      var connection = this.getConnection(dependency);\n      return connection !== undefined ? connection.resolvedOriginModule : null;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {Iterable<ModuleGraphConnection>} reasons why a module is included\n     */\n\n  }, {\n    key: \"getIncomingConnections\",\n    value: function getIncomingConnections(module) {\n      var connections = this._getModuleGraphModule(module).incomingConnections;\n\n      return connections;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {Iterable<ModuleGraphConnection>} list of outgoing connections\n     */\n\n  }, {\n    key: \"getOutgoingConnections\",\n    value: function getOutgoingConnections(module) {\n      var connections = this._getModuleGraphModule(module).outgoingConnections;\n\n      return connections === undefined ? EMPTY_SET : connections;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} reasons why a module is included, in a map by source module\n     */\n\n  }, {\n    key: \"getIncomingConnectionsByOriginModule\",\n    value: function getIncomingConnectionsByOriginModule(module) {\n      var connections = this._getModuleGraphModule(module).incomingConnections;\n\n      return connections.getFromUnorderedCache(getConnectionsByOriginModule);\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]> | undefined} connections to modules, in a map by module\n     */\n\n  }, {\n    key: \"getOutgoingConnectionsByModule\",\n    value: function getOutgoingConnectionsByModule(module) {\n      var connections = this._getModuleGraphModule(module).outgoingConnections;\n\n      return connections === undefined ? undefined : connections.getFromUnorderedCache(getConnectionsByModule);\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {ModuleProfile | null} the module profile\n     */\n\n  }, {\n    key: \"getProfile\",\n    value: function getProfile(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.profile;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {ModuleProfile | null} profile the module profile\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setProfile\",\n    value: function setProfile(module, profile) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.profile = profile;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {Module | null} the issuer module\n     */\n\n  }, {\n    key: \"getIssuer\",\n    value: function getIssuer(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.issuer;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {Module | null} issuer the issuer module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setIssuer\",\n    value: function setIssuer(module, issuer) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.issuer = issuer;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {Module | null} issuer the issuer module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setIssuerIfUnset\",\n    value: function setIssuerIfUnset(module, issuer) {\n      var mgm = this._getModuleGraphModule(module);\n\n      if (mgm.issuer === undefined) mgm.issuer = issuer;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {(string | OptimizationBailoutFunction)[]} optimization bailouts\n     */\n\n  }, {\n    key: \"getOptimizationBailout\",\n    value: function getOptimizationBailout(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.optimizationBailout;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {true | string[] | null} the provided exports\n     */\n\n  }, {\n    key: \"getProvidedExports\",\n    value: function getProvidedExports(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.exports.getProvidedExports();\n    }\n    /**\n     * @param {Module} module the module\n     * @param {string | string[]} exportName a name of an export\n     * @returns {boolean | null} true, if the export is provided by the module.\n     * null, if it's unknown.\n     * false, if it's not provided.\n     */\n\n  }, {\n    key: \"isExportProvided\",\n    value: function isExportProvided(module, exportName) {\n      var mgm = this._getModuleGraphModule(module);\n\n      var result = mgm.exports.isExportProvided(exportName);\n      return result === undefined ? null : result;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {ExportsInfo} info about the exports\n     */\n\n  }, {\n    key: \"getExportsInfo\",\n    value: function getExportsInfo(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.exports;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {string} exportName the export\n     * @returns {ExportInfo} info about the export\n     */\n\n  }, {\n    key: \"getExportInfo\",\n    value: function getExportInfo(module, exportName) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.exports.getExportInfo(exportName);\n    }\n    /**\n     * @param {Module} module the module\n     * @param {string} exportName the export\n     * @returns {ExportInfo} info about the export (do not modify)\n     */\n\n  }, {\n    key: \"getReadOnlyExportInfo\",\n    value: function getReadOnlyExportInfo(module, exportName) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.exports.getReadOnlyExportInfo(exportName);\n    }\n    /**\n     * @param {Module} module the module\n     * @param {RuntimeSpec} runtime the runtime\n     * @returns {false | true | SortableSet<string> | null} the used exports\n     * false: module is not used at all.\n     * true: the module namespace/object export is used.\n     * SortableSet<string>: these export names are used.\n     * empty SortableSet<string>: module is used but no export.\n     * null: unknown, worst case should be assumed.\n     */\n\n  }, {\n    key: \"getUsedExports\",\n    value: function getUsedExports(module, runtime) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.exports.getUsedExports(runtime);\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {number} the index of the module\n     */\n\n  }, {\n    key: \"getPreOrderIndex\",\n    value: function getPreOrderIndex(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.preOrderIndex;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {number} the index of the module\n     */\n\n  }, {\n    key: \"getPostOrderIndex\",\n    value: function getPostOrderIndex(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.postOrderIndex;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setPreOrderIndex\",\n    value: function setPreOrderIndex(module, index) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.preOrderIndex = index;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} index the index of the module\n     * @returns {boolean} true, if the index was set\n     */\n\n  }, {\n    key: \"setPreOrderIndexIfUnset\",\n    value: function setPreOrderIndexIfUnset(module, index) {\n      var mgm = this._getModuleGraphModule(module);\n\n      if (mgm.preOrderIndex === null) {\n        mgm.preOrderIndex = index;\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setPostOrderIndex\",\n    value: function setPostOrderIndex(module, index) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.postOrderIndex = index;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} index the index of the module\n     * @returns {boolean} true, if the index was set\n     */\n\n  }, {\n    key: \"setPostOrderIndexIfUnset\",\n    value: function setPostOrderIndexIfUnset(module, index) {\n      var mgm = this._getModuleGraphModule(module);\n\n      if (mgm.postOrderIndex === null) {\n        mgm.postOrderIndex = index;\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {number} the depth of the module\n     */\n\n  }, {\n    key: \"getDepth\",\n    value: function getDepth(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.depth;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} depth the depth of the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setDepth\",\n    value: function setDepth(module, depth) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.depth = depth;\n    }\n    /**\n     * @param {Module} module the module\n     * @param {number} depth the depth of the module\n     * @returns {boolean} true, if the depth was set\n     */\n\n  }, {\n    key: \"setDepthIfLower\",\n    value: function setDepthIfLower(module, depth) {\n      var mgm = this._getModuleGraphModule(module);\n\n      if (mgm.depth === null || mgm.depth > depth) {\n        mgm.depth = depth;\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {boolean} true, if the module is async\n     */\n\n  }, {\n    key: \"isAsync\",\n    value: function isAsync(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      return mgm.async;\n    }\n    /**\n     * @param {Module} module the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setAsync\",\n    value: function setAsync(module) {\n      var mgm = this._getModuleGraphModule(module);\n\n      mgm.async = true;\n    }\n    /**\n     * @param {any} thing any thing\n     * @returns {Object} metadata\n     */\n\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(thing) {\n      var meta = this._metaMap.get(thing);\n\n      if (meta === undefined) {\n        meta = Object.create(null);\n\n        this._metaMap.set(thing, meta);\n      }\n\n      return meta;\n    }\n    /**\n     * @param {any} thing any thing\n     * @returns {Object} metadata\n     */\n\n  }, {\n    key: \"getMetaIfExisting\",\n    value: function getMetaIfExisting(thing) {\n      return this._metaMap.get(thing);\n    }\n    /**\n     * @param {string=} cacheStage a persistent stage name for caching\n     */\n\n  }, {\n    key: \"freeze\",\n    value: function freeze(cacheStage) {\n      this._cache = new WeakTupleMap();\n      this._cacheStage = cacheStage;\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      this._cache = undefined;\n      this._cacheStage = undefined;\n    }\n    /**\n     * @template {any[]} T\n     * @template V\n     * @param {(moduleGraph: ModuleGraph, ...args: T) => V} fn computer\n     * @param {T} args arguments\n     * @returns {V} computed value or cached\n     */\n\n  }, {\n    key: \"cached\",\n    value: function cached(fn) {\n      var _this$_cache,\n          _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (this._cache === undefined) return fn.apply(void 0, [this].concat(args));\n      return (_this$_cache = this._cache).provide.apply(_this$_cache, [fn].concat(args, [function () {\n        return fn.apply(void 0, [_this].concat(args));\n      }]));\n    }\n    /**\n     * @param {Map<Module, WeakTupleMap<any, any>>} moduleMemCaches mem caches for modules for better caching\n     */\n\n  }, {\n    key: \"setModuleMemCaches\",\n    value: function setModuleMemCaches(moduleMemCaches) {\n      this._moduleMemCaches = moduleMemCaches;\n    }\n    /**\n     * @param {Dependency} dependency dependency\n     * @param {...any} args arguments, last argument is a function called with moduleGraph, dependency, ...args\n     * @returns {any} computed value or cached\n     */\n\n  }, {\n    key: \"dependencyCacheProvide\",\n    value: function dependencyCacheProvide(dependency) {\n      var _this2 = this,\n          _this$_cache2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      /** @type {(moduleGraph: ModuleGraph, dependency: Dependency, ...args: any[]) => any} */\n      var fn = args.pop();\n\n      if (this._moduleMemCaches && this._cacheStage) {\n        var memCache = this._moduleMemCaches.get(this.getParentModule(dependency));\n\n        if (memCache !== undefined) {\n          return memCache.provide.apply(memCache, [dependency, this._cacheStage].concat(args, [function () {\n            return fn.apply(void 0, [_this2, dependency].concat(args));\n          }]));\n        }\n      }\n\n      if (this._cache === undefined) return fn.apply(void 0, [this, dependency].concat(args));\n      return (_this$_cache2 = this._cache).provide.apply(_this$_cache2, [dependency].concat(args, [function () {\n        return fn.apply(void 0, [_this2, dependency].concat(args));\n      }]));\n    } // TODO remove in webpack 6\n\n    /**\n     * @param {Module} module the module\n     * @param {string} deprecateMessage message for the deprecation message\n     * @param {string} deprecationCode code for the deprecation\n     * @returns {ModuleGraph} the module graph\n     */\n\n  }], [{\n    key: \"getModuleGraphForModule\",\n    value: function getModuleGraphForModule(module, deprecateMessage, deprecationCode) {\n      var fn = deprecateMap.get(deprecateMessage);\n      if (fn) return fn(module);\n      var newFn = util.deprecate(\n      /**\n       * @param {Module} module the module\n       * @returns {ModuleGraph} the module graph\n       */\n      function (module) {\n        var moduleGraph = moduleGraphForModuleMap.get(module);\n        if (!moduleGraph) throw new Error(deprecateMessage + \"There was no ModuleGraph assigned to the Module for backward-compat (Use the new API)\");\n        return moduleGraph;\n      }, deprecateMessage + \": Use new ModuleGraph API\", deprecationCode);\n      deprecateMap.set(deprecateMessage, newFn);\n      return newFn(module);\n    } // TODO remove in webpack 6\n\n    /**\n     * @param {Module} module the module\n     * @param {ModuleGraph} moduleGraph the module graph\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setModuleGraphForModule\",\n    value: function setModuleGraphForModule(module, moduleGraph) {\n      moduleGraphForModuleMap.set(module, moduleGraph);\n    } // TODO remove in webpack 6\n\n    /**\n     * @param {Module} module the module\n     * @returns {void}\n     */\n\n  }, {\n    key: \"clearModuleGraphForModule\",\n    value: function clearModuleGraphForModule(module) {\n      moduleGraphForModuleMap.delete(module);\n    }\n  }]);\n\n  return ModuleGraph;\n}(); // TODO remove in webpack 6\n\n/** @type {WeakMap<Module, ModuleGraph>} */\n\n\nvar moduleGraphForModuleMap = new WeakMap(); // TODO remove in webpack 6\n\n/** @type {Map<string, (module: Module) => ModuleGraph>} */\n\nvar deprecateMap = new Map();\nmodule.exports = ModuleGraph;\nmodule.exports.ModuleGraphConnection = ModuleGraphConnection;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ModuleGraph.js"],"names":["util","require","ExportsInfo","ModuleGraphConnection","SortableSet","WeakTupleMap","EMPTY_SET","Set","getConnectionsByOriginModule","set","map","Map","lastModule","lastList","undefined","connection","originModule","push","list","get","getConnectionsByModule","module","ModuleGraphModule","incomingConnections","outgoingConnections","issuer","optimizationBailout","exports","preOrderIndex","postOrderIndex","depth","profile","async","_unassignedConnections","ModuleGraph","_dependencyMap","WeakMap","_moduleMap","_metaMap","_cache","_moduleMemCaches","mgm","dependency","block","indexInBlock","_parentDependenciesBlockIndex","_parentDependenciesBlock","_parentModule","weak","getCondition","connections","_getModuleGraphModule","add","getConnection","newConnection","clone","setActive","originMgm","targetMgm","delete","explanation","addExplanation","sourceModule","targetModule","oldMgm","newMgm","values","oldModule","newModule","filterConnection","oldConnections","newConnections","oldConnections2","newConnections2","otherMgm","resolvedModule","getParentModule","length","foundConnection","resolvedOriginModule","getFromUnorderedCache","getProvidedExports","exportName","result","isExportProvided","getExportInfo","getReadOnlyExportInfo","runtime","getUsedExports","index","thing","meta","Object","create","cacheStage","_cacheStage","fn","args","provide","moduleMemCaches","pop","memCache","deprecateMessage","deprecationCode","deprecateMap","newFn","deprecate","moduleGraph","moduleGraphForModuleMap","Error"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ExportsInfo = require(\"./ExportsInfo\");\nconst ModuleGraphConnection = require(\"./ModuleGraphConnection\");\nconst SortableSet = require(\"./util/SortableSet\");\nconst WeakTupleMap = require(\"./util/WeakTupleMap\");\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./ExportsInfo\").ExportInfo} ExportInfo */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n/** @typedef {import(\"./util/runtime\").RuntimeSpec} RuntimeSpec */\n\n/**\n * @callback OptimizationBailoutFunction\n * @param {RequestShortener} requestShortener\n * @returns {string}\n */\n\nconst EMPTY_SET = new Set();\n\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by origin module\n */\nconst getConnectionsByOriginModule = set => {\n\tconst map = new Map();\n\t/** @type {Module | 0} */\n\tlet lastModule = 0;\n\t/** @type {ModuleGraphConnection[]} */\n\tlet lastList = undefined;\n\tfor (const connection of set) {\n\t\tconst { originModule } = connection;\n\t\tif (lastModule === originModule) {\n\t\t\tlastList.push(connection);\n\t\t} else {\n\t\t\tlastModule = originModule;\n\t\t\tconst list = map.get(originModule);\n\t\t\tif (list !== undefined) {\n\t\t\t\tlastList = list;\n\t\t\t\tlist.push(connection);\n\t\t\t} else {\n\t\t\t\tconst list = [connection];\n\t\t\t\tlastList = list;\n\t\t\t\tmap.set(originModule, list);\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n};\n\n/**\n * @param {SortableSet<ModuleGraphConnection>} set input\n * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} mapped by module\n */\nconst getConnectionsByModule = set => {\n\tconst map = new Map();\n\t/** @type {Module | 0} */\n\tlet lastModule = 0;\n\t/** @type {ModuleGraphConnection[]} */\n\tlet lastList = undefined;\n\tfor (const connection of set) {\n\t\tconst { module } = connection;\n\t\tif (lastModule === module) {\n\t\t\tlastList.push(connection);\n\t\t} else {\n\t\t\tlastModule = module;\n\t\t\tconst list = map.get(module);\n\t\t\tif (list !== undefined) {\n\t\t\t\tlastList = list;\n\t\t\t\tlist.push(connection);\n\t\t\t} else {\n\t\t\t\tconst list = [connection];\n\t\t\t\tlastList = list;\n\t\t\t\tmap.set(module, list);\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n};\n\nclass ModuleGraphModule {\n\tconstructor() {\n\t\t/** @type {SortableSet<ModuleGraphConnection>} */\n\t\tthis.incomingConnections = new SortableSet();\n\t\t/** @type {SortableSet<ModuleGraphConnection> | undefined} */\n\t\tthis.outgoingConnections = undefined;\n\t\t/** @type {Module | null} */\n\t\tthis.issuer = undefined;\n\t\t/** @type {(string | OptimizationBailoutFunction)[]} */\n\t\tthis.optimizationBailout = [];\n\t\t/** @type {ExportsInfo} */\n\t\tthis.exports = new ExportsInfo();\n\t\t/** @type {number} */\n\t\tthis.preOrderIndex = null;\n\t\t/** @type {number} */\n\t\tthis.postOrderIndex = null;\n\t\t/** @type {number} */\n\t\tthis.depth = null;\n\t\t/** @type {ModuleProfile} */\n\t\tthis.profile = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.async = false;\n\t\t/** @type {ModuleGraphConnection[]} */\n\t\tthis._unassignedConnections = undefined;\n\t}\n}\n\nclass ModuleGraph {\n\tconstructor() {\n\t\t/** @type {WeakMap<Dependency, ModuleGraphConnection>} */\n\t\tthis._dependencyMap = new WeakMap();\n\t\t/** @type {Map<Module, ModuleGraphModule>} */\n\t\tthis._moduleMap = new Map();\n\t\t/** @type {WeakMap<any, Object>} */\n\t\tthis._metaMap = new WeakMap();\n\n\t\t/** @type {WeakTupleMap<any[], any>} */\n\t\tthis._cache = undefined;\n\n\t\t/** @type {Map<Module, WeakTupleMap<any, any>>} */\n\t\tthis._moduleMemCaches = undefined;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ModuleGraphModule} the internal module\n\t */\n\t_getModuleGraphModule(module) {\n\t\tlet mgm = this._moduleMap.get(module);\n\t\tif (mgm === undefined) {\n\t\t\tmgm = new ModuleGraphModule();\n\t\t\tthis._moduleMap.set(module, mgm);\n\t\t}\n\t\treturn mgm;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @param {DependenciesBlock} block parent block\n\t * @param {Module} module parent module\n\t * @param {number=} indexInBlock position in block\n\t * @returns {void}\n\t */\n\tsetParents(dependency, block, module, indexInBlock = -1) {\n\t\tdependency._parentDependenciesBlockIndex = indexInBlock;\n\t\tdependency._parentDependenciesBlock = block;\n\t\tdependency._parentModule = module;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {Module} parent module\n\t */\n\tgetParentModule(dependency) {\n\t\treturn dependency._parentModule;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {DependenciesBlock} parent block\n\t */\n\tgetParentBlock(dependency) {\n\t\treturn dependency._parentDependenciesBlock;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency\n\t * @returns {number} index\n\t */\n\tgetParentBlockIndex(dependency) {\n\t\treturn dependency._parentDependenciesBlockIndex;\n\t}\n\n\t/**\n\t * @param {Module} originModule the referencing module\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {Module} module the referenced module\n\t * @returns {void}\n\t */\n\tsetResolvedModule(originModule, dependency, module) {\n\t\tconst connection = new ModuleGraphConnection(\n\t\t\toriginModule,\n\t\t\tdependency,\n\t\t\tmodule,\n\t\t\tundefined,\n\t\t\tdependency.weak,\n\t\t\tdependency.getCondition(this)\n\t\t);\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\tconnections.add(connection);\n\t\tif (originModule) {\n\t\t\tconst mgm = this._getModuleGraphModule(originModule);\n\t\t\tif (mgm._unassignedConnections === undefined) {\n\t\t\t\tmgm._unassignedConnections = [];\n\t\t\t}\n\t\t\tmgm._unassignedConnections.push(connection);\n\t\t\tif (mgm.outgoingConnections === undefined) {\n\t\t\t\tmgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tmgm.outgoingConnections.add(connection);\n\t\t} else {\n\t\t\tthis._dependencyMap.set(dependency, connection);\n\t\t}\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {Module} module the referenced module\n\t * @returns {void}\n\t */\n\tupdateModule(dependency, module) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tif (connection.module === module) return;\n\t\tconst newConnection = connection.clone();\n\t\tnewConnection.module = module;\n\t\tthis._dependencyMap.set(dependency, newConnection);\n\t\tconnection.setActive(false);\n\t\tconst originMgm = this._getModuleGraphModule(connection.originModule);\n\t\toriginMgm.outgoingConnections.add(newConnection);\n\t\tconst targetMgm = this._getModuleGraphModule(module);\n\t\ttargetMgm.incomingConnections.add(newConnection);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @returns {void}\n\t */\n\tremoveConnection(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tconst targetMgm = this._getModuleGraphModule(connection.module);\n\t\ttargetMgm.incomingConnections.delete(connection);\n\t\tconst originMgm = this._getModuleGraphModule(connection.originModule);\n\t\toriginMgm.outgoingConnections.delete(connection);\n\t\tthis._dependencyMap.set(dependency, null);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the referencing dependency\n\t * @param {string} explanation an explanation\n\t * @returns {void}\n\t */\n\taddExplanation(dependency, explanation) {\n\t\tconst connection = this.getConnection(dependency);\n\t\tconnection.addExplanation(explanation);\n\t}\n\n\t/**\n\t * @param {Module} sourceModule the source module\n\t * @param {Module} targetModule the target module\n\t * @returns {void}\n\t */\n\tcloneModuleAttributes(sourceModule, targetModule) {\n\t\tconst oldMgm = this._getModuleGraphModule(sourceModule);\n\t\tconst newMgm = this._getModuleGraphModule(targetModule);\n\t\tnewMgm.postOrderIndex = oldMgm.postOrderIndex;\n\t\tnewMgm.preOrderIndex = oldMgm.preOrderIndex;\n\t\tnewMgm.depth = oldMgm.depth;\n\t\tnewMgm.exports = oldMgm.exports;\n\t\tnewMgm.async = oldMgm.async;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tremoveModuleAttributes(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.postOrderIndex = null;\n\t\tmgm.preOrderIndex = null;\n\t\tmgm.depth = null;\n\t\tmgm.async = false;\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tremoveAllModuleAttributes() {\n\t\tfor (const mgm of this._moduleMap.values()) {\n\t\t\tmgm.postOrderIndex = null;\n\t\t\tmgm.preOrderIndex = null;\n\t\t\tmgm.depth = null;\n\t\t\tmgm.async = false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} oldModule the old referencing module\n\t * @param {Module} newModule the new referencing module\n\t * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n\t * @returns {void}\n\t */\n\tmoveModuleConnections(oldModule, newModule, filterConnection) {\n\t\tif (oldModule === newModule) return;\n\t\tconst oldMgm = this._getModuleGraphModule(oldModule);\n\t\tconst newMgm = this._getModuleGraphModule(newModule);\n\t\t// Outgoing connections\n\t\tconst oldConnections = oldMgm.outgoingConnections;\n\t\tif (oldConnections !== undefined) {\n\t\t\tif (newMgm.outgoingConnections === undefined) {\n\t\t\t\tnewMgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tconst newConnections = newMgm.outgoingConnections;\n\t\t\tfor (const connection of oldConnections) {\n\t\t\t\tif (filterConnection(connection)) {\n\t\t\t\t\tconnection.originModule = newModule;\n\t\t\t\t\tnewConnections.add(connection);\n\t\t\t\t\toldConnections.delete(connection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Incoming connections\n\t\tconst oldConnections2 = oldMgm.incomingConnections;\n\t\tconst newConnections2 = newMgm.incomingConnections;\n\t\tfor (const connection of oldConnections2) {\n\t\t\tif (filterConnection(connection)) {\n\t\t\t\tconnection.module = newModule;\n\t\t\t\tnewConnections2.add(connection);\n\t\t\t\toldConnections2.delete(connection);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} oldModule the old referencing module\n\t * @param {Module} newModule the new referencing module\n\t * @param {function(ModuleGraphConnection): boolean} filterConnection filter predicate for replacement\n\t * @returns {void}\n\t */\n\tcopyOutgoingModuleConnections(oldModule, newModule, filterConnection) {\n\t\tif (oldModule === newModule) return;\n\t\tconst oldMgm = this._getModuleGraphModule(oldModule);\n\t\tconst newMgm = this._getModuleGraphModule(newModule);\n\t\t// Outgoing connections\n\t\tconst oldConnections = oldMgm.outgoingConnections;\n\t\tif (oldConnections !== undefined) {\n\t\t\tif (newMgm.outgoingConnections === undefined) {\n\t\t\t\tnewMgm.outgoingConnections = new SortableSet();\n\t\t\t}\n\t\t\tconst newConnections = newMgm.outgoingConnections;\n\t\t\tfor (const connection of oldConnections) {\n\t\t\t\tif (filterConnection(connection)) {\n\t\t\t\t\tconst newConnection = connection.clone();\n\t\t\t\t\tnewConnection.originModule = newModule;\n\t\t\t\t\tnewConnections.add(newConnection);\n\t\t\t\t\tif (newConnection.module !== undefined) {\n\t\t\t\t\t\tconst otherMgm = this._getModuleGraphModule(newConnection.module);\n\t\t\t\t\t\totherMgm.incomingConnections.add(newConnection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Module} module the referenced module\n\t * @param {string} explanation an explanation why it's referenced\n\t * @returns {void}\n\t */\n\taddExtraReason(module, explanation) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\tconnections.add(new ModuleGraphConnection(null, null, module, explanation));\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {Module} the referenced module\n\t */\n\tgetResolvedModule(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.resolvedModule : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {ModuleGraphConnection | undefined} the connection\n\t */\n\tgetConnection(dependency) {\n\t\tconst connection = this._dependencyMap.get(dependency);\n\t\tif (connection === undefined) {\n\t\t\tconst module = this.getParentModule(dependency);\n\t\t\tif (module !== undefined) {\n\t\t\t\tconst mgm = this._getModuleGraphModule(module);\n\t\t\t\tif (\n\t\t\t\t\tmgm._unassignedConnections &&\n\t\t\t\t\tmgm._unassignedConnections.length !== 0\n\t\t\t\t) {\n\t\t\t\t\tlet foundConnection;\n\t\t\t\t\tfor (const connection of mgm._unassignedConnections) {\n\t\t\t\t\t\tthis._dependencyMap.set(connection.dependency, connection);\n\t\t\t\t\t\tif (connection.dependency === dependency)\n\t\t\t\t\t\t\tfoundConnection = connection;\n\t\t\t\t\t}\n\t\t\t\t\tmgm._unassignedConnections.length = 0;\n\t\t\t\t\tif (foundConnection !== undefined) {\n\t\t\t\t\t\treturn foundConnection;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._dependencyMap.set(dependency, null);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn connection === null ? undefined : connection;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referenced module\n\t * @returns {Module} the referenced module\n\t */\n\tgetModule(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.module : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referencing module\n\t * @returns {Module} the referencing module\n\t */\n\tgetOrigin(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.originModule : null;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency the dependency to look for a referencing module\n\t * @returns {Module} the original referencing module\n\t */\n\tgetResolvedOrigin(dependency) {\n\t\tconst connection = this.getConnection(dependency);\n\t\treturn connection !== undefined ? connection.resolvedOriginModule : null;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Iterable<ModuleGraphConnection>} reasons why a module is included\n\t */\n\tgetIncomingConnections(module) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\treturn connections;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Iterable<ModuleGraphConnection>} list of outgoing connections\n\t */\n\tgetOutgoingConnections(module) {\n\t\tconst connections = this._getModuleGraphModule(module).outgoingConnections;\n\t\treturn connections === undefined ? EMPTY_SET : connections;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]>} reasons why a module is included, in a map by source module\n\t */\n\tgetIncomingConnectionsByOriginModule(module) {\n\t\tconst connections = this._getModuleGraphModule(module).incomingConnections;\n\t\treturn connections.getFromUnorderedCache(getConnectionsByOriginModule);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {readonly Map<Module | undefined, readonly ModuleGraphConnection[]> | undefined} connections to modules, in a map by module\n\t */\n\tgetOutgoingConnectionsByModule(module) {\n\t\tconst connections = this._getModuleGraphModule(module).outgoingConnections;\n\t\treturn connections === undefined\n\t\t\t? undefined\n\t\t\t: connections.getFromUnorderedCache(getConnectionsByModule);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ModuleProfile | null} the module profile\n\t */\n\tgetProfile(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.profile;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {ModuleProfile | null} profile the module profile\n\t * @returns {void}\n\t */\n\tsetProfile(module, profile) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.profile = profile;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {Module | null} the issuer module\n\t */\n\tgetIssuer(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {Module | null} issuer the issuer module\n\t * @returns {void}\n\t */\n\tsetIssuer(module, issuer) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.issuer = issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {Module | null} issuer the issuer module\n\t * @returns {void}\n\t */\n\tsetIssuerIfUnset(module, issuer) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.issuer === undefined) mgm.issuer = issuer;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {(string | OptimizationBailoutFunction)[]} optimization bailouts\n\t */\n\tgetOptimizationBailout(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.optimizationBailout;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {true | string[] | null} the provided exports\n\t */\n\tgetProvidedExports(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getProvidedExports();\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string | string[]} exportName a name of an export\n\t * @returns {boolean | null} true, if the export is provided by the module.\n\t * null, if it's unknown.\n\t * false, if it's not provided.\n\t */\n\tisExportProvided(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tconst result = mgm.exports.isExportProvided(exportName);\n\t\treturn result === undefined ? null : result;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {ExportsInfo} info about the exports\n\t */\n\tgetExportsInfo(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} exportName the export\n\t * @returns {ExportInfo} info about the export\n\t */\n\tgetExportInfo(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getExportInfo(exportName);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} exportName the export\n\t * @returns {ExportInfo} info about the export (do not modify)\n\t */\n\tgetReadOnlyExportInfo(module, exportName) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getReadOnlyExportInfo(exportName);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {RuntimeSpec} runtime the runtime\n\t * @returns {false | true | SortableSet<string> | null} the used exports\n\t * false: module is not used at all.\n\t * true: the module namespace/object export is used.\n\t * SortableSet<string>: these export names are used.\n\t * empty SortableSet<string>: module is used but no export.\n\t * null: unknown, worst case should be assumed.\n\t */\n\tgetUsedExports(module, runtime) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.exports.getUsedExports(runtime);\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the index of the module\n\t */\n\tgetPreOrderIndex(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.preOrderIndex;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the index of the module\n\t */\n\tgetPostOrderIndex(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.postOrderIndex;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetPreOrderIndex(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.preOrderIndex = index;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {boolean} true, if the index was set\n\t */\n\tsetPreOrderIndexIfUnset(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.preOrderIndex === null) {\n\t\t\tmgm.preOrderIndex = index;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetPostOrderIndex(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.postOrderIndex = index;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} index the index of the module\n\t * @returns {boolean} true, if the index was set\n\t */\n\tsetPostOrderIndexIfUnset(module, index) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.postOrderIndex === null) {\n\t\t\tmgm.postOrderIndex = index;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {number} the depth of the module\n\t */\n\tgetDepth(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.depth;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} depth the depth of the module\n\t * @returns {void}\n\t */\n\tsetDepth(module, depth) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.depth = depth;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @param {number} depth the depth of the module\n\t * @returns {boolean} true, if the depth was set\n\t */\n\tsetDepthIfLower(module, depth) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tif (mgm.depth === null || mgm.depth > depth) {\n\t\t\tmgm.depth = depth;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {boolean} true, if the module is async\n\t */\n\tisAsync(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\treturn mgm.async;\n\t}\n\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tsetAsync(module) {\n\t\tconst mgm = this._getModuleGraphModule(module);\n\t\tmgm.async = true;\n\t}\n\n\t/**\n\t * @param {any} thing any thing\n\t * @returns {Object} metadata\n\t */\n\tgetMeta(thing) {\n\t\tlet meta = this._metaMap.get(thing);\n\t\tif (meta === undefined) {\n\t\t\tmeta = Object.create(null);\n\t\t\tthis._metaMap.set(thing, meta);\n\t\t}\n\t\treturn meta;\n\t}\n\n\t/**\n\t * @param {any} thing any thing\n\t * @returns {Object} metadata\n\t */\n\tgetMetaIfExisting(thing) {\n\t\treturn this._metaMap.get(thing);\n\t}\n\n\t/**\n\t * @param {string=} cacheStage a persistent stage name for caching\n\t */\n\tfreeze(cacheStage) {\n\t\tthis._cache = new WeakTupleMap();\n\t\tthis._cacheStage = cacheStage;\n\t}\n\n\tunfreeze() {\n\t\tthis._cache = undefined;\n\t\tthis._cacheStage = undefined;\n\t}\n\n\t/**\n\t * @template {any[]} T\n\t * @template V\n\t * @param {(moduleGraph: ModuleGraph, ...args: T) => V} fn computer\n\t * @param {T} args arguments\n\t * @returns {V} computed value or cached\n\t */\n\tcached(fn, ...args) {\n\t\tif (this._cache === undefined) return fn(this, ...args);\n\t\treturn this._cache.provide(fn, ...args, () => fn(this, ...args));\n\t}\n\n\t/**\n\t * @param {Map<Module, WeakTupleMap<any, any>>} moduleMemCaches mem caches for modules for better caching\n\t */\n\tsetModuleMemCaches(moduleMemCaches) {\n\t\tthis._moduleMemCaches = moduleMemCaches;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency\n\t * @param {...any} args arguments, last argument is a function called with moduleGraph, dependency, ...args\n\t * @returns {any} computed value or cached\n\t */\n\tdependencyCacheProvide(dependency, ...args) {\n\t\t/** @type {(moduleGraph: ModuleGraph, dependency: Dependency, ...args: any[]) => any} */\n\t\tconst fn = args.pop();\n\t\tif (this._moduleMemCaches && this._cacheStage) {\n\t\t\tconst memCache = this._moduleMemCaches.get(\n\t\t\t\tthis.getParentModule(dependency)\n\t\t\t);\n\t\t\tif (memCache !== undefined) {\n\t\t\t\treturn memCache.provide(dependency, this._cacheStage, ...args, () =>\n\t\t\t\t\tfn(this, dependency, ...args)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (this._cache === undefined) return fn(this, dependency, ...args);\n\t\treturn this._cache.provide(dependency, ...args, () =>\n\t\t\tfn(this, dependency, ...args)\n\t\t);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @param {string} deprecateMessage message for the deprecation message\n\t * @param {string} deprecationCode code for the deprecation\n\t * @returns {ModuleGraph} the module graph\n\t */\n\tstatic getModuleGraphForModule(module, deprecateMessage, deprecationCode) {\n\t\tconst fn = deprecateMap.get(deprecateMessage);\n\t\tif (fn) return fn(module);\n\t\tconst newFn = util.deprecate(\n\t\t\t/**\n\t\t\t * @param {Module} module the module\n\t\t\t * @returns {ModuleGraph} the module graph\n\t\t\t */\n\t\t\tmodule => {\n\t\t\t\tconst moduleGraph = moduleGraphForModuleMap.get(module);\n\t\t\t\tif (!moduleGraph)\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tdeprecateMessage +\n\t\t\t\t\t\t\t\"There was no ModuleGraph assigned to the Module for backward-compat (Use the new API)\"\n\t\t\t\t\t);\n\t\t\t\treturn moduleGraph;\n\t\t\t},\n\t\t\tdeprecateMessage + \": Use new ModuleGraph API\",\n\t\t\tdeprecationCode\n\t\t);\n\t\tdeprecateMap.set(deprecateMessage, newFn);\n\t\treturn newFn(module);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @param {ModuleGraph} moduleGraph the module graph\n\t * @returns {void}\n\t */\n\tstatic setModuleGraphForModule(module, moduleGraph) {\n\t\tmoduleGraphForModuleMap.set(module, moduleGraph);\n\t}\n\n\t// TODO remove in webpack 6\n\t/**\n\t * @param {Module} module the module\n\t * @returns {void}\n\t */\n\tstatic clearModuleGraphForModule(module) {\n\t\tmoduleGraphForModuleMap.delete(module);\n\t}\n}\n\n// TODO remove in webpack 6\n/** @type {WeakMap<Module, ModuleGraph>} */\nconst moduleGraphForModuleMap = new WeakMap();\n\n// TODO remove in webpack 6\n/** @type {Map<string, (module: Module) => ModuleGraph>} */\nconst deprecateMap = new Map();\n\nmodule.exports = ModuleGraph;\nmodule.exports.ModuleGraphConnection = ModuleGraphConnection;\n"]},"metadata":{},"sourceType":"script"}