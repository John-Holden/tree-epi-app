{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../OptimizationStages\"),\n    STAGE_ADVANCED = _require.STAGE_ADVANCED;\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar AggressiveMergingPlugin = /*#__PURE__*/function () {\n  function AggressiveMergingPlugin(options) {\n    _classCallCheck(this, AggressiveMergingPlugin);\n\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(AggressiveMergingPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var minSizeReduce = options.minSizeReduce || 1.5;\n      compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunks.tap({\n          name: \"AggressiveMergingPlugin\",\n          stage: STAGE_ADVANCED\n        }, function (chunks) {\n          var chunkGraph = compilation.chunkGraph;\n          /** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n\n          var combinations = [];\n\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var a = _step.value;\n              if (a.canBeInitial()) continue;\n\n              var _iterator2 = _createForOfIteratorHelper(chunks),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var b = _step2.value;\n                  if (b.canBeInitial()) continue;\n                  if (b === a) break;\n\n                  if (!chunkGraph.canChunksBeIntegrated(a, b)) {\n                    continue;\n                  }\n\n                  var aSize = chunkGraph.getChunkSize(b, {\n                    chunkOverhead: 0\n                  });\n                  var bSize = chunkGraph.getChunkSize(a, {\n                    chunkOverhead: 0\n                  });\n                  var abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n                    chunkOverhead: 0\n                  });\n                  var improvement = (aSize + bSize) / abSize;\n                  combinations.push({\n                    a: a,\n                    b: b,\n                    improvement: improvement\n                  });\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          combinations.sort(function (a, b) {\n            return b.improvement - a.improvement;\n          });\n          var pair = combinations[0];\n          if (!pair) return;\n          if (pair.improvement < minSizeReduce) return;\n          chunkGraph.integrateChunks(pair.b, pair.a);\n          compilation.chunks.delete(pair.a);\n          return true;\n        });\n      });\n    }\n  }]);\n\n  return AggressiveMergingPlugin;\n}();\n\nmodule.exports = AggressiveMergingPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/optimize/AggressiveMergingPlugin.js"],"names":["require","STAGE_ADVANCED","AggressiveMergingPlugin","options","undefined","Array","isArray","Error","compiler","minSizeReduce","hooks","thisCompilation","tap","compilation","optimizeChunks","name","stage","chunks","chunkGraph","combinations","a","canBeInitial","b","canChunksBeIntegrated","aSize","getChunkSize","chunkOverhead","bSize","abSize","getIntegratedChunksSize","improvement","push","sort","pair","integrateChunks","delete","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { STAGE_ADVANCED } = require(\"../OptimizationStages\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass AggressiveMergingPlugin {\n\tconstructor(options) {\n\t\tif (\n\t\t\t(options !== undefined && typeof options !== \"object\") ||\n\t\t\tArray.isArray(options)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minSizeReduce = options.minSizeReduce || 1.5;\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"AggressiveMergingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunks.tap(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"AggressiveMergingPlugin\",\n\t\t\t\t\t\tstage: STAGE_ADVANCED\n\t\t\t\t\t},\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\t/** @type {{a: Chunk, b: Chunk, improvement: number}[]} */\n\t\t\t\t\t\tlet combinations = [];\n\t\t\t\t\t\tfor (const a of chunks) {\n\t\t\t\t\t\t\tif (a.canBeInitial()) continue;\n\t\t\t\t\t\t\tfor (const b of chunks) {\n\t\t\t\t\t\t\t\tif (b.canBeInitial()) continue;\n\t\t\t\t\t\t\t\tif (b === a) break;\n\t\t\t\t\t\t\t\tif (!chunkGraph.canChunksBeIntegrated(a, b)) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst aSize = chunkGraph.getChunkSize(b, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst bSize = chunkGraph.getChunkSize(a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst abSize = chunkGraph.getIntegratedChunksSize(b, a, {\n\t\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tconst improvement = (aSize + bSize) / abSize;\n\t\t\t\t\t\t\t\tcombinations.push({\n\t\t\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\t\timprovement\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcombinations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.improvement - a.improvement;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst pair = combinations[0];\n\n\t\t\t\t\t\tif (!pair) return;\n\t\t\t\t\t\tif (pair.improvement < minSizeReduce) return;\n\n\t\t\t\t\t\tchunkGraph.integrateChunks(pair.b, pair.a);\n\t\t\t\t\t\tcompilation.chunks.delete(pair.a);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AggressiveMergingPlugin;\n"]},"metadata":{},"sourceType":"script"}