{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar enabledTypes = new WeakMap();\n\nvar getEnabledTypes = function getEnabledTypes(compiler) {\n  var set = enabledTypes.get(compiler);\n\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n\n  return set;\n};\n\nvar EnableChunkLoadingPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ChunkLoadingType} type library type that should be available\n   */\n  function EnableChunkLoadingPlugin(type) {\n    _classCallCheck(this, EnableChunkLoadingPlugin);\n\n    this.type = type;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @param {ChunkLoadingType} type type of library\n   * @returns {void}\n   */\n\n\n  _createClass(EnableChunkLoadingPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      var type = this.type; // Only enable once\n\n      var enabled = getEnabledTypes(compiler);\n      if (enabled.has(type)) return;\n      enabled.add(type);\n\n      if (typeof type === \"string\") {\n        switch (type) {\n          case \"jsonp\":\n            {\n              var JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n\n              new JsonpChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n\n          case \"import-scripts\":\n            {\n              var ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n\n              new ImportScriptsChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n\n          case \"require\":\n            {\n              //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n              var CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\n              new CommonJsChunkLoadingPlugin({\n                asyncChunkLoading: false\n              }).apply(compiler);\n              break;\n            }\n\n          case \"async-node\":\n            {\n              //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n              var _CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\n              new _CommonJsChunkLoadingPlugin({\n                asyncChunkLoading: true\n              }).apply(compiler);\n              break;\n            }\n\n          case \"import\":\n            {\n              var ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n\n              new ModuleChunkLoadingPlugin().apply(compiler);\n              break;\n            }\n\n          case \"universal\":\n            // TODO implement universal chunk loading\n            throw new Error(\"Universal Chunk Loading is not implemented yet\");\n\n          default:\n            throw new Error(\"Unsupported chunk loading type \".concat(type, \".\\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.\"));\n        }\n      } else {// TODO support plugin instances here\n        // apply them to the compiler\n      }\n    }\n  }], [{\n    key: \"setEnabled\",\n    value: function setEnabled(compiler, type) {\n      getEnabledTypes(compiler).add(type);\n    }\n    /**\n     * @param {Compiler} compiler the compiler instance\n     * @param {ChunkLoadingType} type type of library\n     * @returns {void}\n     */\n\n  }, {\n    key: \"checkEnabled\",\n    value: function checkEnabled(compiler, type) {\n      if (!getEnabledTypes(compiler).has(type)) {\n        throw new Error(\"Chunk loading type \\\"\".concat(type, \"\\\" is not enabled. \") + \"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" + 'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n      }\n    }\n  }]);\n\n  return EnableChunkLoadingPlugin;\n}();\n\nmodule.exports = EnableChunkLoadingPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/javascript/EnableChunkLoadingPlugin.js"],"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableChunkLoadingPlugin","type","enabled","has","add","JsonpChunkLoadingPlugin","require","apply","ImportScriptsChunkLoadingPlugin","CommonJsChunkLoadingPlugin","asyncChunkLoading","ModuleChunkLoadingPlugin","Error","Array","from","join","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\nconst enabledTypes = new WeakMap();\n\nconst getEnabledTypes = compiler => {\n\tlet set = enabledTypes.get(compiler);\n\tif (set === undefined) {\n\t\tset = new Set();\n\t\tenabledTypes.set(compiler, set);\n\t}\n\treturn set;\n};\n\nclass EnableChunkLoadingPlugin {\n\t/**\n\t * @param {ChunkLoadingType} type library type that should be available\n\t */\n\tconstructor(type) {\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic setEnabled(compiler, type) {\n\t\tgetEnabledTypes(compiler).add(type);\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @param {ChunkLoadingType} type type of library\n\t * @returns {void}\n\t */\n\tstatic checkEnabled(compiler, type) {\n\t\tif (!getEnabledTypes(compiler).has(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Chunk loading type \"${type}\" is not enabled. ` +\n\t\t\t\t\t\"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" +\n\t\t\t\t\t'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' +\n\t\t\t\t\t'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' +\n\t\t\t\t\t\"These types are enabled: \" +\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { type } = this;\n\n\t\t// Only enable once\n\t\tconst enabled = getEnabledTypes(compiler);\n\t\tif (enabled.has(type)) return;\n\t\tenabled.add(type);\n\n\t\tif (typeof type === \"string\") {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"jsonp\": {\n\t\t\t\t\tconst JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n\t\t\t\t\tnew JsonpChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import-scripts\": {\n\t\t\t\t\tconst ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n\t\t\t\t\tnew ImportScriptsChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"require\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: false\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"async-node\": {\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\n\t\t\t\t\t\tasyncChunkLoading: true\n\t\t\t\t\t}).apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"import\": {\n\t\t\t\t\tconst ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n\t\t\t\t\tnew ModuleChunkLoadingPlugin().apply(compiler);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"universal\":\n\t\t\t\t\t// TODO implement universal chunk loading\n\t\t\t\t\tthrow new Error(\"Universal Chunk Loading is not implemented yet\");\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unsupported chunk loading type ${type}.\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO support plugin instances here\n\t\t\t// apply them to the compiler\n\t\t}\n\t}\n}\n\nmodule.exports = EnableChunkLoadingPlugin;\n"]},"metadata":{},"sourceType":"script"}