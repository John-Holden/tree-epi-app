{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\n\nvar _require = require(\"./util/fs\"),\n    join = _require.join;\n\nvar ContextReplacementPlugin = /*#__PURE__*/function () {\n  function ContextReplacementPlugin(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {\n    _classCallCheck(this, ContextReplacementPlugin);\n\n    this.resourceRegExp = resourceRegExp;\n\n    if (typeof newContentResource === \"function\") {\n      this.newContentCallback = newContentResource;\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"object\") {\n      this.newContentResource = newContentResource;\n\n      this.newContentCreateContextMap = function (fs, callback) {\n        callback(null, newContentRecursive);\n      };\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"function\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = newContentRecursive;\n    } else {\n      if (typeof newContentResource !== \"string\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = newContentResource;\n        newContentResource = undefined;\n      }\n\n      if (typeof newContentRecursive !== \"boolean\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = undefined;\n      }\n\n      this.newContentResource = newContentResource;\n      this.newContentRecursive = newContentRecursive;\n      this.newContentRegExp = newContentRegExp;\n    }\n  }\n\n  _createClass(ContextReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var resourceRegExp = this.resourceRegExp;\n      var newContentCallback = this.newContentCallback;\n      var newContentResource = this.newContentResource;\n      var newContentRecursive = this.newContentRecursive;\n      var newContentRegExp = this.newContentRegExp;\n      var newContentCreateContextMap = this.newContentCreateContextMap;\n      compiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", function (cmf) {\n        cmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.request)) {\n            if (newContentResource !== undefined) {\n              result.request = newContentResource;\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              newContentCallback(result);\n            } else {\n              var _iterator = _createForOfIteratorHelper(result.dependencies),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var d = _step.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          }\n\n          return result;\n        });\n        cmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.resource)) {\n            if (newContentResource !== undefined) {\n              if (newContentResource.startsWith(\"/\") || newContentResource.length > 1 && newContentResource[1] === \":\") {\n                result.resource = newContentResource;\n              } else {\n                result.resource = join(compiler.inputFileSystem, result.resource, newContentResource);\n              }\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCreateContextMap === \"function\") {\n              result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              var origResource = result.resource;\n              newContentCallback(result);\n\n              if (result.resource !== origResource && !result.resource.startsWith(\"/\") && (result.resource.length <= 1 || result.resource[1] !== \":\")) {\n                // When the function changed it to an relative path\n                result.resource = join(compiler.inputFileSystem, origResource, result.resource);\n              }\n            } else {\n              var _iterator2 = _createForOfIteratorHelper(result.dependencies),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var d = _step2.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n\n          return result;\n        });\n      });\n    }\n  }]);\n\n  return ContextReplacementPlugin;\n}();\n\nvar createResolveDependenciesFromContextMap = function createResolveDependenciesFromContextMap(createContextMap) {\n  var resolveDependenciesFromContextMap = function resolveDependenciesFromContextMap(fs, options, callback) {\n    createContextMap(fs, function (err, map) {\n      if (err) return callback(err);\n      var dependencies = Object.keys(map).map(function (key) {\n        return new ContextElementDependency(map[key] + options.resourceQuery + options.resourceFragment, key, options.category, options.referencedExports);\n      });\n      callback(null, dependencies);\n    });\n  };\n\n  return resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ContextReplacementPlugin.js"],"names":["ContextElementDependency","require","join","ContextReplacementPlugin","resourceRegExp","newContentResource","newContentRecursive","newContentRegExp","newContentCallback","newContentCreateContextMap","fs","callback","undefined","compiler","hooks","contextModuleFactory","tap","cmf","beforeResolve","result","test","request","recursive","regExp","dependencies","d","critical","afterResolve","resource","startsWith","length","inputFileSystem","resolveDependencies","createResolveDependenciesFromContextMap","origResource","createContextMap","resolveDependenciesFromContextMap","options","err","map","Object","keys","key","resourceQuery","resourceFragment","category","referencedExports","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\nconst { join } = require(\"./util/fs\");\n\nclass ContextReplacementPlugin {\n\tconstructor(\n\t\tresourceRegExp,\n\t\tnewContentResource,\n\t\tnewContentRecursive,\n\t\tnewContentRegExp\n\t) {\n\t\tthis.resourceRegExp = resourceRegExp;\n\n\t\tif (typeof newContentResource === \"function\") {\n\t\t\tthis.newContentCallback = newContentResource;\n\t\t} else if (\n\t\t\ttypeof newContentResource === \"string\" &&\n\t\t\ttypeof newContentRecursive === \"object\"\n\t\t) {\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentCreateContextMap = (fs, callback) => {\n\t\t\t\tcallback(null, newContentRecursive);\n\t\t\t};\n\t\t} else if (\n\t\t\ttypeof newContentResource === \"string\" &&\n\t\t\ttypeof newContentRecursive === \"function\"\n\t\t) {\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentCreateContextMap = newContentRecursive;\n\t\t} else {\n\t\t\tif (typeof newContentResource !== \"string\") {\n\t\t\t\tnewContentRegExp = newContentRecursive;\n\t\t\t\tnewContentRecursive = newContentResource;\n\t\t\t\tnewContentResource = undefined;\n\t\t\t}\n\t\t\tif (typeof newContentRecursive !== \"boolean\") {\n\t\t\t\tnewContentRegExp = newContentRecursive;\n\t\t\t\tnewContentRecursive = undefined;\n\t\t\t}\n\t\t\tthis.newContentResource = newContentResource;\n\t\t\tthis.newContentRecursive = newContentRecursive;\n\t\t\tthis.newContentRegExp = newContentRegExp;\n\t\t}\n\t}\n\n\tapply(compiler) {\n\t\tconst resourceRegExp = this.resourceRegExp;\n\t\tconst newContentCallback = this.newContentCallback;\n\t\tconst newContentResource = this.newContentResource;\n\t\tconst newContentRecursive = this.newContentRecursive;\n\t\tconst newContentRegExp = this.newContentRegExp;\n\t\tconst newContentCreateContextMap = this.newContentCreateContextMap;\n\n\t\tcompiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", cmf => {\n\t\t\tcmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", result => {\n\t\t\t\tif (!result) return;\n\t\t\t\tif (resourceRegExp.test(result.request)) {\n\t\t\t\t\tif (newContentResource !== undefined) {\n\t\t\t\t\t\tresult.request = newContentResource;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRecursive !== undefined) {\n\t\t\t\t\t\tresult.recursive = newContentRecursive;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRegExp !== undefined) {\n\t\t\t\t\t\tresult.regExp = newContentRegExp;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCallback === \"function\") {\n\t\t\t\t\t\tnewContentCallback(result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const d of result.dependencies) {\n\t\t\t\t\t\t\tif (d.critical) d.critical = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tcmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", result => {\n\t\t\t\tif (!result) return;\n\t\t\t\tif (resourceRegExp.test(result.resource)) {\n\t\t\t\t\tif (newContentResource !== undefined) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnewContentResource.startsWith(\"/\") ||\n\t\t\t\t\t\t\t(newContentResource.length > 1 && newContentResource[1] === \":\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tresult.resource = newContentResource;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.resource = join(\n\t\t\t\t\t\t\t\tcompiler.inputFileSystem,\n\t\t\t\t\t\t\t\tresult.resource,\n\t\t\t\t\t\t\t\tnewContentResource\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRecursive !== undefined) {\n\t\t\t\t\t\tresult.recursive = newContentRecursive;\n\t\t\t\t\t}\n\t\t\t\t\tif (newContentRegExp !== undefined) {\n\t\t\t\t\t\tresult.regExp = newContentRegExp;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCreateContextMap === \"function\") {\n\t\t\t\t\t\tresult.resolveDependencies =\n\t\t\t\t\t\t\tcreateResolveDependenciesFromContextMap(\n\t\t\t\t\t\t\t\tnewContentCreateContextMap\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof newContentCallback === \"function\") {\n\t\t\t\t\t\tconst origResource = result.resource;\n\t\t\t\t\t\tnewContentCallback(result);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tresult.resource !== origResource &&\n\t\t\t\t\t\t\t!result.resource.startsWith(\"/\") &&\n\t\t\t\t\t\t\t(result.resource.length <= 1 || result.resource[1] !== \":\")\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// When the function changed it to an relative path\n\t\t\t\t\t\t\tresult.resource = join(\n\t\t\t\t\t\t\t\tcompiler.inputFileSystem,\n\t\t\t\t\t\t\t\torigResource,\n\t\t\t\t\t\t\t\tresult.resource\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const d of result.dependencies) {\n\t\t\t\t\t\t\tif (d.critical) d.critical = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t});\n\t}\n}\n\nconst createResolveDependenciesFromContextMap = createContextMap => {\n\tconst resolveDependenciesFromContextMap = (fs, options, callback) => {\n\t\tcreateContextMap(fs, (err, map) => {\n\t\t\tif (err) return callback(err);\n\t\t\tconst dependencies = Object.keys(map).map(key => {\n\t\t\t\treturn new ContextElementDependency(\n\t\t\t\t\tmap[key] + options.resourceQuery + options.resourceFragment,\n\t\t\t\t\tkey,\n\t\t\t\t\toptions.category,\n\t\t\t\t\toptions.referencedExports\n\t\t\t\t);\n\t\t\t});\n\t\t\tcallback(null, dependencies);\n\t\t});\n\t};\n\treturn resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;\n"]},"metadata":{},"sourceType":"script"}