{"ast":null,"code":"var _jsxFileName = \"/home/john/react-stuff/src/components/InputParams.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/app.css';\nimport 'katex/dist/katex.min.css';\nimport React, { useState } from 'react';\nimport { InlineMath } from 'react-katex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst divTableCell = {\n  display: 'table-cell',\n  fontSize: 12\n};\nconst labelSize = {\n  fontSize: 15\n};\nconst domainInputform = {\n  fontSize: 12,\n  padding: 1,\n  width: 30,\n  marginLeft: 30\n};\nconst domainInputformR = {\n  fontSize: 12,\n  padding: 1,\n  width: 30,\n  marginLeft: 4\n};\n\nfunction InputParameters() {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const [dispersaType, setDispersal] = useState('gaussian');\n  const [dispersalScale, setDispersalScale] = useState(100);\n  const [domainX, setDomainX] = useState(500);\n  const [domainY, setDomainY] = useState(500);\n  const [hostNumber, setHostNumber] = useState(1000);\n  const [secondaryR0, setSecondaryR0] = useState(2.0);\n  const [infectiousLT, setInfectiousLT] = useState(100);\n  const [simulationRT, setSimulationRT] = useState(1000);\n  const [initiallyInfected, setInitiallyInfected] = useState(20);\n  const [initiallyInfectedDist, setInitiallyInfectedDist] = useState(\"Central\");\n  const susceptibleHosts = 'S';\n  const infectedHosts = 'I';\n  const timesLabel = '\\\\times';\n  const timeT0Label = 't=0';\n  const secondaryR0Label = 'R\\_{0}';\n\n  let handleSubmitResp = async e => {\n    e.preventDefault();\n\n    try {\n      let res = await fetch(\"http://localhost:5000\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"dispersal_type\": dispersaType,\n          \"domain_size\": [domainX, domainY],\n          \"host_number\": hostNumber,\n          \"secondary_R0\": secondaryR0,\n          \"infectious_lifetime\": infectiousLT,\n          \"simulation_runtime\": simulationRT,\n          \"initially_infected_hosts\": initiallyInfected,\n          \"initially_infected_dist\": initiallyInfectedDist\n        })\n      });\n      console.log(res);\n\n      if (res.status === 200) {\n        setMessage(\"successfull\");\n        console.log('successfull post');\n      } else {\n        setMessage(\"error\");\n        console.log('failed failed');\n      }\n    } catch (err) {\n      console.log(err);\n      alert(`${message}, dispersal type is ${dispersaType}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputParamPanel\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitResp,\n      style: {\n        width: 185\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\"  \", /*#__PURE__*/_jsxDEV(InlineMath, {\n          math: susceptibleHosts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 38\n        }, this), \" Hosts: \", hostNumber, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: hostNumber,\n        onChange: e => setHostNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" \", /*#__PURE__*/_jsxDEV(InlineMath, {\n          math: infectedHosts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 37\n        }, this), \" Hosts: \", initiallyInfected, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"100\",\n        value: initiallyInfected,\n        onChange: e => setInitiallyInfected(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Secondary \", /*#__PURE__*/_jsxDEV(InlineMath, {\n          math: secondaryR0Label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 47\n        }, this), \": \", secondaryR0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"10\",\n        step: \"0.1\",\n        value: secondaryR0,\n        onChange: e => setSecondaryR0(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: \" Dispersal Kernel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dispersaType,\n        onChange: e => setDispersal(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gaussian\",\n          children: \"Gaussian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"exponential\",\n          children: \"Exponential\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"inverse_power_Law\",\n          children: \"Inverse power law\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Dispersal length: \", dispersalScale, \"(m) \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: dispersalScale,\n        onChange: e => setDispersalScale(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Domain width: \", domainX, \"(m) : \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: domainX,\n        onChange: e => setDomainX(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Domain height: \", domainY, \"(m) : \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: domainY,\n        onChange: e => setDomainY(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: \" Infected Distribution \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: initiallyInfectedDist,\n        onChange: e => setInitiallyInfectedDist(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Central\",\n          children: \" Centralised\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Random\",\n          children: \" Random \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Infectious period: \", infectiousLT, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"500\",\n        value: infectiousLT,\n        onChange: e => setInfectiousLT(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Time Steps (days): \", simulationRT, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: simulationRT,\n        onChange: e => setSimulationRT(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Simulate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputParameters, \"BElEF80GAbYkQhaPbapVTk8FVPc=\");\n\n_c = InputParameters;\nexport default InputParameters;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputParameters\");","map":{"version":3,"sources":["/home/john/react-stuff/src/components/InputParams.js"],"names":["React","useState","InlineMath","divTableCell","display","fontSize","labelSize","domainInputform","padding","width","marginLeft","domainInputformR","InputParameters","message","setMessage","dispersaType","setDispersal","dispersalScale","setDispersalScale","domainX","setDomainX","domainY","setDomainY","hostNumber","setHostNumber","secondaryR0","setSecondaryR0","infectiousLT","setInfectiousLT","simulationRT","setSimulationRT","initiallyInfected","setInitiallyInfected","initiallyInfectedDist","setInitiallyInfectedDist","susceptibleHosts","infectedHosts","timesLabel","timeT0Label","secondaryR0Label","handleSubmitResp","e","preventDefault","res","fetch","method","body","JSON","stringify","console","log","status","err","alert","target","value"],"mappings":"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","sourcesContent":["import '../styles/app.css';\nimport 'katex/dist/katex.min.css';\nimport React, { useState } from 'react';\nimport { InlineMath } from 'react-katex';\n\nconst divTableCell = {\n  display: 'table-cell',\n  fontSize: 12, \n};\n\nconst labelSize = {\n  fontSize: 15\n}\nconst domainInputform = {\n  fontSize: 12, \n  padding: 1, \n  width: 30 ,\n  marginLeft: 30}\n\n  const domainInputformR = {\n    fontSize: 12, \n    padding: 1, \n    width: 30,\n    marginLeft: 4 }\n\nfunction InputParameters() {\n\n  const [message, setMessage] = useState(\"\");\n  const [dispersaType, setDispersal] = useState('gaussian');\n  const [dispersalScale, setDispersalScale] = useState(100);\n  const [domainX, setDomainX] = useState(500);\n  const [domainY, setDomainY] = useState(500);\n  const [hostNumber, setHostNumber] = useState(1000);\n  const [secondaryR0, setSecondaryR0] = useState(2.0);\n  const [infectiousLT, setInfectiousLT] = useState(100);\n  const [simulationRT, setSimulationRT] = useState(1000);\n  const [initiallyInfected, setInitiallyInfected] = useState(20);\n  const [initiallyInfectedDist, setInitiallyInfectedDist] = useState(\"Central\");\n\n  const susceptibleHosts = 'S';\n  const infectedHosts = 'I';\n  const timesLabel = '\\\\times';\n  const timeT0Label = 't=0';\n  const secondaryR0Label = 'R\\_{0}';\n  \n  \n let handleSubmitResp = async (e) => {\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost:5000\", \n      { \n        method: \"POST\",\n        body: JSON.stringify({\"dispersal_type\": dispersaType,\n                              \"domain_size\": [domainX, domainY],\n                              \"host_number\": hostNumber,\n                              \"secondary_R0\": secondaryR0,\n                              \"infectious_lifetime\": infectiousLT,\n                              \"simulation_runtime\": simulationRT,\n                              \"initially_infected_hosts\": initiallyInfected,\n                              \"initially_infected_dist\": initiallyInfectedDist})\n      });\n      console.log(res)\n      if (res.status === 200) {\n        setMessage(\"successfull\");\n        console.log('successfull post')\n      } else {\n        setMessage(\"error\");\n        console.log('failed failed')\n      }\n    } catch (err) {\n      console.log(err);\n      alert(`${message}, dispersal type is ${dispersaType}`)\n    }\n  };\n\n  return (\n      <div className='inputParamPanel'>\n        <form onSubmit={handleSubmitResp} style={{width: 185}}>\n          <label style={labelSize}>  <InlineMath math={susceptibleHosts}/> Hosts: {hostNumber} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={hostNumber}  onChange={e => setHostNumber(e.target.value)}/>   \n          \n          <br></br>\n          <label style={labelSize}> <InlineMath math={infectedHosts}/> Hosts: {initiallyInfected} </label>\n          <input type=\"range\" min=\"1\" max=\"100\" value={initiallyInfected}  onChange={e => setInitiallyInfected(e.target.value)}/> \n          <br></br>\n          <label style={labelSize}> Secondary <InlineMath math={secondaryR0Label}/>: {secondaryR0} </label>\n          <input type=\"range\" min=\"0\" max=\"10\" step=\"0.1\" value={secondaryR0}  onChange={e => setSecondaryR0(e.target.value)}/> \n          <br></br>\n          <label style={labelSize} > Dispersal Kernel</label> \n          <select value={dispersaType} onChange={e => setDispersal(e.target.value)}> \n            <option value=\"gaussian\">Gaussian</option>  \n            <option value=\"exponential\">Exponential</option>\n            <option value=\"inverse_power_Law\">Inverse power law</option>\n          </select>\n          <br></br>\n          <label style={labelSize}> Dispersal length: {dispersalScale}(m) </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={dispersalScale}  onChange={e => setDispersalScale(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Domain width: {domainX}(m) : </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={domainX}  onChange={e => setDomainX(e.target.value)}/>   \n          <label style={labelSize}> Domain height: {domainY}(m) : </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={domainY}  onChange={e => setDomainY(e.target.value)}/>   \n          \n          <label style={labelSize} > Infected Distribution </label> \n          <select value={initiallyInfectedDist} onChange={e => setInitiallyInfectedDist(e.target.value)}> \n            <option value=\"Central\"> Centralised</option>\n            <option value=\"Random\"> Random </option>  \n          </select>\n\n          <p></p>\n      \n          \n          <br></br>\n          <label style={labelSize}> Infectious period: {infectiousLT} </label>\n          <input type=\"range\" min=\"1\" max=\"500\" value={infectiousLT}  onChange={e => setInfectiousLT(e.target.value)}/>  \n          <br></br>\n          \n          <p></p>\n          <label style={labelSize}> Time Steps (days): {simulationRT} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={simulationRT}  onChange={e => setSimulationRT(e.target.value)}/>\n          <p></p>\n          <input type=\"submit\" value=\"Simulate\" />\n        </form>\n      </div>\n  );\n}\n\nexport default InputParameters;\n"]},"metadata":{},"sourceType":"module"}