{"ast":null,"code":"var _jsxFileName = \"/home/john/react-stuff/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useRef } from 'react';\nimport myVideo from './media/file_example_MP4_480_1_5MG.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const isSimGenerated = () => {\n    try {\n      require('./media/Thinking-of-getting-a-cat.png');\n\n      console.log('succces');\n      return;\n    } catch (err) {\n      console.log('fail');\n      return null;\n    }\n  };\n\n  if (isSimGenerated == null) {\n    console.log('Sim not generate');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cube\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \" Image not here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          ref: buttonRef,\n          onClick: () => onButtonClick(),\n          children: [\" \", buttonText, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  } else {\n    const vidRef = useRef(null);\n    const buttonRef = useRef(null);\n    const [buttonText, setButtonText] = useState('>');\n\n    const onButtonClick = () => {\n      if (vidRef.current.paused) {\n        vidRef.current.play();\n        setButtonText('||');\n      } else {\n        vidRef.current.pause();\n        setButtonText('>');\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cube\",\n            children: /*#__PURE__*/_jsxDEV(\"video\", {\n              ref: vidRef,\n              src: myVideo,\n              type: \"video/mp4\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          ref: buttonRef,\n          onClick: () => onButtonClick(),\n          children: [\" \", buttonText, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"mdz/ab2YfasBvOPePg2EgSIEMno=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/john/react-stuff/src/App.js"],"names":["React","useState","useRef","myVideo","App","isSimGenerated","require","console","log","err","buttonRef","onButtonClick","buttonText","vidRef","setButtonText","current","paused","play","pause"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,OAAOC,OAAP,MAAoB,wCAApB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAI;AACFC,MAAAA,OAAO,CAAC,uCAAD,CAAP;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACA,KAJD,CAIE,OAAOC,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,aAAO,IAAP;AACA;AACF,GATD;;AAWA,MAAMH,cAAc,IAAI,IAAxB,EAA8B;AAC5BE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,mCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADA,eAOA;AAAQ,UAAA,GAAG,EAAEE,SAAb;AAAwB,UAAA,OAAO,EAAE,MAAMC,aAAa,EAApD;AAAA,0BAA0DC,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD,GAfD,MAiBK;AACH,UAAMC,MAAM,GAAGX,MAAM,CAAC,IAAD,CAArB;AACA,UAAMQ,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;AAEA,UAAM,CAACU,UAAD,EAAaE,aAAb,IAA8Bb,QAAQ,CAAC,GAAD,CAA5C;;AAEA,UAAMU,aAAa,GAAG,MAAM;AAC1B,UAAIE,MAAM,CAACE,OAAP,CAAeC,MAAnB,EAA2B;AACzBH,QAAAA,MAAM,CAACE,OAAP,CAAeE,IAAf;AACAH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAHD,MAIK;AACHD,QAAAA,MAAM,CAACE,OAAP,CAAeG,KAAf;AACAJ,QAAAA,aAAa,CAAC,GAAD,CAAb;AACD;AACF,KATD;;AAYA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,mCACE;AAAO,cAAA,GAAG,EAAED,MAAZ;AAAoB,cAAA,GAAG,EAAEV,OAAzB;AAAkC,cAAA,IAAI,EAAC,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADA,eAOA;AAAQ,UAAA,GAAG,EAAEO,SAAb;AAAwB,UAAA,OAAO,EAAE,MAAMC,aAAa,EAApD;AAAA,0BAA0DC,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaH;AAAC;;GA7DOR,G;;KAAAA,G;AA+DT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, { useState, useRef} from 'react';\nimport myVideo from './media/file_example_MP4_480_1_5MG.mp4';\n\n\nfunction App() {\n  \n  const isSimGenerated = () => {\n    try {\n      require('./media/Thinking-of-getting-a-cat.png')\n      console.log('succces')\n     return ;\n    } catch (err) {\n      console.log('fail')\n     return null;\n    }\n  };\n  \n  if  ( isSimGenerated == null) {\n    console.log('Sim not generate')\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className='container'> \n          <div className='cube'> \n            <p> Image not here</p> \n          </div>\n        </div>\n  \n        <button ref={buttonRef} onClick={() => onButtonClick()}> {buttonText} </button>\n        </header>\n      </div>\n    );\n  }\n  \n  else {\n    const vidRef = useRef(null);\n    const buttonRef = useRef(null)\n\n    const [buttonText, setButtonText] = useState('>')\n    \n    const onButtonClick = () => {\n      if (vidRef.current.paused) {\n        vidRef.current.play()\n        setButtonText('||')\n      }\n      else {\n        vidRef.current.pause()\n        setButtonText('>')\n      }\n    }\n\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <div className='container'> \n          <div className='cube'> \n            <video ref={vidRef} src={myVideo} type=\"video/mp4\"> </video> \n          </div>\n        </div>\n\n        <button ref={buttonRef} onClick={() => onButtonClick()}> {buttonText} </button>\n        </header>\n      </div>\n    );\n}}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}