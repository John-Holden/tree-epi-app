{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\n\nvar ContainerEntryDependency = require(\"./ContainerEntryDependency\");\n\nvar ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\n\nvar ContainerExposedDependency = require(\"./ContainerExposedDependency\");\n\nvar _require = require(\"./options\"),\n    parseOptions = _require.parseOptions;\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar validate = createSchemaValidation(require(\"../../schemas/plugins/container/ContainerPlugin.check.js\"), function () {\n  return require(\"../../schemas/plugins/container/ContainerPlugin.json\");\n}, {\n  name: \"Container Plugin\",\n  baseDataPath: \"options\"\n});\nvar PLUGIN_NAME = \"ContainerPlugin\";\n\nvar ContainerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ContainerPluginOptions} options options\n   */\n  function ContainerPlugin(options) {\n    _classCallCheck(this, ContainerPlugin);\n\n    validate(options);\n    this._options = {\n      name: options.name,\n      shareScope: options.shareScope || \"default\",\n      library: options.library || {\n        type: \"var\",\n        name: options.name\n      },\n      runtime: options.runtime,\n      filename: options.filename || undefined,\n      exposes: parseOptions(options.exposes, function (item) {\n        return {\n          import: Array.isArray(item) ? item : [item],\n          name: undefined\n        };\n      }, function (item) {\n        return {\n          import: Array.isArray(item.import) ? item.import : [item.import],\n          name: item.name || undefined\n        };\n      })\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(ContainerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this$_options = this._options,\n          name = _this$_options.name,\n          exposes = _this$_options.exposes,\n          shareScope = _this$_options.shareScope,\n          filename = _this$_options.filename,\n          library = _this$_options.library,\n          runtime = _this$_options.runtime;\n      compiler.options.output.enabledLibraryTypes.push(library.type);\n      compiler.hooks.make.tapAsync(PLUGIN_NAME, function (compilation, callback) {\n        var dep = new ContainerEntryDependency(name, exposes, shareScope);\n        dep.loc = {\n          name: name\n        };\n        compilation.addEntry(compilation.options.context, dep, {\n          name: name,\n          filename: filename,\n          runtime: runtime,\n          library: library\n        }, function (error) {\n          if (error) return callback(error);\n          callback();\n        });\n      });\n      compiler.hooks.thisCompilation.tap(PLUGIN_NAME, function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ContainerEntryDependency, new ContainerEntryModuleFactory());\n        compilation.dependencyFactories.set(ContainerExposedDependency, normalModuleFactory);\n      });\n    }\n  }]);\n\n  return ContainerPlugin;\n}();\n\nmodule.exports = ContainerPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/container/ContainerPlugin.js"],"names":["createSchemaValidation","require","ContainerEntryDependency","ContainerEntryModuleFactory","ContainerExposedDependency","parseOptions","validate","name","baseDataPath","PLUGIN_NAME","ContainerPlugin","options","_options","shareScope","library","type","runtime","filename","undefined","exposes","item","import","Array","isArray","compiler","output","enabledLibraryTypes","push","hooks","make","tapAsync","compilation","callback","dep","loc","addEntry","context","error","thisCompilation","tap","normalModuleFactory","dependencyFactories","set","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\n*/\n\n\"use strict\";\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\nconst { parseOptions } = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/container/ContainerPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/container/ContainerPlugin.json\"),\n\t{\n\t\tname: \"Container Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nconst PLUGIN_NAME = \"ContainerPlugin\";\n\nclass ContainerPlugin {\n\t/**\n\t * @param {ContainerPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\n\t\tthis._options = {\n\t\t\tname: options.name,\n\t\t\tshareScope: options.shareScope || \"default\",\n\t\t\tlibrary: options.library || {\n\t\t\t\ttype: \"var\",\n\t\t\t\tname: options.name\n\t\t\t},\n\t\t\truntime: options.runtime,\n\t\t\tfilename: options.filename || undefined,\n\t\t\texposes: parseOptions(\n\t\t\t\toptions.exposes,\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item) ? item : [item],\n\t\t\t\t\tname: undefined\n\t\t\t\t}),\n\t\t\t\titem => ({\n\t\t\t\t\timport: Array.isArray(item.import) ? item.import : [item.import],\n\t\t\t\t\tname: item.name || undefined\n\t\t\t\t})\n\t\t\t)\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { name, exposes, shareScope, filename, library, runtime } =\n\t\t\tthis._options;\n\n\t\tcompiler.options.output.enabledLibraryTypes.push(library.type);\n\n\t\tcompiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n\t\t\tconst dep = new ContainerEntryDependency(name, exposes, shareScope);\n\t\t\tdep.loc = { name };\n\t\t\tcompilation.addEntry(\n\t\t\t\tcompilation.options.context,\n\t\t\t\tdep,\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tfilename,\n\t\t\t\t\truntime,\n\t\t\t\t\tlibrary\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tif (error) return callback(error);\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\tPLUGIN_NAME,\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerEntryDependency,\n\t\t\t\t\tnew ContainerEntryModuleFactory()\n\t\t\t\t);\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tContainerExposedDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ContainerPlugin;\n"]},"metadata":{},"sourceType":"script"}