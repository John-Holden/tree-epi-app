{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\n\nvar fs = require(\"graceful-fs\");\n\nvar createConsoleLogger = require(\"../logging/createConsoleLogger\");\n\nvar NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\n\nvar nodeConsole = require(\"./nodeConsole\");\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar NodeEnvironmentPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options options\n   * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\n   */\n  function NodeEnvironmentPlugin(options) {\n    _classCallCheck(this, NodeEnvironmentPlugin);\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(NodeEnvironmentPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var infrastructureLogging = this.options.infrastructureLogging;\n      compiler.infrastructureLogger = createConsoleLogger({\n        level: infrastructureLogging.level || \"info\",\n        debug: infrastructureLogging.debug || false,\n        console: infrastructureLogging.console || nodeConsole({\n          colors: infrastructureLogging.colors,\n          appendOnly: infrastructureLogging.appendOnly,\n          stream: infrastructureLogging.stream\n        })\n      });\n      compiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\n      var inputFileSystem = compiler.inputFileSystem;\n      compiler.outputFileSystem = fs;\n      compiler.intermediateFileSystem = fs;\n      compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\n      compiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", function (compiler) {\n        if (compiler.inputFileSystem === inputFileSystem) {\n          compiler.fsStartTime = Date.now();\n          inputFileSystem.purge();\n        }\n      });\n    }\n  }]);\n\n  return NodeEnvironmentPlugin;\n}();\n\nmodule.exports = NodeEnvironmentPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/node/NodeEnvironmentPlugin.js"],"names":["CachedInputFileSystem","require","fs","createConsoleLogger","NodeWatchFileSystem","nodeConsole","NodeEnvironmentPlugin","options","compiler","infrastructureLogging","infrastructureLogger","level","debug","console","colors","appendOnly","stream","inputFileSystem","outputFileSystem","intermediateFileSystem","watchFileSystem","hooks","beforeRun","tap","fsStartTime","Date","now","purge","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,CAAC,4CAAD,CAArC;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAD,CAAnC;;AACA,IAAMG,mBAAmB,GAAGH,OAAO,CAAC,uBAAD,CAAnC;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAA3B;AAEA;;AACA;;;IAEMK,qB;AACL;AACD;AACA;AACA;AACC,iCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AACf,UAAQC,qBAAR,GAAkC,KAAKF,OAAvC,CAAQE,qBAAR;AACAD,MAAAA,QAAQ,CAACE,oBAAT,GAAgCP,mBAAmB,CAAC;AACnDQ,QAAAA,KAAK,EAAEF,qBAAqB,CAACE,KAAtB,IAA+B,MADa;AAEnDC,QAAAA,KAAK,EAAEH,qBAAqB,CAACG,KAAtB,IAA+B,KAFa;AAGnDC,QAAAA,OAAO,EACNJ,qBAAqB,CAACI,OAAtB,IACAR,WAAW,CAAC;AACXS,UAAAA,MAAM,EAAEL,qBAAqB,CAACK,MADnB;AAEXC,UAAAA,UAAU,EAAEN,qBAAqB,CAACM,UAFvB;AAGXC,UAAAA,MAAM,EAAEP,qBAAqB,CAACO;AAHnB,SAAD;AALuC,OAAD,CAAnD;AAWAR,MAAAA,QAAQ,CAACS,eAAT,GAA2B,IAAIjB,qBAAJ,CAA0BE,EAA1B,EAA8B,KAA9B,CAA3B;AACA,UAAMe,eAAe,GAAGT,QAAQ,CAACS,eAAjC;AACAT,MAAAA,QAAQ,CAACU,gBAAT,GAA4BhB,EAA5B;AACAM,MAAAA,QAAQ,CAACW,sBAAT,GAAkCjB,EAAlC;AACAM,MAAAA,QAAQ,CAACY,eAAT,GAA2B,IAAIhB,mBAAJ,CAC1BI,QAAQ,CAACS,eADiB,CAA3B;AAGAT,MAAAA,QAAQ,CAACa,KAAT,CAAeC,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B,EAAsD,UAAAf,QAAQ,EAAI;AACjE,YAAIA,QAAQ,CAACS,eAAT,KAA6BA,eAAjC,EAAkD;AACjDT,UAAAA,QAAQ,CAACgB,WAAT,GAAuBC,IAAI,CAACC,GAAL,EAAvB;AACAT,UAAAA,eAAe,CAACU,KAAhB;AACA;AACD,OALD;AAMA;;;;;;AAGFC,MAAM,CAACC,OAAP,GAAiBvB,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\nconst fs = require(\"graceful-fs\");\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\nconst nodeConsole = require(\"./nodeConsole\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass NodeEnvironmentPlugin {\n\t/**\n\t * @param {Object} options options\n\t * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\n\t */\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { infrastructureLogging } = this.options;\n\t\tcompiler.infrastructureLogger = createConsoleLogger({\n\t\t\tlevel: infrastructureLogging.level || \"info\",\n\t\t\tdebug: infrastructureLogging.debug || false,\n\t\t\tconsole:\n\t\t\t\tinfrastructureLogging.console ||\n\t\t\t\tnodeConsole({\n\t\t\t\t\tcolors: infrastructureLogging.colors,\n\t\t\t\t\tappendOnly: infrastructureLogging.appendOnly,\n\t\t\t\t\tstream: infrastructureLogging.stream\n\t\t\t\t})\n\t\t});\n\t\tcompiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\n\t\tconst inputFileSystem = compiler.inputFileSystem;\n\t\tcompiler.outputFileSystem = fs;\n\t\tcompiler.intermediateFileSystem = fs;\n\t\tcompiler.watchFileSystem = new NodeWatchFileSystem(\n\t\t\tcompiler.inputFileSystem\n\t\t);\n\t\tcompiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\n\t\t\tif (compiler.inputFileSystem === inputFileSystem) {\n\t\t\t\tcompiler.fsStartTime = Date.now();\n\t\t\t\tinputFileSystem.purge();\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = NodeEnvironmentPlugin;\n"]},"metadata":{},"sourceType":"script"}