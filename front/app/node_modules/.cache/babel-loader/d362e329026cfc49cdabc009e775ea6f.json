{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n\n/** @typedef {import(\"./JavascriptParser\").VariableInfoInterface} VariableInfoInterface */\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar TypeUnknown = 0;\nvar TypeUndefined = 1;\nvar TypeNull = 2;\nvar TypeString = 3;\nvar TypeNumber = 4;\nvar TypeBoolean = 5;\nvar TypeRegExp = 6;\nvar TypeConditional = 7;\nvar TypeArray = 8;\nvar TypeConstArray = 9;\nvar TypeIdentifier = 10;\nvar TypeWrapped = 11;\nvar TypeTemplateString = 12;\nvar TypeBigInt = 13;\n\nvar BasicEvaluatedExpression = /*#__PURE__*/function () {\n  function BasicEvaluatedExpression() {\n    _classCallCheck(this, BasicEvaluatedExpression);\n\n    this.type = TypeUnknown;\n    /** @type {[number, number]} */\n\n    this.range = undefined;\n    /** @type {boolean} */\n\n    this.falsy = false;\n    /** @type {boolean} */\n\n    this.truthy = false;\n    /** @type {boolean | undefined} */\n\n    this.nullish = undefined;\n    /** @type {boolean} */\n\n    this.sideEffects = true;\n    /** @type {boolean | undefined} */\n\n    this.bool = undefined;\n    /** @type {number | undefined} */\n\n    this.number = undefined;\n    /** @type {bigint | undefined} */\n\n    this.bigint = undefined;\n    /** @type {RegExp | undefined} */\n\n    this.regExp = undefined;\n    /** @type {string | undefined} */\n\n    this.string = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.quasis = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.parts = undefined;\n    /** @type {any[] | undefined} */\n\n    this.array = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.items = undefined;\n    /** @type {BasicEvaluatedExpression[] | undefined} */\n\n    this.options = undefined;\n    /** @type {BasicEvaluatedExpression | undefined} */\n\n    this.prefix = undefined;\n    /** @type {BasicEvaluatedExpression | undefined} */\n\n    this.postfix = undefined;\n    this.wrappedInnerExpressions = undefined;\n    /** @type {string | undefined} */\n\n    this.identifier = undefined;\n    /** @type {VariableInfoInterface} */\n\n    this.rootInfo = undefined;\n    /** @type {() => string[]} */\n\n    this.getMembers = undefined;\n    /** @type {EsTreeNode} */\n\n    this.expression = undefined;\n  }\n\n  _createClass(BasicEvaluatedExpression, [{\n    key: \"isUnknown\",\n    value: function isUnknown() {\n      return this.type === TypeUnknown;\n    }\n  }, {\n    key: \"isNull\",\n    value: function isNull() {\n      return this.type === TypeNull;\n    }\n  }, {\n    key: \"isUndefined\",\n    value: function isUndefined() {\n      return this.type === TypeUndefined;\n    }\n  }, {\n    key: \"isString\",\n    value: function isString() {\n      return this.type === TypeString;\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber() {\n      return this.type === TypeNumber;\n    }\n  }, {\n    key: \"isBigInt\",\n    value: function isBigInt() {\n      return this.type === TypeBigInt;\n    }\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return this.type === TypeBoolean;\n    }\n  }, {\n    key: \"isRegExp\",\n    value: function isRegExp() {\n      return this.type === TypeRegExp;\n    }\n  }, {\n    key: \"isConditional\",\n    value: function isConditional() {\n      return this.type === TypeConditional;\n    }\n  }, {\n    key: \"isArray\",\n    value: function isArray() {\n      return this.type === TypeArray;\n    }\n  }, {\n    key: \"isConstArray\",\n    value: function isConstArray() {\n      return this.type === TypeConstArray;\n    }\n  }, {\n    key: \"isIdentifier\",\n    value: function isIdentifier() {\n      return this.type === TypeIdentifier;\n    }\n  }, {\n    key: \"isWrapped\",\n    value: function isWrapped() {\n      return this.type === TypeWrapped;\n    }\n  }, {\n    key: \"isTemplateString\",\n    value: function isTemplateString() {\n      return this.type === TypeTemplateString;\n    }\n    /**\n     * Is expression a primitive or an object type value?\n     * @returns {boolean | undefined} true: primitive type, false: object type, undefined: unknown/runtime-defined\n     */\n\n  }, {\n    key: \"isPrimitiveType\",\n    value: function isPrimitiveType() {\n      switch (this.type) {\n        case TypeUndefined:\n        case TypeNull:\n        case TypeString:\n        case TypeNumber:\n        case TypeBoolean:\n        case TypeBigInt:\n        case TypeWrapped:\n        case TypeTemplateString:\n          return true;\n\n        case TypeRegExp:\n        case TypeArray:\n        case TypeConstArray:\n          return false;\n\n        default:\n          return undefined;\n      }\n    }\n    /**\n     * Is expression a runtime or compile-time value?\n     * @returns {boolean} true: compile time value, false: runtime value\n     */\n\n  }, {\n    key: \"isCompileTimeValue\",\n    value: function isCompileTimeValue() {\n      switch (this.type) {\n        case TypeUndefined:\n        case TypeNull:\n        case TypeString:\n        case TypeNumber:\n        case TypeBoolean:\n        case TypeRegExp:\n        case TypeConstArray:\n        case TypeBigInt:\n          return true;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Gets the compile-time value of the expression\n     * @returns {any} the javascript value\n     */\n\n  }, {\n    key: \"asCompileTimeValue\",\n    value: function asCompileTimeValue() {\n      switch (this.type) {\n        case TypeUndefined:\n          return undefined;\n\n        case TypeNull:\n          return null;\n\n        case TypeString:\n          return this.string;\n\n        case TypeNumber:\n          return this.number;\n\n        case TypeBoolean:\n          return this.bool;\n\n        case TypeRegExp:\n          return this.regExp;\n\n        case TypeConstArray:\n          return this.array;\n\n        case TypeBigInt:\n          return this.bigint;\n\n        default:\n          throw new Error(\"asCompileTimeValue must only be called for compile-time values\");\n      }\n    }\n  }, {\n    key: \"isTruthy\",\n    value: function isTruthy() {\n      return this.truthy;\n    }\n  }, {\n    key: \"isFalsy\",\n    value: function isFalsy() {\n      return this.falsy;\n    }\n  }, {\n    key: \"isNullish\",\n    value: function isNullish() {\n      return this.nullish;\n    }\n    /**\n     * Can this expression have side effects?\n     * @returns {boolean} false: never has side effects\n     */\n\n  }, {\n    key: \"couldHaveSideEffects\",\n    value: function couldHaveSideEffects() {\n      return this.sideEffects;\n    }\n  }, {\n    key: \"asBool\",\n    value: function asBool() {\n      if (this.truthy) return true;\n      if (this.falsy || this.nullish) return false;\n      if (this.isBoolean()) return this.bool;\n      if (this.isNull()) return false;\n      if (this.isUndefined()) return false;\n      if (this.isString()) return this.string !== \"\";\n      if (this.isNumber()) return this.number !== 0;\n      if (this.isBigInt()) return this.bigint !== BigInt(0);\n      if (this.isRegExp()) return true;\n      if (this.isArray()) return true;\n      if (this.isConstArray()) return true;\n\n      if (this.isWrapped()) {\n        return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;\n      }\n\n      if (this.isTemplateString()) {\n        var str = this.asString();\n        if (typeof str === \"string\") return str !== \"\";\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"asNullish\",\n    value: function asNullish() {\n      var nullish = this.isNullish();\n      if (nullish === true || this.isNull() || this.isUndefined()) return true;\n      if (nullish === false) return false;\n      if (this.isTruthy()) return false;\n      if (this.isBoolean()) return false;\n      if (this.isString()) return false;\n      if (this.isNumber()) return false;\n      if (this.isBigInt()) return false;\n      if (this.isRegExp()) return false;\n      if (this.isArray()) return false;\n      if (this.isConstArray()) return false;\n      if (this.isTemplateString()) return false;\n      if (this.isRegExp()) return false;\n      return undefined;\n    }\n  }, {\n    key: \"asString\",\n    value: function asString() {\n      if (this.isBoolean()) return \"\".concat(this.bool);\n      if (this.isNull()) return \"null\";\n      if (this.isUndefined()) return \"undefined\";\n      if (this.isString()) return this.string;\n      if (this.isNumber()) return \"\".concat(this.number);\n      if (this.isBigInt()) return \"\".concat(this.bigint);\n      if (this.isRegExp()) return \"\".concat(this.regExp);\n\n      if (this.isArray()) {\n        var array = [];\n\n        var _iterator = _createForOfIteratorHelper(this.items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            var itemStr = item.asString();\n            if (itemStr === undefined) return undefined;\n            array.push(itemStr);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return \"\".concat(array);\n      }\n\n      if (this.isConstArray()) return \"\".concat(this.array);\n\n      if (this.isTemplateString()) {\n        var str = \"\";\n\n        var _iterator2 = _createForOfIteratorHelper(this.parts),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var part = _step2.value;\n            var partStr = part.asString();\n            if (partStr === undefined) return undefined;\n            str += partStr;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return str;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"setString\",\n    value: function setString(string) {\n      this.type = TypeString;\n      this.string = string;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setUndefined\",\n    value: function setUndefined() {\n      this.type = TypeUndefined;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setNull\",\n    value: function setNull() {\n      this.type = TypeNull;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setNumber\",\n    value: function setNumber(number) {\n      this.type = TypeNumber;\n      this.number = number;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setBigInt\",\n    value: function setBigInt(bigint) {\n      this.type = TypeBigInt;\n      this.bigint = bigint;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setBoolean\",\n    value: function setBoolean(bool) {\n      this.type = TypeBoolean;\n      this.bool = bool;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setRegExp\",\n    value: function setRegExp(regExp) {\n      this.type = TypeRegExp;\n      this.regExp = regExp;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setIdentifier\",\n    value: function setIdentifier(identifier, rootInfo, getMembers) {\n      this.type = TypeIdentifier;\n      this.identifier = identifier;\n      this.rootInfo = rootInfo;\n      this.getMembers = getMembers;\n      this.sideEffects = true;\n      return this;\n    }\n  }, {\n    key: \"setWrapped\",\n    value: function setWrapped(prefix, postfix, innerExpressions) {\n      this.type = TypeWrapped;\n      this.prefix = prefix;\n      this.postfix = postfix;\n      this.wrappedInnerExpressions = innerExpressions;\n      this.sideEffects = true;\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.type = TypeConditional;\n      this.options = options;\n      this.sideEffects = true;\n      return this;\n    }\n  }, {\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      if (!this.options) {\n        this.type = TypeConditional;\n        this.options = [];\n        this.sideEffects = true;\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(options),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          this.options.push(item);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(items) {\n      this.type = TypeArray;\n      this.items = items;\n      this.sideEffects = items.some(function (i) {\n        return i.couldHaveSideEffects();\n      });\n      return this;\n    }\n  }, {\n    key: \"setArray\",\n    value: function setArray(array) {\n      this.type = TypeConstArray;\n      this.array = array;\n      this.sideEffects = false;\n      return this;\n    }\n  }, {\n    key: \"setTemplateString\",\n    value: function setTemplateString(quasis, parts, kind) {\n      this.type = TypeTemplateString;\n      this.quasis = quasis;\n      this.parts = parts;\n      this.templateStringKind = kind;\n      this.sideEffects = parts.some(function (p) {\n        return p.sideEffects;\n      });\n      return this;\n    }\n  }, {\n    key: \"setTruthy\",\n    value: function setTruthy() {\n      this.falsy = false;\n      this.truthy = true;\n      this.nullish = false;\n      return this;\n    }\n  }, {\n    key: \"setFalsy\",\n    value: function setFalsy() {\n      this.falsy = true;\n      this.truthy = false;\n      return this;\n    }\n  }, {\n    key: \"setNullish\",\n    value: function setNullish(value) {\n      this.nullish = value;\n      if (value) return this.setFalsy();\n      return this;\n    }\n  }, {\n    key: \"setRange\",\n    value: function setRange(range) {\n      this.range = range;\n      return this;\n    }\n  }, {\n    key: \"setSideEffects\",\n    value: function setSideEffects() {\n      var sideEffects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.sideEffects = sideEffects;\n      return this;\n    }\n  }, {\n    key: \"setExpression\",\n    value: function setExpression(expression) {\n      this.expression = expression;\n      return this;\n    }\n  }]);\n\n  return BasicEvaluatedExpression;\n}();\n/**\n * @param {string} flags regexp flags\n * @returns {boolean} is valid flags\n */\n\n\nBasicEvaluatedExpression.isValidRegExpFlags = function (flags) {\n  var len = flags.length;\n  if (len === 0) return true;\n  if (len > 4) return false; // cspell:word gimy\n\n  var remaining = 0; // bit per RegExp flag: gimy\n\n  for (var i = 0; i < len; i++) {\n    switch (flags.charCodeAt(i)) {\n      case 103\n      /* g */\n      :\n        if (remaining & 8) return false;\n        remaining |= 8;\n        break;\n\n      case 105\n      /* i */\n      :\n        if (remaining & 4) return false;\n        remaining |= 4;\n        break;\n\n      case 109\n      /* m */\n      :\n        if (remaining & 2) return false;\n        remaining |= 2;\n        break;\n\n      case 121\n      /* y */\n      :\n        if (remaining & 1) return false;\n        remaining |= 1;\n        break;\n\n      default:\n        return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = BasicEvaluatedExpression;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/javascript/BasicEvaluatedExpression.js"],"names":["TypeUnknown","TypeUndefined","TypeNull","TypeString","TypeNumber","TypeBoolean","TypeRegExp","TypeConditional","TypeArray","TypeConstArray","TypeIdentifier","TypeWrapped","TypeTemplateString","TypeBigInt","BasicEvaluatedExpression","type","range","undefined","falsy","truthy","nullish","sideEffects","bool","number","bigint","regExp","string","quasis","parts","array","items","options","prefix","postfix","wrappedInnerExpressions","identifier","rootInfo","getMembers","expression","Error","isBoolean","isNull","isUndefined","isString","isNumber","isBigInt","BigInt","isRegExp","isArray","isConstArray","isWrapped","asBool","isTemplateString","str","asString","isNullish","isTruthy","item","itemStr","push","part","partStr","innerExpressions","some","i","couldHaveSideEffects","kind","templateStringKind","p","value","setFalsy","isValidRegExpFlags","flags","len","length","remaining","charCodeAt","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n/** @typedef {import(\"./JavascriptParser\").VariableInfoInterface} VariableInfoInterface */\n\nconst TypeUnknown = 0;\nconst TypeUndefined = 1;\nconst TypeNull = 2;\nconst TypeString = 3;\nconst TypeNumber = 4;\nconst TypeBoolean = 5;\nconst TypeRegExp = 6;\nconst TypeConditional = 7;\nconst TypeArray = 8;\nconst TypeConstArray = 9;\nconst TypeIdentifier = 10;\nconst TypeWrapped = 11;\nconst TypeTemplateString = 12;\nconst TypeBigInt = 13;\n\nclass BasicEvaluatedExpression {\n\tconstructor() {\n\t\tthis.type = TypeUnknown;\n\t\t/** @type {[number, number]} */\n\t\tthis.range = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.falsy = false;\n\t\t/** @type {boolean} */\n\t\tthis.truthy = false;\n\t\t/** @type {boolean | undefined} */\n\t\tthis.nullish = undefined;\n\t\t/** @type {boolean} */\n\t\tthis.sideEffects = true;\n\t\t/** @type {boolean | undefined} */\n\t\tthis.bool = undefined;\n\t\t/** @type {number | undefined} */\n\t\tthis.number = undefined;\n\t\t/** @type {bigint | undefined} */\n\t\tthis.bigint = undefined;\n\t\t/** @type {RegExp | undefined} */\n\t\tthis.regExp = undefined;\n\t\t/** @type {string | undefined} */\n\t\tthis.string = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.quasis = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.parts = undefined;\n\t\t/** @type {any[] | undefined} */\n\t\tthis.array = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.items = undefined;\n\t\t/** @type {BasicEvaluatedExpression[] | undefined} */\n\t\tthis.options = undefined;\n\t\t/** @type {BasicEvaluatedExpression | undefined} */\n\t\tthis.prefix = undefined;\n\t\t/** @type {BasicEvaluatedExpression | undefined} */\n\t\tthis.postfix = undefined;\n\t\tthis.wrappedInnerExpressions = undefined;\n\t\t/** @type {string | undefined} */\n\t\tthis.identifier = undefined;\n\t\t/** @type {VariableInfoInterface} */\n\t\tthis.rootInfo = undefined;\n\t\t/** @type {() => string[]} */\n\t\tthis.getMembers = undefined;\n\t\t/** @type {EsTreeNode} */\n\t\tthis.expression = undefined;\n\t}\n\n\tisUnknown() {\n\t\treturn this.type === TypeUnknown;\n\t}\n\n\tisNull() {\n\t\treturn this.type === TypeNull;\n\t}\n\n\tisUndefined() {\n\t\treturn this.type === TypeUndefined;\n\t}\n\n\tisString() {\n\t\treturn this.type === TypeString;\n\t}\n\n\tisNumber() {\n\t\treturn this.type === TypeNumber;\n\t}\n\n\tisBigInt() {\n\t\treturn this.type === TypeBigInt;\n\t}\n\n\tisBoolean() {\n\t\treturn this.type === TypeBoolean;\n\t}\n\n\tisRegExp() {\n\t\treturn this.type === TypeRegExp;\n\t}\n\n\tisConditional() {\n\t\treturn this.type === TypeConditional;\n\t}\n\n\tisArray() {\n\t\treturn this.type === TypeArray;\n\t}\n\n\tisConstArray() {\n\t\treturn this.type === TypeConstArray;\n\t}\n\n\tisIdentifier() {\n\t\treturn this.type === TypeIdentifier;\n\t}\n\n\tisWrapped() {\n\t\treturn this.type === TypeWrapped;\n\t}\n\n\tisTemplateString() {\n\t\treturn this.type === TypeTemplateString;\n\t}\n\n\t/**\n\t * Is expression a primitive or an object type value?\n\t * @returns {boolean | undefined} true: primitive type, false: object type, undefined: unknown/runtime-defined\n\t */\n\tisPrimitiveType() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\tcase TypeNull:\n\t\t\tcase TypeString:\n\t\t\tcase TypeNumber:\n\t\t\tcase TypeBoolean:\n\t\t\tcase TypeBigInt:\n\t\t\tcase TypeWrapped:\n\t\t\tcase TypeTemplateString:\n\t\t\t\treturn true;\n\t\t\tcase TypeRegExp:\n\t\t\tcase TypeArray:\n\t\t\tcase TypeConstArray:\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Is expression a runtime or compile-time value?\n\t * @returns {boolean} true: compile time value, false: runtime value\n\t */\n\tisCompileTimeValue() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\tcase TypeNull:\n\t\t\tcase TypeString:\n\t\t\tcase TypeNumber:\n\t\t\tcase TypeBoolean:\n\t\t\tcase TypeRegExp:\n\t\t\tcase TypeConstArray:\n\t\t\tcase TypeBigInt:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the compile-time value of the expression\n\t * @returns {any} the javascript value\n\t */\n\tasCompileTimeValue() {\n\t\tswitch (this.type) {\n\t\t\tcase TypeUndefined:\n\t\t\t\treturn undefined;\n\t\t\tcase TypeNull:\n\t\t\t\treturn null;\n\t\t\tcase TypeString:\n\t\t\t\treturn this.string;\n\t\t\tcase TypeNumber:\n\t\t\t\treturn this.number;\n\t\t\tcase TypeBoolean:\n\t\t\t\treturn this.bool;\n\t\t\tcase TypeRegExp:\n\t\t\t\treturn this.regExp;\n\t\t\tcase TypeConstArray:\n\t\t\t\treturn this.array;\n\t\t\tcase TypeBigInt:\n\t\t\t\treturn this.bigint;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"asCompileTimeValue must only be called for compile-time values\"\n\t\t\t\t);\n\t\t}\n\t}\n\n\tisTruthy() {\n\t\treturn this.truthy;\n\t}\n\n\tisFalsy() {\n\t\treturn this.falsy;\n\t}\n\n\tisNullish() {\n\t\treturn this.nullish;\n\t}\n\n\t/**\n\t * Can this expression have side effects?\n\t * @returns {boolean} false: never has side effects\n\t */\n\tcouldHaveSideEffects() {\n\t\treturn this.sideEffects;\n\t}\n\n\tasBool() {\n\t\tif (this.truthy) return true;\n\t\tif (this.falsy || this.nullish) return false;\n\t\tif (this.isBoolean()) return this.bool;\n\t\tif (this.isNull()) return false;\n\t\tif (this.isUndefined()) return false;\n\t\tif (this.isString()) return this.string !== \"\";\n\t\tif (this.isNumber()) return this.number !== 0;\n\t\tif (this.isBigInt()) return this.bigint !== BigInt(0);\n\t\tif (this.isRegExp()) return true;\n\t\tif (this.isArray()) return true;\n\t\tif (this.isConstArray()) return true;\n\t\tif (this.isWrapped()) {\n\t\t\treturn (this.prefix && this.prefix.asBool()) ||\n\t\t\t\t(this.postfix && this.postfix.asBool())\n\t\t\t\t? true\n\t\t\t\t: undefined;\n\t\t}\n\t\tif (this.isTemplateString()) {\n\t\t\tconst str = this.asString();\n\t\t\tif (typeof str === \"string\") return str !== \"\";\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasNullish() {\n\t\tconst nullish = this.isNullish();\n\n\t\tif (nullish === true || this.isNull() || this.isUndefined()) return true;\n\n\t\tif (nullish === false) return false;\n\t\tif (this.isTruthy()) return false;\n\t\tif (this.isBoolean()) return false;\n\t\tif (this.isString()) return false;\n\t\tif (this.isNumber()) return false;\n\t\tif (this.isBigInt()) return false;\n\t\tif (this.isRegExp()) return false;\n\t\tif (this.isArray()) return false;\n\t\tif (this.isConstArray()) return false;\n\t\tif (this.isTemplateString()) return false;\n\t\tif (this.isRegExp()) return false;\n\n\t\treturn undefined;\n\t}\n\n\tasString() {\n\t\tif (this.isBoolean()) return `${this.bool}`;\n\t\tif (this.isNull()) return \"null\";\n\t\tif (this.isUndefined()) return \"undefined\";\n\t\tif (this.isString()) return this.string;\n\t\tif (this.isNumber()) return `${this.number}`;\n\t\tif (this.isBigInt()) return `${this.bigint}`;\n\t\tif (this.isRegExp()) return `${this.regExp}`;\n\t\tif (this.isArray()) {\n\t\t\tlet array = [];\n\t\t\tfor (const item of this.items) {\n\t\t\t\tconst itemStr = item.asString();\n\t\t\t\tif (itemStr === undefined) return undefined;\n\t\t\t\tarray.push(itemStr);\n\t\t\t}\n\t\t\treturn `${array}`;\n\t\t}\n\t\tif (this.isConstArray()) return `${this.array}`;\n\t\tif (this.isTemplateString()) {\n\t\t\tlet str = \"\";\n\t\t\tfor (const part of this.parts) {\n\t\t\t\tconst partStr = part.asString();\n\t\t\t\tif (partStr === undefined) return undefined;\n\t\t\t\tstr += partStr;\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsetString(string) {\n\t\tthis.type = TypeString;\n\t\tthis.string = string;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetUndefined() {\n\t\tthis.type = TypeUndefined;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetNull() {\n\t\tthis.type = TypeNull;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetNumber(number) {\n\t\tthis.type = TypeNumber;\n\t\tthis.number = number;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetBigInt(bigint) {\n\t\tthis.type = TypeBigInt;\n\t\tthis.bigint = bigint;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetBoolean(bool) {\n\t\tthis.type = TypeBoolean;\n\t\tthis.bool = bool;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetRegExp(regExp) {\n\t\tthis.type = TypeRegExp;\n\t\tthis.regExp = regExp;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetIdentifier(identifier, rootInfo, getMembers) {\n\t\tthis.type = TypeIdentifier;\n\t\tthis.identifier = identifier;\n\t\tthis.rootInfo = rootInfo;\n\t\tthis.getMembers = getMembers;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\tsetWrapped(prefix, postfix, innerExpressions) {\n\t\tthis.type = TypeWrapped;\n\t\tthis.prefix = prefix;\n\t\tthis.postfix = postfix;\n\t\tthis.wrappedInnerExpressions = innerExpressions;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\tsetOptions(options) {\n\t\tthis.type = TypeConditional;\n\t\tthis.options = options;\n\t\tthis.sideEffects = true;\n\t\treturn this;\n\t}\n\n\taddOptions(options) {\n\t\tif (!this.options) {\n\t\t\tthis.type = TypeConditional;\n\t\t\tthis.options = [];\n\t\t\tthis.sideEffects = true;\n\t\t}\n\t\tfor (const item of options) {\n\t\t\tthis.options.push(item);\n\t\t}\n\t\treturn this;\n\t}\n\n\tsetItems(items) {\n\t\tthis.type = TypeArray;\n\t\tthis.items = items;\n\t\tthis.sideEffects = items.some(i => i.couldHaveSideEffects());\n\t\treturn this;\n\t}\n\n\tsetArray(array) {\n\t\tthis.type = TypeConstArray;\n\t\tthis.array = array;\n\t\tthis.sideEffects = false;\n\t\treturn this;\n\t}\n\n\tsetTemplateString(quasis, parts, kind) {\n\t\tthis.type = TypeTemplateString;\n\t\tthis.quasis = quasis;\n\t\tthis.parts = parts;\n\t\tthis.templateStringKind = kind;\n\t\tthis.sideEffects = parts.some(p => p.sideEffects);\n\t\treturn this;\n\t}\n\n\tsetTruthy() {\n\t\tthis.falsy = false;\n\t\tthis.truthy = true;\n\t\tthis.nullish = false;\n\t\treturn this;\n\t}\n\n\tsetFalsy() {\n\t\tthis.falsy = true;\n\t\tthis.truthy = false;\n\t\treturn this;\n\t}\n\n\tsetNullish(value) {\n\t\tthis.nullish = value;\n\n\t\tif (value) return this.setFalsy();\n\n\t\treturn this;\n\t}\n\n\tsetRange(range) {\n\t\tthis.range = range;\n\t\treturn this;\n\t}\n\n\tsetSideEffects(sideEffects = true) {\n\t\tthis.sideEffects = sideEffects;\n\t\treturn this;\n\t}\n\n\tsetExpression(expression) {\n\t\tthis.expression = expression;\n\t\treturn this;\n\t}\n}\n\n/**\n * @param {string} flags regexp flags\n * @returns {boolean} is valid flags\n */\nBasicEvaluatedExpression.isValidRegExpFlags = flags => {\n\tconst len = flags.length;\n\n\tif (len === 0) return true;\n\tif (len > 4) return false;\n\n\t// cspell:word gimy\n\tlet remaining = 0b0000; // bit per RegExp flag: gimy\n\n\tfor (let i = 0; i < len; i++)\n\t\tswitch (flags.charCodeAt(i)) {\n\t\t\tcase 103 /* g */:\n\t\t\t\tif (remaining & 0b1000) return false;\n\t\t\t\tremaining |= 0b1000;\n\t\t\t\tbreak;\n\t\t\tcase 105 /* i */:\n\t\t\t\tif (remaining & 0b0100) return false;\n\t\t\t\tremaining |= 0b0100;\n\t\t\t\tbreak;\n\t\t\tcase 109 /* m */:\n\t\t\t\tif (remaining & 0b0010) return false;\n\t\t\t\tremaining |= 0b0010;\n\t\t\t\tbreak;\n\t\t\tcase 121 /* y */:\n\t\t\t\tif (remaining & 0b0001) return false;\n\t\t\t\tremaining |= 0b0001;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\treturn true;\n};\n\nmodule.exports = BasicEvaluatedExpression;\n"]},"metadata":{},"sourceType":"script"}