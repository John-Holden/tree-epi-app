{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDescriptionNormalized} EntryDescription */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryNormalized} Entry */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar EntryOptionPlugin = /*#__PURE__*/function () {\n  function EntryOptionPlugin() {\n    _classCallCheck(this, EntryOptionPlugin);\n  }\n\n  _createClass(EntryOptionPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler the compiler instance one is tapping into\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"EntryOptionPlugin\", function (context, entry) {\n        EntryOptionPlugin.applyEntryOption(compiler, context, entry);\n        return true;\n      });\n    }\n    /**\n     * @param {Compiler} compiler the compiler\n     * @param {string} context context directory\n     * @param {Entry} entry request\n     * @returns {void}\n     */\n\n  }], [{\n    key: \"applyEntryOption\",\n    value: function applyEntryOption(compiler, context, entry) {\n      if (typeof entry === \"function\") {\n        var DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n\n        new DynamicEntryPlugin(context, entry).apply(compiler);\n      } else {\n        var EntryPlugin = require(\"./EntryPlugin\");\n\n        for (var _i = 0, _Object$keys = Object.keys(entry); _i < _Object$keys.length; _i++) {\n          var name = _Object$keys[_i];\n          var desc = entry[name];\n          var options = EntryOptionPlugin.entryDescriptionToOptions(compiler, name, desc);\n\n          var _iterator = _createForOfIteratorHelper(desc.import),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _entry = _step.value;\n              new EntryPlugin(context, _entry, options).apply(compiler);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n    }\n    /**\n     * @param {Compiler} compiler the compiler\n     * @param {string} name entry name\n     * @param {EntryDescription} desc entry description\n     * @returns {EntryOptions} options for the entry\n     */\n\n  }, {\n    key: \"entryDescriptionToOptions\",\n    value: function entryDescriptionToOptions(compiler, name, desc) {\n      /** @type {EntryOptions} */\n      var options = {\n        name: name,\n        filename: desc.filename,\n        runtime: desc.runtime,\n        layer: desc.layer,\n        dependOn: desc.dependOn,\n        publicPath: desc.publicPath,\n        chunkLoading: desc.chunkLoading,\n        asyncChunks: desc.asyncChunks,\n        wasmLoading: desc.wasmLoading,\n        library: desc.library\n      };\n\n      if (desc.layer !== undefined && !compiler.options.experiments.layers) {\n        throw new Error(\"'entryOptions.layer' is only allowed when 'experiments.layers' is enabled\");\n      }\n\n      if (desc.chunkLoading) {\n        var EnableChunkLoadingPlugin = require(\"./javascript/EnableChunkLoadingPlugin\");\n\n        EnableChunkLoadingPlugin.checkEnabled(compiler, desc.chunkLoading);\n      }\n\n      if (desc.wasmLoading) {\n        var EnableWasmLoadingPlugin = require(\"./wasm/EnableWasmLoadingPlugin\");\n\n        EnableWasmLoadingPlugin.checkEnabled(compiler, desc.wasmLoading);\n      }\n\n      if (desc.library) {\n        var EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n\n        EnableLibraryPlugin.checkEnabled(compiler, desc.library.type);\n      }\n\n      return options;\n    }\n  }]);\n\n  return EntryOptionPlugin;\n}();\n\nmodule.exports = EntryOptionPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/EntryOptionPlugin.js"],"names":["EntryOptionPlugin","compiler","hooks","entryOption","tap","context","entry","applyEntryOption","DynamicEntryPlugin","require","apply","EntryPlugin","Object","keys","name","desc","options","entryDescriptionToOptions","import","filename","runtime","layer","dependOn","publicPath","chunkLoading","asyncChunks","wasmLoading","library","undefined","experiments","layers","Error","EnableChunkLoadingPlugin","checkEnabled","EnableWasmLoadingPlugin","EnableLibraryPlugin","type","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDescriptionNormalized} EntryDescription */\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryNormalized} Entry */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\nclass EntryOptionPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler instance one is tapping into\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n\t\t\tEntryOptionPlugin.applyEntryOption(compiler, context, entry);\n\t\t\treturn true;\n\t\t});\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @param {string} context context directory\n\t * @param {Entry} entry request\n\t * @returns {void}\n\t */\n\tstatic applyEntryOption(compiler, context, entry) {\n\t\tif (typeof entry === \"function\") {\n\t\t\tconst DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n\t\t\tnew DynamicEntryPlugin(context, entry).apply(compiler);\n\t\t} else {\n\t\t\tconst EntryPlugin = require(\"./EntryPlugin\");\n\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\tconst desc = entry[name];\n\t\t\t\tconst options = EntryOptionPlugin.entryDescriptionToOptions(\n\t\t\t\t\tcompiler,\n\t\t\t\t\tname,\n\t\t\t\t\tdesc\n\t\t\t\t);\n\t\t\t\tfor (const entry of desc.import) {\n\t\t\t\t\tnew EntryPlugin(context, entry, options).apply(compiler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @param {string} name entry name\n\t * @param {EntryDescription} desc entry description\n\t * @returns {EntryOptions} options for the entry\n\t */\n\tstatic entryDescriptionToOptions(compiler, name, desc) {\n\t\t/** @type {EntryOptions} */\n\t\tconst options = {\n\t\t\tname,\n\t\t\tfilename: desc.filename,\n\t\t\truntime: desc.runtime,\n\t\t\tlayer: desc.layer,\n\t\t\tdependOn: desc.dependOn,\n\t\t\tpublicPath: desc.publicPath,\n\t\t\tchunkLoading: desc.chunkLoading,\n\t\t\tasyncChunks: desc.asyncChunks,\n\t\t\twasmLoading: desc.wasmLoading,\n\t\t\tlibrary: desc.library\n\t\t};\n\t\tif (desc.layer !== undefined && !compiler.options.experiments.layers) {\n\t\t\tthrow new Error(\n\t\t\t\t\"'entryOptions.layer' is only allowed when 'experiments.layers' is enabled\"\n\t\t\t);\n\t\t}\n\t\tif (desc.chunkLoading) {\n\t\t\tconst EnableChunkLoadingPlugin = require(\"./javascript/EnableChunkLoadingPlugin\");\n\t\t\tEnableChunkLoadingPlugin.checkEnabled(compiler, desc.chunkLoading);\n\t\t}\n\t\tif (desc.wasmLoading) {\n\t\t\tconst EnableWasmLoadingPlugin = require(\"./wasm/EnableWasmLoadingPlugin\");\n\t\t\tEnableWasmLoadingPlugin.checkEnabled(compiler, desc.wasmLoading);\n\t\t}\n\t\tif (desc.library) {\n\t\t\tconst EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n\t\t\tEnableLibraryPlugin.checkEnabled(compiler, desc.library.type);\n\t\t}\n\t\treturn options;\n\t}\n}\n\nmodule.exports = EntryOptionPlugin;\n"]},"metadata":{},"sourceType":"script"}