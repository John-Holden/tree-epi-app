{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _inherits = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar parseJson = require(\"json-parse-better-errors\");\n\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\n\nvar WebpackError = require(\"./WebpackError\");\n\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nvar createSchemaValidation = require(\"./util/create-schema-validation\");\n\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\n\nvar validate = createSchemaValidation(require(\"../schemas/plugins/DllReferencePlugin.check.js\"), function () {\n  return require(\"../schemas/plugins/DllReferencePlugin.json\");\n}, {\n  name: \"Dll Reference Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n\n    validate(options);\n    this.options = options;\n    /** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\n    this._compilationData = new WeakMap();\n  }\n\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            compiler.inputFileSystem.readFile(manifest, function (err, result) {\n              if (err) return callback(err);\n              var data = {\n                path: manifest,\n                data: undefined,\n                error: undefined\n              }; // Catch errors parsing the manifest so that blank\n              // or malformed manifest files don't kill the process.\n\n              try {\n                data.data = parseJson(result.toString(\"utf-8\"));\n              } catch (e) {\n                // Store the error in the params so that it can\n                // be added as a compilation error later on.\n                var manifestPath = makePathsRelative(compiler.options.context, manifest, compiler.root);\n                data.error = new DllManifestError(manifestPath, e.message);\n              }\n\n              _this._compilationData.set(params, data);\n\n              return callback();\n            });\n            return;\n          }\n        }\n\n        return callback();\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var name = _this.options.name;\n        var sourceType = _this.options.sourceType;\n        var content = \"content\" in _this.options ? _this.options.content : undefined;\n\n        if (\"manifest\" in _this.options) {\n          var manifestParameter = _this.options.manifest;\n          var manifest;\n\n          if (typeof manifestParameter === \"string\") {\n            var data = _this._compilationData.get(params); // If there was an error parsing the manifest\n            // file, exit now because the error will be added\n            // as a compilation error in the \"compilation\" hook.\n\n\n            if (data.error) {\n              return;\n            }\n\n            manifest = data.data;\n          } else {\n            manifest = manifestParameter;\n          }\n\n          if (manifest) {\n            if (!name) name = manifest.name;\n            if (!sourceType) sourceType = manifest.type;\n            if (!content) content = manifest.content;\n          }\n        }\n        /** @type {Externals} */\n\n\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: content,\n          extensions: _this.options.extensions,\n          associatedObjectForCache: compiler.root\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n\n          if (typeof manifest === \"string\") {\n            var data = _this._compilationData.get(params); // If there was an error parsing the manifest file, add the\n            // error as a compilation error to make the compilation fail.\n\n\n            if (data.error) {\n              compilation.errors.push(data.error);\n            }\n\n            compilation.fileDependencies.add(manifest);\n          }\n        }\n      });\n    }\n  }]);\n\n  return DllReferencePlugin;\n}();\n\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n\n  var _super = _createSuper(DllManifestError);\n\n  function DllManifestError(filename, message) {\n    var _this2;\n\n    _classCallCheck(this, DllManifestError);\n\n    _this2 = _super.call(this);\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    return _this2;\n  }\n\n  return _createClass(DllManifestError);\n}(WebpackError);\n\nmodule.exports = DllReferencePlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/DllReferencePlugin.js"],"names":["parseJson","require","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","WebpackError","DelegatedSourceDependency","createSchemaValidation","makePathsRelative","validate","name","baseDataPath","DllReferencePlugin","options","_compilationData","WeakMap","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","inputFileSystem","readFile","err","result","data","path","undefined","error","toString","e","manifestPath","context","root","DllManifestError","message","compile","sourceType","content","manifestParameter","get","type","externals","source","apply","scope","extensions","associatedObjectForCache","errors","push","fileDependencies","add","filename","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst WebpackError = require(\"./WebpackError\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Externals} Externals */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllReferencePlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllReferencePlugin.json\"),\n\t{\n\t\tname: \"Dll Reference Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t\t/** @type {WeakMap<Object, {path: string, data: DllReferencePluginOptionsManifest?, error: Error?}>} */\n\t\tthis._compilationData = new WeakMap();\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\tpath: manifest,\n\t\t\t\t\t\t\t\tdata: undefined,\n\t\t\t\t\t\t\t\terror: undefined\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdata.data = parseJson(result.toString(\"utf-8\"));\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest,\n\t\t\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdata.error = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._compilationData.set(params, data);\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest = data.data;\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/** @type {Externals} */\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions,\n\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tconst data = this._compilationData.get(params);\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\t\tcompilation.errors.push(data.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcompilation.fileDependencies.add(manifest);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"]},"metadata":{},"sourceType":"script"}