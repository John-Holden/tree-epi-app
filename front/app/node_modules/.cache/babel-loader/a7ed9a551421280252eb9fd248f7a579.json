{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDescriptionNormalized} EntryDescription */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {{ name?: string } & Omit<EntryDescription, \"import\">} EntryOptions */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nvar Entrypoint = /*#__PURE__*/function (_ChunkGroup) {\n  _inherits(Entrypoint, _ChunkGroup);\n\n  var _super = _createSuper(Entrypoint);\n\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {EntryOptions | string} entryOptions the options for the entrypoint (or name)\n   * @param {boolean=} initial false, when the entrypoint is not initial loaded\n   */\n  function Entrypoint(entryOptions) {\n    var _this;\n\n    var initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, Entrypoint);\n\n    if (typeof entryOptions === \"string\") {\n      entryOptions = {\n        name: entryOptions\n      };\n    }\n\n    _this = _super.call(this, {\n      name: entryOptions.name\n    });\n    _this.options = entryOptions;\n    /** @type {Chunk=} */\n\n    _this._runtimeChunk = undefined;\n    /** @type {Chunk=} */\n\n    _this._entrypointChunk = undefined;\n    /** @type {boolean} */\n\n    _this._initial = initial;\n    return _this;\n  }\n  /**\n   * @returns {boolean} true, when this chunk group will be loaded on initial page load\n   */\n\n\n  _createClass(Entrypoint, [{\n    key: \"isInitial\",\n    value: function isInitial() {\n      return this._initial;\n    }\n    /**\n     * Sets the runtimeChunk for an entrypoint.\n     * @param {Chunk} chunk the chunk being set as the runtime chunk.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setRuntimeChunk\",\n    value: function setRuntimeChunk(chunk) {\n      this._runtimeChunk = chunk;\n    }\n    /**\n     * Fetches the chunk reference containing the webpack bootstrap code\n     * @returns {Chunk | null} returns the runtime chunk or null if there is none\n     */\n\n  }, {\n    key: \"getRuntimeChunk\",\n    value: function getRuntimeChunk() {\n      if (this._runtimeChunk) return this._runtimeChunk;\n\n      var _iterator = _createForOfIteratorHelper(this.parentsIterable),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var parent = _step.value;\n          if (parent instanceof Entrypoint) return parent.getRuntimeChunk();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n    /**\n     * Sets the chunk with the entrypoint modules for an entrypoint.\n     * @param {Chunk} chunk the chunk being set as the entrypoint chunk.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"setEntrypointChunk\",\n    value: function setEntrypointChunk(chunk) {\n      this._entrypointChunk = chunk;\n    }\n    /**\n     * Returns the chunk which contains the entrypoint modules\n     * (or at least the execution of them)\n     * @returns {Chunk} chunk\n     */\n\n  }, {\n    key: \"getEntrypointChunk\",\n    value: function getEntrypointChunk() {\n      return this._entrypointChunk;\n    }\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      if (this._runtimeChunk === oldChunk) this._runtimeChunk = newChunk;\n      if (this._entrypointChunk === oldChunk) this._entrypointChunk = newChunk;\n      return _get(_getPrototypeOf(Entrypoint.prototype), \"replaceChunk\", this).call(this, oldChunk, newChunk);\n    }\n  }]);\n\n  return Entrypoint;\n}(ChunkGroup);\n\nmodule.exports = Entrypoint;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/Entrypoint.js"],"names":["ChunkGroup","require","Entrypoint","entryOptions","initial","name","options","_runtimeChunk","undefined","_entrypointChunk","_initial","chunk","parentsIterable","parent","getRuntimeChunk","oldChunk","newChunk","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;AAEA;;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;IACMC,U;;;;;AACL;AACD;AACA;AACA;AACA;AACC,sBAAYC,YAAZ,EAA0C;AAAA;;AAAA,QAAhBC,OAAgB,uEAAN,IAAM;;AAAA;;AACzC,QAAI,OAAOD,YAAP,KAAwB,QAA5B,EAAsC;AACrCA,MAAAA,YAAY,GAAG;AAAEE,QAAAA,IAAI,EAAEF;AAAR,OAAf;AACA;;AACD,8BAAM;AACLE,MAAAA,IAAI,EAAEF,YAAY,CAACE;AADd,KAAN;AAGA,UAAKC,OAAL,GAAeH,YAAf;AACA;;AACA,UAAKI,aAAL,GAAqBC,SAArB;AACA;;AACA,UAAKC,gBAAL,GAAwBD,SAAxB;AACA;;AACA,UAAKE,QAAL,GAAgBN,OAAhB;AAbyC;AAczC;AAED;AACD;AACA;;;;;WACC,qBAAY;AACX,aAAO,KAAKM,QAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,yBAAgBC,KAAhB,EAAuB;AACtB,WAAKJ,aAAL,GAAqBI,KAArB;AACA;AAED;AACD;AACA;AACA;;;;WACC,2BAAkB;AACjB,UAAI,KAAKJ,aAAT,EAAwB,OAAO,KAAKA,aAAZ;;AADP,iDAEI,KAAKK,eAFT;AAAA;;AAAA;AAEjB,4DAA2C;AAAA,cAAhCC,MAAgC;AAC1C,cAAIA,MAAM,YAAYX,UAAtB,EAAkC,OAAOW,MAAM,CAACC,eAAP,EAAP;AAClC;AAJgB;AAAA;AAAA;AAAA;AAAA;;AAKjB,aAAO,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,4BAAmBH,KAAnB,EAA0B;AACzB,WAAKF,gBAAL,GAAwBE,KAAxB;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,8BAAqB;AACpB,aAAO,KAAKF,gBAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,sBAAaM,QAAb,EAAuBC,QAAvB,EAAiC;AAChC,UAAI,KAAKT,aAAL,KAAuBQ,QAA3B,EAAqC,KAAKR,aAAL,GAAqBS,QAArB;AACrC,UAAI,KAAKP,gBAAL,KAA0BM,QAA9B,EAAwC,KAAKN,gBAAL,GAAwBO,QAAxB;AACxC,0FAA0BD,QAA1B,EAAoCC,QAApC;AACA;;;;EA7EuBhB,U;;AAgFzBiB,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDescriptionNormalized} EntryDescription */\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {{ name?: string } & Omit<EntryDescription, \"import\">} EntryOptions */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\nclass Entrypoint extends ChunkGroup {\n\t/**\n\t * Creates an instance of Entrypoint.\n\t * @param {EntryOptions | string} entryOptions the options for the entrypoint (or name)\n\t * @param {boolean=} initial false, when the entrypoint is not initial loaded\n\t */\n\tconstructor(entryOptions, initial = true) {\n\t\tif (typeof entryOptions === \"string\") {\n\t\t\tentryOptions = { name: entryOptions };\n\t\t}\n\t\tsuper({\n\t\t\tname: entryOptions.name\n\t\t});\n\t\tthis.options = entryOptions;\n\t\t/** @type {Chunk=} */\n\t\tthis._runtimeChunk = undefined;\n\t\t/** @type {Chunk=} */\n\t\tthis._entrypointChunk = undefined;\n\t\t/** @type {boolean} */\n\t\tthis._initial = initial;\n\t}\n\n\t/**\n\t * @returns {boolean} true, when this chunk group will be loaded on initial page load\n\t */\n\tisInitial() {\n\t\treturn this._initial;\n\t}\n\n\t/**\n\t * Sets the runtimeChunk for an entrypoint.\n\t * @param {Chunk} chunk the chunk being set as the runtime chunk.\n\t * @returns {void}\n\t */\n\tsetRuntimeChunk(chunk) {\n\t\tthis._runtimeChunk = chunk;\n\t}\n\n\t/**\n\t * Fetches the chunk reference containing the webpack bootstrap code\n\t * @returns {Chunk | null} returns the runtime chunk or null if there is none\n\t */\n\tgetRuntimeChunk() {\n\t\tif (this._runtimeChunk) return this._runtimeChunk;\n\t\tfor (const parent of this.parentsIterable) {\n\t\t\tif (parent instanceof Entrypoint) return parent.getRuntimeChunk();\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the chunk with the entrypoint modules for an entrypoint.\n\t * @param {Chunk} chunk the chunk being set as the entrypoint chunk.\n\t * @returns {void}\n\t */\n\tsetEntrypointChunk(chunk) {\n\t\tthis._entrypointChunk = chunk;\n\t}\n\n\t/**\n\t * Returns the chunk which contains the entrypoint modules\n\t * (or at least the execution of them)\n\t * @returns {Chunk} chunk\n\t */\n\tgetEntrypointChunk() {\n\t\treturn this._entrypointChunk;\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tif (this._runtimeChunk === oldChunk) this._runtimeChunk = newChunk;\n\t\tif (this._entrypointChunk === oldChunk) this._entrypointChunk = newChunk;\n\t\treturn super.replaceChunk(oldChunk, newChunk);\n\t}\n}\n\nmodule.exports = Entrypoint;\n"]},"metadata":{},"sourceType":"script"}