{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar RuntimeGlobals = require(\"../RuntimeGlobals\");\n\nvar ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\n\nvar ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\n\nvar ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\n\nvar ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar ChunkPrefetchPreloadPlugin = /*#__PURE__*/function () {\n  function ChunkPrefetchPreloadPlugin() {\n    _classCallCheck(this, ChunkPrefetchPreloadPlugin);\n  }\n\n  _createClass(ChunkPrefetchPreloadPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {Compiler} compiler the compiler\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ChunkPrefetchPreloadPlugin\", function (compilation) {\n        compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set, _ref) {\n          var chunkGraph = _ref.chunkGraph;\n          if (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n          var startupChildChunks = chunk.getChildrenOfTypeInOrder(chunkGraph, \"prefetchOrder\");\n\n          if (startupChildChunks) {\n            set.add(RuntimeGlobals.prefetchChunk);\n            set.add(RuntimeGlobals.onChunksLoaded);\n            compilation.addRuntimeModule(chunk, new ChunkPrefetchStartupRuntimeModule(startupChildChunks));\n          }\n        });\n        compilation.hooks.additionalTreeRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set, _ref2) {\n          var chunkGraph = _ref2.chunkGraph;\n          var chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n          if (chunkMap.prefetch) {\n            set.add(RuntimeGlobals.prefetchChunk);\n            compilation.addRuntimeModule(chunk, new ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch));\n          }\n\n          if (chunkMap.preload) {\n            set.add(RuntimeGlobals.preloadChunk);\n            compilation.addRuntimeModule(chunk, new ChunkPreloadTriggerRuntimeModule(chunkMap.preload));\n          }\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.prefetchChunk).tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set) {\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"prefetch\", RuntimeGlobals.prefetchChunk, RuntimeGlobals.prefetchChunkHandlers));\n          set.add(RuntimeGlobals.prefetchChunkHandlers);\n        });\n        compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.preloadChunk).tap(\"ChunkPrefetchPreloadPlugin\", function (chunk, set) {\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"preload\", RuntimeGlobals.preloadChunk, RuntimeGlobals.preloadChunkHandlers));\n          set.add(RuntimeGlobals.preloadChunkHandlers);\n        });\n      });\n    }\n  }]);\n\n  return ChunkPrefetchPreloadPlugin;\n}();\n\nmodule.exports = ChunkPrefetchPreloadPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/prefetch/ChunkPrefetchPreloadPlugin.js"],"names":["RuntimeGlobals","require","ChunkPrefetchFunctionRuntimeModule","ChunkPrefetchStartupRuntimeModule","ChunkPrefetchTriggerRuntimeModule","ChunkPreloadTriggerRuntimeModule","ChunkPrefetchPreloadPlugin","compiler","hooks","compilation","tap","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","getNumberOfEntryModules","startupChildChunks","getChildrenOfTypeInOrder","add","prefetchChunk","onChunksLoaded","addRuntimeModule","additionalTreeRuntimeRequirements","chunkMap","getChildIdsByOrdersMap","prefetch","preload","preloadChunk","runtimeRequirementInTree","for","prefetchChunkHandlers","preloadChunkHandlers","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n\t/**\n\t * @param {Compiler} compiler the compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n\t\t\t\t\t\tconst startupChildChunks = chunk.getChildrenOfTypeInOrder(\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\"prefetchOrder\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (startupChildChunks) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchStartupRuntimeModule(startupChildChunks)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\n\t\t\t\t\t\tconst chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n\n\t\t\t\t\t\tif (chunkMap.prefetch) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (chunkMap.preload) {\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunk);\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tnew ChunkPreloadTriggerRuntimeModule(chunkMap.preload)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.prefetchChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"prefetch\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunkHandlers);\n\t\t\t\t\t});\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\n\t\t\t\t\t.for(RuntimeGlobals.preloadChunk)\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n\t\t\t\t\t\tcompilation.addRuntimeModule(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\n\t\t\t\t\t\t\t\t\"preload\",\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunk,\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunkHandlers\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunkHandlers);\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ChunkPrefetchPreloadPlugin;\n"]},"metadata":{},"sourceType":"script"}