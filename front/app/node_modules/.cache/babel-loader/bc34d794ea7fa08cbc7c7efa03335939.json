{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar asyncLib = require(\"neo-async\");\n\nvar EntryDependency = require(\"./dependencies/EntryDependency\");\n\nvar _require = require(\"./util/IterableHelpers\"),\n    someInIterable = _require.someInIterable;\n\nvar _require2 = require(\"./util/comparators\"),\n    compareModulesById = _require2.compareModulesById;\n\nvar _require3 = require(\"./util/fs\"),\n    dirname = _require3.dirname,\n    mkdirp = _require3.mkdirp;\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @typedef {Object} ManifestModuleData\n * @property {string | number} id\n * @property {Object} buildMeta\n * @property {boolean | string[]} exports\n */\n\n\nvar LibManifestPlugin = /*#__PURE__*/function () {\n  function LibManifestPlugin(options) {\n    _classCallCheck(this, LibManifestPlugin);\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(LibManifestPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.emit.tapAsync(\"LibManifestPlugin\", function (compilation, callback) {\n        var moduleGraph = compilation.moduleGraph;\n        asyncLib.forEach(Array.from(compilation.chunks), function (chunk, callback) {\n          if (!chunk.canBeInitial()) {\n            callback();\n            return;\n          }\n\n          var chunkGraph = compilation.chunkGraph;\n          var targetPath = compilation.getPath(_this.options.path, {\n            chunk: chunk\n          });\n          var name = _this.options.name && compilation.getPath(_this.options.name, {\n            chunk: chunk\n          });\n          var content = Object.create(null);\n\n          var _iterator = _createForOfIteratorHelper(chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesById(chunkGraph))),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n\n              if (_this.options.entryOnly && !someInIterable(moduleGraph.getIncomingConnections(_module), function (c) {\n                return c.dependency instanceof EntryDependency;\n              })) {\n                continue;\n              }\n\n              var ident = _module.libIdent({\n                context: _this.options.context || compiler.options.context,\n                associatedObjectForCache: compiler.root\n              });\n\n              if (ident) {\n                var exportsInfo = moduleGraph.getExportsInfo(_module);\n                var providedExports = exportsInfo.getProvidedExports();\n                /** @type {ManifestModuleData} */\n\n                var data = {\n                  id: chunkGraph.getModuleId(_module),\n                  buildMeta: _module.buildMeta,\n                  exports: Array.isArray(providedExports) ? providedExports : undefined\n                };\n                content[ident] = data;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var manifest = {\n            name: name,\n            type: _this.options.type,\n            content: content\n          }; // Apply formatting to content if format flag is true;\n\n          var manifestContent = _this.options.format ? JSON.stringify(manifest, null, 2) : JSON.stringify(manifest);\n          var buffer = Buffer.from(manifestContent, \"utf8\");\n          mkdirp(compiler.intermediateFileSystem, dirname(compiler.intermediateFileSystem, targetPath), function (err) {\n            if (err) return callback(err);\n            compiler.intermediateFileSystem.writeFile(targetPath, buffer, callback);\n          });\n        }, callback);\n      });\n    }\n  }]);\n\n  return LibManifestPlugin;\n}();\n\nmodule.exports = LibManifestPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/LibManifestPlugin.js"],"names":["asyncLib","require","EntryDependency","someInIterable","compareModulesById","dirname","mkdirp","LibManifestPlugin","options","compiler","hooks","emit","tapAsync","compilation","callback","moduleGraph","forEach","Array","from","chunks","chunk","canBeInitial","chunkGraph","targetPath","getPath","path","name","content","Object","create","getOrderedChunkModulesIterable","module","entryOnly","getIncomingConnections","c","dependency","ident","libIdent","context","associatedObjectForCache","root","exportsInfo","getExportsInfo","providedExports","getProvidedExports","data","id","getModuleId","buildMeta","exports","isArray","undefined","manifest","type","manifestContent","format","JSON","stringify","buffer","Buffer","intermediateFileSystem","err","writeFile"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\nconst { someInIterable } = require(\"./util/IterableHelpers\");\nconst { compareModulesById } = require(\"./util/comparators\");\nconst { dirname, mkdirp } = require(\"./util/fs\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @typedef {Object} ManifestModuleData\n * @property {string | number} id\n * @property {Object} buildMeta\n * @property {boolean | string[]} exports\n */\n\nclass LibManifestPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.emit.tapAsync(\n\t\t\t\"LibManifestPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst moduleGraph = compilation.moduleGraph;\n\t\t\t\tasyncLib.forEach(\n\t\t\t\t\tArray.from(compilation.chunks),\n\t\t\t\t\t(chunk, callback) => {\n\t\t\t\t\t\tif (!chunk.canBeInitial()) {\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst targetPath = compilation.getPath(this.options.path, {\n\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\tthis.options.name &&\n\t\t\t\t\t\t\tcompilation.getPath(this.options.name, {\n\t\t\t\t\t\t\t\tchunk\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\tconst content = Object.create(null);\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tcompareModulesById(chunkGraph)\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.options.entryOnly &&\n\t\t\t\t\t\t\t\t!someInIterable(\n\t\t\t\t\t\t\t\t\tmoduleGraph.getIncomingConnections(module),\n\t\t\t\t\t\t\t\t\tc => c.dependency instanceof EntryDependency\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst ident = module.libIdent({\n\t\t\t\t\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\t\t\t\t\tassociatedObjectForCache: compiler.root\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (ident) {\n\t\t\t\t\t\t\t\tconst exportsInfo = moduleGraph.getExportsInfo(module);\n\t\t\t\t\t\t\t\tconst providedExports = exportsInfo.getProvidedExports();\n\t\t\t\t\t\t\t\t/** @type {ManifestModuleData} */\n\t\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\t\tid: chunkGraph.getModuleId(module),\n\t\t\t\t\t\t\t\t\tbuildMeta: module.buildMeta,\n\t\t\t\t\t\t\t\t\texports: Array.isArray(providedExports)\n\t\t\t\t\t\t\t\t\t\t? providedExports\n\t\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcontent[ident] = data;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst manifest = {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: this.options.type,\n\t\t\t\t\t\t\tcontent\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// Apply formatting to content if format flag is true;\n\t\t\t\t\t\tconst manifestContent = this.options.format\n\t\t\t\t\t\t\t? JSON.stringify(manifest, null, 2)\n\t\t\t\t\t\t\t: JSON.stringify(manifest);\n\t\t\t\t\t\tconst buffer = Buffer.from(manifestContent, \"utf8\");\n\t\t\t\t\t\tmkdirp(\n\t\t\t\t\t\t\tcompiler.intermediateFileSystem,\n\t\t\t\t\t\t\tdirname(compiler.intermediateFileSystem, targetPath),\n\t\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\tcompiler.intermediateFileSystem.writeFile(\n\t\t\t\t\t\t\t\t\ttargetPath,\n\t\t\t\t\t\t\t\t\tbuffer,\n\t\t\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = LibManifestPlugin;\n"]},"metadata":{},"sourceType":"script"}