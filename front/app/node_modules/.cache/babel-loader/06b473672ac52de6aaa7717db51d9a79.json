{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/comparators\"),\n    compareChunksNatural = _require.compareChunksNatural;\n\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\n\nvar _require2 = require(\"./IdHelpers\"),\n    assignAscendingChunkIds = _require2.assignAscendingChunkIds;\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceChunkIdsPlugin\").OccurrenceChunkIdsPluginOptions} OccurrenceChunkIdsPluginOptions */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar validate = createSchemaValidation(require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.check.js\"), function () {\n  return require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.json\");\n}, {\n  name: \"Occurrence Order Chunk Ids Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar OccurrenceChunkIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {OccurrenceChunkIdsPluginOptions=} options options object\n   */\n  function OccurrenceChunkIdsPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, OccurrenceChunkIdsPlugin);\n\n    validate(options);\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(OccurrenceChunkIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var prioritiseInitial = this.options.prioritiseInitial;\n      compiler.hooks.compilation.tap(\"OccurrenceChunkIdsPlugin\", function (compilation) {\n        compilation.hooks.chunkIds.tap(\"OccurrenceChunkIdsPlugin\", function (chunks) {\n          var chunkGraph = compilation.chunkGraph;\n          /** @type {Map<Chunk, number>} */\n\n          var occursInInitialChunksMap = new Map();\n          var compareNatural = compareChunksNatural(chunkGraph);\n\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var c = _step.value;\n              var occurs = 0;\n\n              var _iterator2 = _createForOfIteratorHelper(c.groupsIterable),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var chunkGroup = _step2.value;\n\n                  var _iterator3 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                      _step3;\n\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      var parent = _step3.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              occursInInitialChunksMap.set(c, occurs);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var chunksInOccurrenceOrder = Array.from(chunks).sort(function (a, b) {\n            if (prioritiseInitial) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            return compareNatural(a, b);\n          });\n          assignAscendingChunkIds(chunksInOccurrenceOrder, compilation);\n        });\n      });\n    }\n  }]);\n\n  return OccurrenceChunkIdsPlugin;\n}();\n\nmodule.exports = OccurrenceChunkIdsPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/OccurrenceChunkIdsPlugin.js"],"names":["require","compareChunksNatural","createSchemaValidation","assignAscendingChunkIds","validate","name","baseDataPath","OccurrenceChunkIdsPlugin","options","compiler","prioritiseInitial","hooks","compilation","tap","chunkIds","chunks","chunkGraph","occursInInitialChunksMap","Map","compareNatural","c","occurs","groupsIterable","chunkGroup","parentsIterable","parent","isInitial","set","chunksInOccurrenceOrder","Array","from","sort","a","b","aEntryOccurs","get","bEntryOccurs","aOccurs","getNumberOfGroups","bOccurs","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst { assignAscendingChunkIds } = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../../declarations/plugins/ids/OccurrenceChunkIdsPlugin\").OccurrenceChunkIdsPluginOptions} OccurrenceChunkIdsPluginOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/ids/OccurrenceChunkIdsPlugin.json\"),\n\t{\n\t\tname: \"Occurrence Order Chunk Ids Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass OccurrenceChunkIdsPlugin {\n\t/**\n\t * @param {OccurrenceChunkIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidate(options);\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceChunkIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.chunkIds.tap(\"OccurrenceChunkIdsPlugin\", chunks => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\n\t\t\t\t/** @type {Map<Chunk, number>} */\n\t\t\t\tconst occursInInitialChunksMap = new Map();\n\n\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\n\n\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t}\n\n\t\t\t\tconst chunksInOccurrenceOrder = Array.from(chunks).sort((a, b) => {\n\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t}\n\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\treturn compareNatural(a, b);\n\t\t\t\t});\n\t\t\t\tassignAscendingChunkIds(chunksInOccurrenceOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}