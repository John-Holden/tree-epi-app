{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/comparators\"),\n    compareChunksNatural = _require.compareChunksNatural;\n\nvar _require2 = require(\"./IdHelpers\"),\n    getShortChunkName = _require2.getShortChunkName,\n    getLongChunkName = _require2.getLongChunkName,\n    assignNames = _require2.assignNames,\n    getUsedChunkIds = _require2.getUsedChunkIds,\n    assignAscendingChunkIds = _require2.assignAscendingChunkIds;\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar NamedChunkIdsPlugin = /*#__PURE__*/function () {\n  function NamedChunkIdsPlugin(options) {\n    _classCallCheck(this, NamedChunkIdsPlugin);\n\n    this.delimiter = options && options.delimiter || \"-\";\n    this.context = options && options.context;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(NamedChunkIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"NamedChunkIdsPlugin\", function (compilation) {\n        var hashFunction = compilation.outputOptions.hashFunction;\n        compilation.hooks.chunkIds.tap(\"NamedChunkIdsPlugin\", function (chunks) {\n          var chunkGraph = compilation.chunkGraph;\n          var context = _this.context ? _this.context : compiler.context;\n          var delimiter = _this.delimiter;\n          var unnamedChunks = assignNames(Array.from(chunks).filter(function (chunk) {\n            if (chunk.name) {\n              chunk.id = chunk.name;\n              chunk.ids = [chunk.name];\n            }\n\n            return chunk.id === null;\n          }), function (chunk) {\n            return getShortChunkName(chunk, chunkGraph, context, delimiter, hashFunction, compiler.root);\n          }, function (chunk) {\n            return getLongChunkName(chunk, chunkGraph, context, delimiter, hashFunction, compiler.root);\n          }, compareChunksNatural(chunkGraph), getUsedChunkIds(compilation), function (chunk, name) {\n            chunk.id = name;\n            chunk.ids = [name];\n          });\n\n          if (unnamedChunks.length > 0) {\n            assignAscendingChunkIds(unnamedChunks, compilation);\n          }\n        });\n      });\n    }\n  }]);\n\n  return NamedChunkIdsPlugin;\n}();\n\nmodule.exports = NamedChunkIdsPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/NamedChunkIdsPlugin.js"],"names":["require","compareChunksNatural","getShortChunkName","getLongChunkName","assignNames","getUsedChunkIds","assignAscendingChunkIds","NamedChunkIdsPlugin","options","delimiter","context","compiler","hooks","compilation","tap","hashFunction","outputOptions","chunkIds","chunks","chunkGraph","unnamedChunks","Array","from","filter","chunk","name","id","ids","root","length","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,eAAiCA,OAAO,CAAC,qBAAD,CAAxC;AAAA,IAAQC,oBAAR,YAAQA,oBAAR;;AACA,gBAMID,OAAO,CAAC,aAAD,CANX;AAAA,IACCE,iBADD,aACCA,iBADD;AAAA,IAECC,gBAFD,aAECA,gBAFD;AAAA,IAGCC,WAHD,aAGCA,WAHD;AAAA,IAICC,eAJD,aAICA,eAJD;AAAA,IAKCC,uBALD,aAKCA,uBALD;AAQA;;AACA;;AACA;;;IAEMC,mB;AACL,+BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKC,SAAL,GAAkBD,OAAO,IAAIA,OAAO,CAACC,SAApB,IAAkC,GAAnD;AACA,SAAKC,OAAL,GAAeF,OAAO,IAAIA,OAAO,CAACE,OAAlC;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,qBAA/B,EAAsD,UAAAD,WAAW,EAAI;AACpE,YAAQE,YAAR,GAAyBF,WAAW,CAACG,aAArC,CAAQD,YAAR;AACAF,QAAAA,WAAW,CAACD,KAAZ,CAAkBK,QAAlB,CAA2BH,GAA3B,CAA+B,qBAA/B,EAAsD,UAAAI,MAAM,EAAI;AAC/D,cAAMC,UAAU,GAAGN,WAAW,CAACM,UAA/B;AACA,cAAMT,OAAO,GAAG,KAAI,CAACA,OAAL,GAAe,KAAI,CAACA,OAApB,GAA8BC,QAAQ,CAACD,OAAvD;AACA,cAAMD,SAAS,GAAG,KAAI,CAACA,SAAvB;AAEA,cAAMW,aAAa,GAAGhB,WAAW,CAChCiB,KAAK,CAACC,IAAN,CAAWJ,MAAX,EAAmBK,MAAnB,CAA0B,UAAAC,KAAK,EAAI;AAClC,gBAAIA,KAAK,CAACC,IAAV,EAAgB;AACfD,cAAAA,KAAK,CAACE,EAAN,GAAWF,KAAK,CAACC,IAAjB;AACAD,cAAAA,KAAK,CAACG,GAAN,GAAY,CAACH,KAAK,CAACC,IAAP,CAAZ;AACA;;AACD,mBAAOD,KAAK,CAACE,EAAN,KAAa,IAApB;AACA,WAND,CADgC,EAQhC,UAAAF,KAAK;AAAA,mBACJtB,iBAAiB,CAChBsB,KADgB,EAEhBL,UAFgB,EAGhBT,OAHgB,EAIhBD,SAJgB,EAKhBM,YALgB,EAMhBJ,QAAQ,CAACiB,IANO,CADb;AAAA,WAR2B,EAiBhC,UAAAJ,KAAK;AAAA,mBACJrB,gBAAgB,CACfqB,KADe,EAEfL,UAFe,EAGfT,OAHe,EAIfD,SAJe,EAKfM,YALe,EAMfJ,QAAQ,CAACiB,IANM,CADZ;AAAA,WAjB2B,EA0BhC3B,oBAAoB,CAACkB,UAAD,CA1BY,EA2BhCd,eAAe,CAACQ,WAAD,CA3BiB,EA4BhC,UAACW,KAAD,EAAQC,IAAR,EAAiB;AAChBD,YAAAA,KAAK,CAACE,EAAN,GAAWD,IAAX;AACAD,YAAAA,KAAK,CAACG,GAAN,GAAY,CAACF,IAAD,CAAZ;AACA,WA/B+B,CAAjC;;AAiCA,cAAIL,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;AAC7BvB,YAAAA,uBAAuB,CAACc,aAAD,EAAgBP,WAAhB,CAAvB;AACA;AACD,SAzCD;AA0CA,OA5CD;AA6CA;;;;;;AAGFiB,MAAM,CAACC,OAAP,GAAiBxB,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst {\n\tgetShortChunkName,\n\tgetLongChunkName,\n\tassignNames,\n\tgetUsedChunkIds,\n\tassignAscendingChunkIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NamedChunkIdsPlugin {\n\tconstructor(options) {\n\t\tthis.delimiter = (options && options.delimiter) || \"-\";\n\t\tthis.context = options && options.context;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NamedChunkIdsPlugin\", compilation => {\n\t\t\tconst { hashFunction } = compilation.outputOptions;\n\t\t\tcompilation.hooks.chunkIds.tap(\"NamedChunkIdsPlugin\", chunks => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst context = this.context ? this.context : compiler.context;\n\t\t\t\tconst delimiter = this.delimiter;\n\n\t\t\t\tconst unnamedChunks = assignNames(\n\t\t\t\t\tArray.from(chunks).filter(chunk => {\n\t\t\t\t\t\tif (chunk.name) {\n\t\t\t\t\t\t\tchunk.id = chunk.name;\n\t\t\t\t\t\t\tchunk.ids = [chunk.name];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn chunk.id === null;\n\t\t\t\t\t}),\n\t\t\t\t\tchunk =>\n\t\t\t\t\t\tgetShortChunkName(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tdelimiter,\n\t\t\t\t\t\t\thashFunction,\n\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t),\n\t\t\t\t\tchunk =>\n\t\t\t\t\t\tgetLongChunkName(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tdelimiter,\n\t\t\t\t\t\t\thashFunction,\n\t\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t\t),\n\t\t\t\t\tcompareChunksNatural(chunkGraph),\n\t\t\t\t\tgetUsedChunkIds(compilation),\n\t\t\t\t\t(chunk, name) => {\n\t\t\t\t\t\tchunk.id = name;\n\t\t\t\t\t\tchunk.ids = [name];\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tif (unnamedChunks.length > 0) {\n\t\t\t\t\tassignAscendingChunkIds(unnamedChunks, compilation);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NamedChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}