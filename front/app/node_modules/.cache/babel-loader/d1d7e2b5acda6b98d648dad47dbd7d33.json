{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"tapable\"),\n    SyncWaterfallHook = _require.SyncWaterfallHook;\n\nvar Compilation = require(\"../Compilation\");\n\nvar Generator = require(\"../Generator\");\n\nvar _require2 = require(\"../HookWebpackError\"),\n    tryRunOrWebpackError = _require2.tryRunOrWebpackError;\n\nvar WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\nvar _require3 = require(\"../util/comparators\"),\n    compareModulesByIdentifier = _require3.compareModulesByIdentifier;\n\nvar memoize = require(\"../util/memoize\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\n\nvar getAsyncWebAssemblyGenerator = memoize(function () {\n  return require(\"./AsyncWebAssemblyGenerator\");\n});\nvar getAsyncWebAssemblyJavascriptGenerator = memoize(function () {\n  return require(\"./AsyncWebAssemblyJavascriptGenerator\");\n});\nvar getAsyncWebAssemblyParser = memoize(function () {\n  return require(\"./AsyncWebAssemblyParser\");\n});\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\n\nvar compilationHooksMap = new WeakMap();\n\nvar AsyncWebAssemblyModulesPlugin = /*#__PURE__*/function () {\n  function AsyncWebAssemblyModulesPlugin(options) {\n    _classCallCheck(this, AsyncWebAssemblyModulesPlugin);\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(AsyncWebAssemblyModulesPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"AsyncWebAssemblyModulesPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var hooks = AsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n        compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n        normalModuleFactory.hooks.createParser.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", function () {\n          var AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n          return new AsyncWebAssemblyParser();\n        });\n        normalModuleFactory.hooks.createGenerator.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", function () {\n          var AsyncWebAssemblyJavascriptGenerator = getAsyncWebAssemblyJavascriptGenerator();\n          var AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n          return Generator.byType({\n            javascript: new AsyncWebAssemblyJavascriptGenerator(compilation.outputOptions.webassemblyModuleFilename),\n            webassembly: new AsyncWebAssemblyGenerator(_this.options)\n          });\n        });\n        compilation.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", function (result, options) {\n          var moduleGraph = compilation.moduleGraph,\n              chunkGraph = compilation.chunkGraph,\n              runtimeTemplate = compilation.runtimeTemplate;\n          var chunk = options.chunk,\n              outputOptions = options.outputOptions,\n              dependencyTemplates = options.dependencyTemplates,\n              codeGenerationResults = options.codeGenerationResults;\n\n          var _iterator = _createForOfIteratorHelper(chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)),\n              _step;\n\n          try {\n            var _loop = function _loop() {\n              var module = _step.value;\n\n              if (module.type === \"webassembly/async\") {\n                var filenameTemplate = outputOptions.webassemblyModuleFilename;\n                result.push({\n                  render: function render() {\n                    return _this.renderModule(module, {\n                      chunk: chunk,\n                      dependencyTemplates: dependencyTemplates,\n                      runtimeTemplate: runtimeTemplate,\n                      moduleGraph: moduleGraph,\n                      chunkGraph: chunkGraph,\n                      codeGenerationResults: codeGenerationResults\n                    }, hooks);\n                  },\n                  filenameTemplate: filenameTemplate,\n                  pathOptions: {\n                    module: module,\n                    runtime: chunk.runtime,\n                    chunkGraph: chunkGraph\n                  },\n                  auxiliary: true,\n                  identifier: \"webassemblyAsyncModule\".concat(chunkGraph.getModuleId(module)),\n                  hash: chunkGraph.getModuleHash(module, chunk.runtime)\n                });\n              }\n            };\n\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return result;\n        });\n      });\n    }\n  }, {\n    key: \"renderModule\",\n    value: function renderModule(module, renderContext, hooks) {\n      var codeGenerationResults = renderContext.codeGenerationResults,\n          chunk = renderContext.chunk;\n\n      try {\n        var moduleSource = codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\");\n        return tryRunOrWebpackError(function () {\n          return hooks.renderModuleContent.call(moduleSource, module, renderContext);\n        }, \"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\");\n      } catch (e) {\n        e.module = module;\n        throw e;\n      }\n    }\n  }], [{\n    key: \"getCompilationHooks\",\n    value:\n    /**\n     * @param {Compilation} compilation the compilation\n     * @returns {CompilationHooks} the attached hooks\n     */\n    function getCompilationHooks(compilation) {\n      if (!(compilation instanceof Compilation)) {\n        throw new TypeError(\"The 'compilation' argument must be an instance of Compilation\");\n      }\n\n      var hooks = compilationHooksMap.get(compilation);\n\n      if (hooks === undefined) {\n        hooks = {\n          renderModuleContent: new SyncWaterfallHook([\"source\", \"module\", \"renderContext\"])\n        };\n        compilationHooksMap.set(compilation, hooks);\n      }\n\n      return hooks;\n    }\n  }]);\n\n  return AsyncWebAssemblyModulesPlugin;\n}();\n\nmodule.exports = AsyncWebAssemblyModulesPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyModulesPlugin.js"],"names":["require","SyncWaterfallHook","Compilation","Generator","tryRunOrWebpackError","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","getAsyncWebAssemblyGenerator","getAsyncWebAssemblyJavascriptGenerator","getAsyncWebAssemblyParser","compilationHooksMap","WeakMap","AsyncWebAssemblyModulesPlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","getCompilationHooks","dependencyFactories","set","createParser","for","AsyncWebAssemblyParser","createGenerator","AsyncWebAssemblyJavascriptGenerator","AsyncWebAssemblyGenerator","byType","javascript","outputOptions","webassemblyModuleFilename","webassembly","renderManifest","result","moduleGraph","chunkGraph","runtimeTemplate","chunk","dependencyTemplates","codeGenerationResults","getOrderedChunkModulesIterable","module","type","filenameTemplate","push","render","renderModule","pathOptions","runtime","auxiliary","identifier","getModuleId","hash","getModuleHash","renderContext","moduleSource","getSource","renderModuleContent","call","e","TypeError","get","undefined","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { SyncWaterfallHook } = require(\"tapable\");\nconst Compilation = require(\"../Compilation\");\nconst Generator = require(\"../Generator\");\nconst { tryRunOrWebpackError } = require(\"../HookWebpackError\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\nconst getAsyncWebAssemblyGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyGenerator\")\n);\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() =>\n\trequire(\"./AsyncWebAssemblyJavascriptGenerator\")\n);\nconst getAsyncWebAssemblyParser = memoize(() =>\n\trequire(\"./AsyncWebAssemblyParser\")\n);\n\n/**\n * @typedef {Object} WebAssemblyRenderContext\n * @property {Chunk} chunk the chunk\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\n * @property {ModuleGraph} moduleGraph the module graph\n * @property {ChunkGraph} chunkGraph the chunk graph\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\n */\n\n/**\n * @typedef {Object} CompilationHooks\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\n\nclass AsyncWebAssemblyModulesPlugin {\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @returns {CompilationHooks} the attached hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\tif (!(compilation instanceof Compilation)) {\n\t\t\tthrow new TypeError(\n\t\t\t\t\"The 'compilation' argument must be an instance of Compilation\"\n\t\t\t);\n\t\t}\n\t\tlet hooks = compilationHooksMap.get(compilation);\n\t\tif (hooks === undefined) {\n\t\t\thooks = {\n\t\t\t\trenderModuleContent: new SyncWaterfallHook([\n\t\t\t\t\t\"source\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"renderContext\"\n\t\t\t\t])\n\t\t\t};\n\t\t\tcompilationHooksMap.set(compilation, hooks);\n\t\t}\n\t\treturn hooks;\n\t}\n\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AsyncWebAssemblyModulesPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst hooks =\n\t\t\t\t\tAsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tWebAssemblyImportDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\n\t\t\t\tnormalModuleFactory.hooks.createParser\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n\n\t\t\t\t\t\treturn new AsyncWebAssemblyParser();\n\t\t\t\t\t});\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\n\t\t\t\t\t.for(\"webassembly/async\")\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n\t\t\t\t\t\tconst AsyncWebAssemblyJavascriptGenerator =\n\t\t\t\t\t\t\tgetAsyncWebAssemblyJavascriptGenerator();\n\t\t\t\t\t\tconst AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n\n\t\t\t\t\t\treturn Generator.byType({\n\t\t\t\t\t\t\tjavascript: new AsyncWebAssemblyJavascriptGenerator(\n\t\t\t\t\t\t\t\tcompilation.outputOptions.webassemblyModuleFilename\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\twebassembly: new AsyncWebAssemblyGenerator(this.options)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tcompilation.hooks.renderManifest.tap(\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\n\t\t\t\t\t(result, options) => {\n\t\t\t\t\t\tconst { moduleGraph, chunkGraph, runtimeTemplate } = compilation;\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\toutputOptions,\n\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t} = options;\n\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tcompareModulesByIdentifier\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\tif (module.type === \"webassembly/async\") {\n\t\t\t\t\t\t\t\tconst filenameTemplate =\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\n\n\t\t\t\t\t\t\t\tresult.push({\n\t\t\t\t\t\t\t\t\trender: () =>\n\t\t\t\t\t\t\t\t\t\tthis.renderModule(\n\t\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates,\n\t\t\t\t\t\t\t\t\t\t\t\truntimeTemplate,\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph,\n\t\t\t\t\t\t\t\t\t\t\t\tcodeGenerationResults\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\thooks\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\n\t\t\t\t\t\t\t\t\tpathOptions: {\n\t\t\t\t\t\t\t\t\t\tmodule,\n\t\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\n\t\t\t\t\t\t\t\t\t\tchunkGraph\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tauxiliary: true,\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyAsyncModule${chunkGraph.getModuleId(\n\t\t\t\t\t\t\t\t\t\tmodule\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\trenderModule(module, renderContext, hooks) {\n\t\tconst { codeGenerationResults, chunk } = renderContext;\n\t\ttry {\n\t\t\tconst moduleSource = codeGenerationResults.getSource(\n\t\t\t\tmodule,\n\t\t\t\tchunk.runtime,\n\t\t\t\t\"webassembly\"\n\t\t\t);\n\t\t\treturn tryRunOrWebpackError(\n\t\t\t\t() =>\n\t\t\t\t\thooks.renderModuleContent.call(moduleSource, module, renderContext),\n\t\t\t\t\"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\"\n\t\t\t);\n\t\t} catch (e) {\n\t\t\te.module = module;\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n\nmodule.exports = AsyncWebAssemblyModulesPlugin;\n"]},"metadata":{},"sourceType":"script"}