{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nvar FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\n\nvar LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nvar createSchemaValidation = require(\"./util/create-schema-validation\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar validate = createSchemaValidation(require(\"../schemas/plugins/DllPlugin.check.js\"), function () {\n  return require(\"../schemas/plugins/DllPlugin.json\");\n}, {\n  name: \"Dll Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar DllPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  function DllPlugin(options) {\n    _classCallCheck(this, DllPlugin);\n\n    validate(options);\n    this.options = _objectSpread(_objectSpread({}, options), {}, {\n      entryOnly: options.entryOnly !== false\n    });\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(DllPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.entryOption.tap(\"DllPlugin\", function (context, entry) {\n        if (typeof entry !== \"function\") {\n          for (var _i = 0, _Object$keys = Object.keys(entry); _i < _Object$keys.length; _i++) {\n            var name = _Object$keys[_i];\n            var options = {\n              name: name,\n              filename: entry.filename\n            };\n            new DllEntryPlugin(context, entry[name].import, options).apply(compiler);\n          }\n        } else {\n          throw new Error(\"DllPlugin doesn't support dynamic entry (function) yet\");\n        }\n\n        return true;\n      });\n      new LibManifestPlugin(this.options).apply(compiler);\n\n      if (!this.options.entryOnly) {\n        new FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n      }\n    }\n  }]);\n\n  return DllPlugin;\n}();\n\nmodule.exports = DllPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/DllPlugin.js"],"names":["DllEntryPlugin","require","FlagAllModulesAsUsedPlugin","LibManifestPlugin","createSchemaValidation","validate","name","baseDataPath","DllPlugin","options","entryOnly","compiler","hooks","entryOption","tap","context","entry","Object","keys","filename","import","apply","Error","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA9B;;AACA,IAAMC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAA1C;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAAjC;;AACA,IAAMG,sBAAsB,GAAGH,OAAO,CAAC,iCAAD,CAAtC;AAEA;;AACA;;;AAEA,IAAMI,QAAQ,GAAGD,sBAAsB,CACtCH,OAAO,CAAC,uCAAD,CAD+B,EAEtC;AAAA,SAAMA,OAAO,CAAC,mCAAD,CAAb;AAAA,CAFsC,EAGtC;AACCK,EAAAA,IAAI,EAAE,YADP;AAECC,EAAAA,YAAY,EAAE;AAFf,CAHsC,CAAvC;;IASMC,S;AACL;AACD;AACA;AACC,qBAAYC,OAAZ,EAAqB;AAAA;;AACpBJ,IAAAA,QAAQ,CAACI,OAAD,CAAR;AACA,SAAKA,OAAL,mCACIA,OADJ;AAECC,MAAAA,SAAS,EAAED,OAAO,CAACC,SAAR,KAAsB;AAFlC;AAIA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,WAA/B,EAA4C,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC/D,YAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAChC,0CAAmBC,MAAM,CAACC,IAAP,CAAYF,KAAZ,CAAnB,kCAAuC;AAAlC,gBAAMV,IAAI,mBAAV;AACJ,gBAAMG,OAAO,GAAG;AACfH,cAAAA,IAAI,EAAJA,IADe;AAEfa,cAAAA,QAAQ,EAAEH,KAAK,CAACG;AAFD,aAAhB;AAIA,gBAAInB,cAAJ,CAAmBe,OAAnB,EAA4BC,KAAK,CAACV,IAAD,CAAL,CAAYc,MAAxC,EAAgDX,OAAhD,EAAyDY,KAAzD,CACCV,QADD;AAGA;AACD,SAVD,MAUO;AACN,gBAAM,IAAIW,KAAJ,CACL,wDADK,CAAN;AAGA;;AACD,eAAO,IAAP;AACA,OAjBD;AAkBA,UAAInB,iBAAJ,CAAsB,KAAKM,OAA3B,EAAoCY,KAApC,CAA0CV,QAA1C;;AACA,UAAI,CAAC,KAAKF,OAAL,CAAaC,SAAlB,EAA6B;AAC5B,YAAIR,0BAAJ,CAA+B,WAA/B,EAA4CmB,KAA5C,CAAkDV,QAAlD;AACA;AACD;;;;;;AAGFY,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\nconst FlagAllModulesAsUsedPlugin = require(\"./FlagAllModulesAsUsedPlugin\");\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/DllPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/DllPlugin.json\"),\n\t{\n\t\tname: \"Dll Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nclass DllPlugin {\n\t/**\n\t * @param {DllPluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\t\tthis.options = {\n\t\t\t...options,\n\t\t\tentryOnly: options.entryOnly !== false\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n\t\t\tif (typeof entry !== \"function\") {\n\t\t\t\tfor (const name of Object.keys(entry)) {\n\t\t\t\t\tconst options = {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tfilename: entry.filename\n\t\t\t\t\t};\n\t\t\t\t\tnew DllEntryPlugin(context, entry[name].import, options).apply(\n\t\t\t\t\t\tcompiler\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"DllPlugin doesn't support dynamic entry (function) yet\"\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\t\tnew LibManifestPlugin(this.options).apply(compiler);\n\t\tif (!this.options.entryOnly) {\n\t\t\tnew FlagAllModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n\t\t}\n\t}\n}\n\nmodule.exports = DllPlugin;\n"]},"metadata":{},"sourceType":"script"}