{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\n\nvar EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\nvar JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n/** @typedef {import(\"../Chunk\")} Chunk */\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar JsonpTemplatePlugin = /*#__PURE__*/function () {\n  function JsonpTemplatePlugin() {\n    _classCallCheck(this, JsonpTemplatePlugin);\n  }\n\n  _createClass(JsonpTemplatePlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.options.output.chunkLoading = \"jsonp\";\n      new ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n      new EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n    }\n  }], [{\n    key: \"getCompilationHooks\",\n    value:\n    /**\n     * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n     * @param {Compilation} compilation the compilation\n     * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n     */\n    function getCompilationHooks(compilation) {\n      return JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n    }\n  }]);\n\n  return JsonpTemplatePlugin;\n}();\n\nmodule.exports = JsonpTemplatePlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/web/JsonpTemplatePlugin.js"],"names":["ArrayPushCallbackChunkFormatPlugin","require","EnableChunkLoadingPlugin","JsonpChunkLoadingRuntimeModule","JsonpTemplatePlugin","compiler","options","output","chunkLoading","apply","compilation","getCompilationHooks","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,kCAAkC,GAAGC,OAAO,CAAC,kDAAD,CAAlD;;AACA,IAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAD,CAAxC;;AACA,IAAME,8BAA8B,GAAGF,OAAO,CAAC,kCAAD,CAA9C;AAEA;;AACA;;AACA;;;IAEMG,mB;;;;;;;;AAUL;AACD;AACA;AACA;AACA;AACC,mBAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,CAAwBC,YAAxB,GAAuC,OAAvC;AACA,UAAIR,kCAAJ,GAAyCS,KAAzC,CAA+CJ,QAA/C;AACA,UAAIH,wBAAJ,CAA6B,OAA7B,EAAsCO,KAAtC,CAA4CJ,QAA5C;AACA;;;;AAlBD;AACD;AACA;AACA;AACA;AACC,iCAA2BK,WAA3B,EAAwC;AACvC,aAAOP,8BAA8B,CAACQ,mBAA/B,CAAmDD,WAAnD,CAAP;AACA;;;;;;AAcFE,MAAM,CAACC,OAAP,GAAiBT,mBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst ArrayPushCallbackChunkFormatPlugin = require(\"../javascript/ArrayPushCallbackChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst JsonpChunkLoadingRuntimeModule = require(\"./JsonpChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass JsonpTemplatePlugin {\n\t/**\n\t * @deprecated use JsonpChunkLoadingRuntimeModule.getCompilationHooks instead\n\t * @param {Compilation} compilation the compilation\n\t * @returns {JsonpChunkLoadingRuntimeModule.JsonpCompilationPluginHooks} hooks\n\t */\n\tstatic getCompilationHooks(compilation) {\n\t\treturn JsonpChunkLoadingRuntimeModule.getCompilationHooks(compilation);\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.options.output.chunkLoading = \"jsonp\";\n\t\tnew ArrayPushCallbackChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(\"jsonp\").apply(compiler);\n\t}\n}\n\nmodule.exports = JsonpTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}