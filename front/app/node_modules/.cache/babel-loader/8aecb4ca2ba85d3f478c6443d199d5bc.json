{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").AuxiliaryComment} AuxiliaryComment */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryExport} LibraryExport */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryName} LibraryName */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryType} LibraryType */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").UmdNamedDefine} UmdNamedDefine */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n// TODO webpack 6 remove\n\n\nvar LibraryTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {LibraryName} name name of library\n   * @param {LibraryType} target type of library\n   * @param {UmdNamedDefine} umdNamedDefine setting this to true will name the UMD module\n   * @param {AuxiliaryComment} auxiliaryComment comment in the UMD wrapper\n   * @param {LibraryExport} exportProperty which export should be exposed as library\n   */\n  function LibraryTemplatePlugin(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n    _classCallCheck(this, LibraryTemplatePlugin);\n\n    this.library = {\n      type: target || \"var\",\n      name: name,\n      umdNamedDefine: umdNamedDefine,\n      auxiliaryComment: auxiliaryComment,\n      export: exportProperty\n    };\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(LibraryTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var output = compiler.options.output;\n      output.library = this.library;\n      new EnableLibraryPlugin(this.library.type).apply(compiler);\n    }\n  }]);\n\n  return LibraryTemplatePlugin;\n}();\n\nmodule.exports = LibraryTemplatePlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/LibraryTemplatePlugin.js"],"names":["EnableLibraryPlugin","require","LibraryTemplatePlugin","name","target","umdNamedDefine","auxiliaryComment","exportProperty","library","type","export","compiler","output","options","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,+BAAD,CAAnC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;AAEA;;;IACMC,qB;AACL;AACD;AACA;AACA;AACA;AACA;AACA;AACC,iCAAYC,IAAZ,EAAkBC,MAAlB,EAA0BC,cAA1B,EAA0CC,gBAA1C,EAA4DC,cAA5D,EAA4E;AAAA;;AAC3E,SAAKC,OAAL,GAAe;AACdC,MAAAA,IAAI,EAAEL,MAAM,IAAI,KADF;AAEdD,MAAAA,IAAI,EAAJA,IAFc;AAGdE,MAAAA,cAAc,EAAdA,cAHc;AAIdC,MAAAA,gBAAgB,EAAhBA,gBAJc;AAKdI,MAAAA,MAAM,EAAEH;AALM,KAAf;AAOA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMI,QAAN,EAAgB;AACf,UAAQC,MAAR,GAAmBD,QAAQ,CAACE,OAA5B,CAAQD,MAAR;AACAA,MAAAA,MAAM,CAACJ,OAAP,GAAiB,KAAKA,OAAtB;AACA,UAAIR,mBAAJ,CAAwB,KAAKQ,OAAL,CAAaC,IAArC,EAA2CK,KAA3C,CAAiDH,QAAjD;AACA;;;;;;AAGFI,MAAM,CAACC,OAAP,GAAiBd,qBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst EnableLibraryPlugin = require(\"./library/EnableLibraryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").AuxiliaryComment} AuxiliaryComment */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryExport} LibraryExport */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryName} LibraryName */\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../declarations/WebpackOptions\").UmdNamedDefine} UmdNamedDefine */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n// TODO webpack 6 remove\nclass LibraryTemplatePlugin {\n\t/**\n\t * @param {LibraryName} name name of library\n\t * @param {LibraryType} target type of library\n\t * @param {UmdNamedDefine} umdNamedDefine setting this to true will name the UMD module\n\t * @param {AuxiliaryComment} auxiliaryComment comment in the UMD wrapper\n\t * @param {LibraryExport} exportProperty which export should be exposed as library\n\t */\n\tconstructor(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n\t\tthis.library = {\n\t\t\ttype: target || \"var\",\n\t\t\tname,\n\t\t\tumdNamedDefine,\n\t\t\tauxiliaryComment,\n\t\t\texport: exportProperty\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { output } = compiler.options;\n\t\toutput.library = this.library;\n\t\tnew EnableLibraryPlugin(this.library.type).apply(compiler);\n\t}\n}\n\nmodule.exports = LibraryTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}