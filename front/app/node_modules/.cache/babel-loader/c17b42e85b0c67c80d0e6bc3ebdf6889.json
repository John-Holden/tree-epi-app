{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nvar NONE = Symbol(\"not sorted\");\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\n\nvar SortableSet = /*#__PURE__*/function (_Set) {\n  _inherits(SortableSet, _Set);\n\n  var _super = _createSuper(SortableSet);\n\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  function SortableSet(initialIterable, defaultSort) {\n    var _this;\n\n    _classCallCheck(this, SortableSet);\n\n    _this = _super.call(this, initialIterable);\n    /** @private @type {undefined | function(T, T): number}} */\n\n    _this._sortFn = defaultSort;\n    /** @private @type {typeof NONE | undefined | function(T, T): number}} */\n\n    _this._lastActiveSortFn = NONE;\n    /** @private @type {Map<Function, any> | undefined} */\n\n    _this._cache = undefined;\n    /** @private @type {Map<Function, any> | undefined} */\n\n    _this._cacheOrderIndependent = undefined;\n    return _this;\n  }\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n\n\n  _createClass(SortableSet, [{\n    key: \"add\",\n    value: function add(value) {\n      this._lastActiveSortFn = NONE;\n\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, value);\n\n      return this;\n    }\n    /**\n     * @param {T} value value to delete\n     * @returns {boolean} true if value existed in set, false otherwise\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      return _get(_getPrototypeOf(SortableSet.prototype), \"delete\", this).call(this, value);\n    }\n    /**\n     * @returns {void}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._invalidateCache();\n\n      this._invalidateOrderedCache();\n\n      return _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * Sort with a comparer function\n     * @param {SortFunction} sortFn Sorting comparer function\n     * @returns {void}\n     */\n\n  }, {\n    key: \"sortWith\",\n    value: function sortWith(sortFn) {\n      if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n        // already sorted - nothing to do\n        return;\n      }\n\n      var sortedArray = Array.from(this).sort(sortFn);\n\n      _get(_getPrototypeOf(SortableSet.prototype), \"clear\", this).call(this);\n\n      for (var i = 0; i < sortedArray.length; i += 1) {\n        _get(_getPrototypeOf(SortableSet.prototype), \"add\", this).call(this, sortedArray[i]);\n      }\n\n      this._lastActiveSortFn = sortFn;\n\n      this._invalidateCache();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this.sortWith(this._sortFn);\n      return this;\n    }\n    /**\n     * Get data from cache\n     * @template R\n     * @param {function(SortableSet<T>): R} fn function to calculate value\n     * @returns {R} returns result of fn(this), cached until set changes\n     */\n\n  }, {\n    key: \"getFromCache\",\n    value: function getFromCache(fn) {\n      if (this._cache === undefined) {\n        this._cache = new Map();\n      } else {\n        var result = this._cache.get(fn);\n\n        var data =\n        /** @type {R} */\n        result;\n\n        if (data !== undefined) {\n          return data;\n        }\n      }\n\n      var newData = fn(this);\n\n      this._cache.set(fn, newData);\n\n      return newData;\n    }\n    /**\n     * Get data from cache (ignoring sorting)\n     * @template R\n     * @param {function(SortableSet<T>): R} fn function to calculate value\n     * @returns {R} returns result of fn(this), cached until set changes\n     */\n\n  }, {\n    key: \"getFromUnorderedCache\",\n    value: function getFromUnorderedCache(fn) {\n      if (this._cacheOrderIndependent === undefined) {\n        this._cacheOrderIndependent = new Map();\n      } else {\n        var result = this._cacheOrderIndependent.get(fn);\n\n        var data =\n        /** @type {R} */\n        result;\n\n        if (data !== undefined) {\n          return data;\n        }\n      }\n\n      var newData = fn(this);\n\n      this._cacheOrderIndependent.set(fn, newData);\n\n      return newData;\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_invalidateCache\",\n    value: function _invalidateCache() {\n      if (this._cache !== undefined) {\n        this._cache.clear();\n      }\n    }\n    /**\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_invalidateOrderedCache\",\n    value: function _invalidateOrderedCache() {\n      if (this._cacheOrderIndependent !== undefined) {\n        this._cacheOrderIndependent.clear();\n      }\n    }\n    /**\n     * @returns {T[]} the raw array\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Array.from(this);\n    }\n  }]);\n\n  return SortableSet;\n}( /*#__PURE__*/_wrapNativeSuper(Set));\n\nmodule.exports = SortableSet;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/util/SortableSet.js"],"names":["NONE","Symbol","SortableSet","initialIterable","defaultSort","_sortFn","_lastActiveSortFn","_cache","undefined","_cacheOrderIndependent","value","_invalidateCache","_invalidateOrderedCache","sortFn","size","sortedArray","Array","from","sort","i","length","sortWith","fn","Map","result","get","data","newData","set","clear","Set","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst NONE = Symbol(\"not sorted\");\n\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\nclass SortableSet extends Set {\n\t/**\n\t * Create a new sortable set\n\t * @param {Iterable<T>=} initialIterable The initial iterable value\n\t * @typedef {function(T, T): number} SortFunction\n\t * @param {SortFunction=} defaultSort Default sorting function\n\t */\n\tconstructor(initialIterable, defaultSort) {\n\t\tsuper(initialIterable);\n\t\t/** @private @type {undefined | function(T, T): number}} */\n\t\tthis._sortFn = defaultSort;\n\t\t/** @private @type {typeof NONE | undefined | function(T, T): number}} */\n\t\tthis._lastActiveSortFn = NONE;\n\t\t/** @private @type {Map<Function, any> | undefined} */\n\t\tthis._cache = undefined;\n\t\t/** @private @type {Map<Function, any> | undefined} */\n\t\tthis._cacheOrderIndependent = undefined;\n\t}\n\n\t/**\n\t * @param {T} value value to add to set\n\t * @returns {this} returns itself\n\t */\n\tadd(value) {\n\t\tthis._lastActiveSortFn = NONE;\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\tsuper.add(value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {T} value value to delete\n\t * @returns {boolean} true if value existed in set, false otherwise\n\t */\n\tdelete(value) {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.delete(value);\n\t}\n\n\t/**\n\t * @returns {void}\n\t */\n\tclear() {\n\t\tthis._invalidateCache();\n\t\tthis._invalidateOrderedCache();\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Sort with a comparer function\n\t * @param {SortFunction} sortFn Sorting comparer function\n\t * @returns {void}\n\t */\n\tsortWith(sortFn) {\n\t\tif (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n\t\t\t// already sorted - nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst sortedArray = Array.from(this).sort(sortFn);\n\t\tsuper.clear();\n\t\tfor (let i = 0; i < sortedArray.length; i += 1) {\n\t\t\tsuper.add(sortedArray[i]);\n\t\t}\n\t\tthis._lastActiveSortFn = sortFn;\n\t\tthis._invalidateCache();\n\t}\n\n\tsort() {\n\t\tthis.sortWith(this._sortFn);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get data from cache\n\t * @template R\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\n\t * @returns {R} returns result of fn(this), cached until set changes\n\t */\n\tgetFromCache(fn) {\n\t\tif (this._cache === undefined) {\n\t\t\tthis._cache = new Map();\n\t\t} else {\n\t\t\tconst result = this._cache.get(fn);\n\t\t\tconst data = /** @type {R} */ (result);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cache.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * Get data from cache (ignoring sorting)\n\t * @template R\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\n\t * @returns {R} returns result of fn(this), cached until set changes\n\t */\n\tgetFromUnorderedCache(fn) {\n\t\tif (this._cacheOrderIndependent === undefined) {\n\t\t\tthis._cacheOrderIndependent = new Map();\n\t\t} else {\n\t\t\tconst result = this._cacheOrderIndependent.get(fn);\n\t\t\tconst data = /** @type {R} */ (result);\n\t\t\tif (data !== undefined) {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\tconst newData = fn(this);\n\t\tthis._cacheOrderIndependent.set(fn, newData);\n\t\treturn newData;\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateCache() {\n\t\tif (this._cache !== undefined) {\n\t\t\tthis._cache.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @returns {void}\n\t */\n\t_invalidateOrderedCache() {\n\t\tif (this._cacheOrderIndependent !== undefined) {\n\t\t\tthis._cacheOrderIndependent.clear();\n\t\t}\n\t}\n\n\t/**\n\t * @returns {T[]} the raw array\n\t */\n\ttoJSON() {\n\t\treturn Array.from(this);\n\t}\n}\n\nmodule.exports = SortableSet;\n"]},"metadata":{},"sourceType":"script"}