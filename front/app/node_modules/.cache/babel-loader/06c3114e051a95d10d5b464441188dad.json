{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar StringXor = /*#__PURE__*/function () {\n  function StringXor() {\n    _classCallCheck(this, StringXor);\n\n    this._value = undefined;\n  }\n  /**\n   * @param {string} str string\n   * @returns {void}\n   */\n\n\n  _createClass(StringXor, [{\n    key: \"add\",\n    value: function add(str) {\n      var len = str.length;\n      var value = this._value;\n\n      if (value === undefined) {\n        var newValue = this._value = Buffer.allocUnsafe(len);\n\n        for (var i = 0; i < len; i++) {\n          newValue[i] = str.charCodeAt(i);\n        }\n\n        return;\n      }\n\n      var valueLen = value.length;\n\n      if (valueLen < len) {\n        var _newValue = this._value = Buffer.allocUnsafe(len);\n\n        var _i;\n\n        for (_i = 0; _i < valueLen; _i++) {\n          _newValue[_i] = value[_i] ^ str.charCodeAt(_i);\n        }\n\n        for (; _i < len; _i++) {\n          _newValue[_i] = str.charCodeAt(_i);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < len; _i2++) {\n          value[_i2] = value[_i2] ^ str.charCodeAt(_i2);\n        }\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var value = this._value;\n      return value === undefined ? \"\" : value.toString(\"latin1\");\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      var value = this._value;\n      if (value !== undefined) hash.update(value);\n    }\n  }]);\n\n  return StringXor;\n}();\n\nmodule.exports = StringXor;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/util/StringXor.js"],"names":["StringXor","_value","undefined","str","len","length","value","newValue","Buffer","allocUnsafe","i","charCodeAt","valueLen","toString","hash","update","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;IAEMA,S;AACL,uBAAc;AAAA;;AACb,SAAKC,MAAL,GAAcC,SAAd;AACA;AAED;AACD;AACA;AACA;;;;;WACC,aAAIC,GAAJ,EAAS;AACR,UAAMC,GAAG,GAAGD,GAAG,CAACE,MAAhB;AACA,UAAMC,KAAK,GAAG,KAAKL,MAAnB;;AACA,UAAIK,KAAK,KAAKJ,SAAd,EAAyB;AACxB,YAAMK,QAAQ,GAAI,KAAKN,MAAL,GAAcO,MAAM,CAACC,WAAP,CAAmBL,GAAnB,CAAhC;;AACA,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAApB,EAAyBM,CAAC,EAA1B,EAA8B;AAC7BH,UAAAA,QAAQ,CAACG,CAAD,CAAR,GAAcP,GAAG,CAACQ,UAAJ,CAAeD,CAAf,CAAd;AACA;;AACD;AACA;;AACD,UAAME,QAAQ,GAAGN,KAAK,CAACD,MAAvB;;AACA,UAAIO,QAAQ,GAAGR,GAAf,EAAoB;AACnB,YAAMG,SAAQ,GAAI,KAAKN,MAAL,GAAcO,MAAM,CAACC,WAAP,CAAmBL,GAAnB,CAAhC;;AACA,YAAIM,EAAJ;;AACA,aAAKA,EAAC,GAAG,CAAT,EAAYA,EAAC,GAAGE,QAAhB,EAA0BF,EAAC,EAA3B,EAA+B;AAC9BH,UAAAA,SAAQ,CAACG,EAAD,CAAR,GAAcJ,KAAK,CAACI,EAAD,CAAL,GAAWP,GAAG,CAACQ,UAAJ,CAAeD,EAAf,CAAzB;AACA;;AACD,eAAOA,EAAC,GAAGN,GAAX,EAAgBM,EAAC,EAAjB,EAAqB;AACpBH,UAAAA,SAAQ,CAACG,EAAD,CAAR,GAAcP,GAAG,CAACQ,UAAJ,CAAeD,EAAf,CAAd;AACA;AACD,OATD,MASO;AACN,aAAK,IAAIA,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGN,GAApB,EAAyBM,GAAC,EAA1B,EAA8B;AAC7BJ,UAAAA,KAAK,CAACI,GAAD,CAAL,GAAWJ,KAAK,CAACI,GAAD,CAAL,GAAWP,GAAG,CAACQ,UAAJ,CAAeD,GAAf,CAAtB;AACA;AACD;AACD;;;WAED,oBAAW;AACV,UAAMJ,KAAK,GAAG,KAAKL,MAAnB;AACA,aAAOK,KAAK,KAAKJ,SAAV,GAAsB,EAAtB,GAA2BI,KAAK,CAACO,QAAN,CAAe,QAAf,CAAlC;AACA;;;WAED,oBAAWC,IAAX,EAAiB;AAChB,UAAMR,KAAK,GAAG,KAAKL,MAAnB;AACA,UAAIK,KAAK,KAAKJ,SAAd,EAAyBY,IAAI,CAACC,MAAL,CAAYT,KAAZ;AACzB;;;;;;AAGFU,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nclass StringXor {\n\tconstructor() {\n\t\tthis._value = undefined;\n\t}\n\n\t/**\n\t * @param {string} str string\n\t * @returns {void}\n\t */\n\tadd(str) {\n\t\tconst len = str.length;\n\t\tconst value = this._value;\n\t\tif (value === undefined) {\n\t\t\tconst newValue = (this._value = Buffer.allocUnsafe(len));\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tnewValue[i] = str.charCodeAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst valueLen = value.length;\n\t\tif (valueLen < len) {\n\t\t\tconst newValue = (this._value = Buffer.allocUnsafe(len));\n\t\t\tlet i;\n\t\t\tfor (i = 0; i < valueLen; i++) {\n\t\t\t\tnewValue[i] = value[i] ^ str.charCodeAt(i);\n\t\t\t}\n\t\t\tfor (; i < len; i++) {\n\t\t\t\tnewValue[i] = str.charCodeAt(i);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvalue[i] = value[i] ^ str.charCodeAt(i);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\tconst value = this._value;\n\t\treturn value === undefined ? \"\" : value.toString(\"latin1\");\n\t}\n\n\tupdateHash(hash) {\n\t\tconst value = this._value;\n\t\tif (value !== undefined) hash.update(value);\n\t}\n}\n\nmodule.exports = StringXor;\n"]},"metadata":{},"sourceType":"script"}