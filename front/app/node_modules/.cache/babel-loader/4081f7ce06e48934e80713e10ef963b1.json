{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nvar _objectSpread = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar RuntimeChunkPlugin = /*#__PURE__*/function () {\n  function RuntimeChunkPlugin(options) {\n    _classCallCheck(this, RuntimeChunkPlugin);\n\n    this.options = _objectSpread({\n      name: function name(entrypoint) {\n        return \"runtime~\".concat(entrypoint.name);\n      }\n    }, options);\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(RuntimeChunkPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", function (compilation) {\n        compilation.hooks.addEntry.tap(\"RuntimeChunkPlugin\", function (_, _ref) {\n          var entryName = _ref.name;\n          if (entryName === undefined) return;\n          var data = compilation.entries.get(entryName);\n\n          if (data.options.runtime === undefined && !data.options.dependOn) {\n            // Determine runtime chunk name\n            var name = _this.options.name;\n\n            if (typeof name === \"function\") {\n              name = name({\n                name: entryName\n              });\n            }\n\n            data.options.runtime = name;\n          }\n        });\n      });\n    }\n  }]);\n\n  return RuntimeChunkPlugin;\n}();\n\nmodule.exports = RuntimeChunkPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/optimize/RuntimeChunkPlugin.js"],"names":["RuntimeChunkPlugin","options","name","entrypoint","compiler","hooks","thisCompilation","tap","compilation","addEntry","_","entryName","undefined","data","entries","get","runtime","dependOn","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;IAEMA,kB;AACL,8BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL;AACCC,MAAAA,IAAI,EAAE,cAAAC,UAAU;AAAA,iCAAeA,UAAU,CAACD,IAA1B;AAAA;AADjB,OAEID,OAFJ;AAIA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMG,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,eAAf,CAA+BC,GAA/B,CAAmC,oBAAnC,EAAyD,UAAAC,WAAW,EAAI;AACvEA,QAAAA,WAAW,CAACH,KAAZ,CAAkBI,QAAlB,CAA2BF,GAA3B,CACC,oBADD,EAEC,UAACG,CAAD,QAA4B;AAAA,cAAhBC,SAAgB,QAAtBT,IAAsB;AAC3B,cAAIS,SAAS,KAAKC,SAAlB,EAA6B;AAC7B,cAAMC,IAAI,GAAGL,WAAW,CAACM,OAAZ,CAAoBC,GAApB,CAAwBJ,SAAxB,CAAb;;AACA,cAAIE,IAAI,CAACZ,OAAL,CAAae,OAAb,KAAyBJ,SAAzB,IAAsC,CAACC,IAAI,CAACZ,OAAL,CAAagB,QAAxD,EAAkE;AACjE;AACA,gBAAIf,IAAI,GAAG,KAAI,CAACD,OAAL,CAAaC,IAAxB;;AACA,gBAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC/BA,cAAAA,IAAI,GAAGA,IAAI,CAAC;AAAEA,gBAAAA,IAAI,EAAES;AAAR,eAAD,CAAX;AACA;;AACDE,YAAAA,IAAI,CAACZ,OAAL,CAAae,OAAb,GAAuBd,IAAvB;AACA;AACD,SAbF;AAeA,OAhBD;AAiBA;;;;;;AAGFgB,MAAM,CAACC,OAAP,GAAiBnB,kBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass RuntimeChunkPlugin {\n\tconstructor(options) {\n\t\tthis.options = {\n\t\t\tname: entrypoint => `runtime~${entrypoint.name}`,\n\t\t\t...options\n\t\t};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.thisCompilation.tap(\"RuntimeChunkPlugin\", compilation => {\n\t\t\tcompilation.hooks.addEntry.tap(\n\t\t\t\t\"RuntimeChunkPlugin\",\n\t\t\t\t(_, { name: entryName }) => {\n\t\t\t\t\tif (entryName === undefined) return;\n\t\t\t\t\tconst data = compilation.entries.get(entryName);\n\t\t\t\t\tif (data.options.runtime === undefined && !data.options.dependOn) {\n\t\t\t\t\t\t// Determine runtime chunk name\n\t\t\t\t\t\tlet name = this.options.name;\n\t\t\t\t\t\tif (typeof name === \"function\") {\n\t\t\t\t\t\t\tname = name({ name: entryName });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata.options.runtime = name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = RuntimeChunkPlugin;\n"]},"metadata":{},"sourceType":"script"}