{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _require = require(\"webpack-sources\"),\n    RawSource = _require.RawSource;\n\nvar OriginalSource = require(\"webpack-sources\").OriginalSource;\n\nvar Module = require(\"./Module\");\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"./Module\").CodeGenerationContext} CodeGenerationContext */\n\n/** @typedef {import(\"./Module\").CodeGenerationResult} CodeGenerationResult */\n\n/** @typedef {import(\"./Module\").NeedBuildContext} NeedBuildContext */\n\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n\n/** @typedef {import(\"./ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\n\nvar TYPES = new Set([\"runtime\"]);\n\nvar RuntimeModule = /*#__PURE__*/function (_Module) {\n  _inherits(RuntimeModule, _Module);\n\n  var _super = _createSuper(RuntimeModule);\n\n  /**\n   * @param {string} name a readable name\n   * @param {number=} stage an optional stage\n   */\n  function RuntimeModule(name) {\n    var _this;\n\n    var stage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, RuntimeModule);\n\n    _this = _super.call(this, \"runtime\");\n    _this.name = name;\n    _this.stage = stage;\n    _this.buildMeta = {};\n    _this.buildInfo = {};\n    /** @type {Compilation} */\n\n    _this.compilation = undefined;\n    /** @type {Chunk} */\n\n    _this.chunk = undefined;\n    /** @type {ChunkGraph} */\n\n    _this.chunkGraph = undefined;\n    _this.fullHash = false;\n    _this.dependentHash = false;\n    /** @type {string} */\n\n    _this._cachedGeneratedCode = undefined;\n    return _this;\n  }\n  /**\n   * @param {Compilation} compilation the compilation\n   * @param {Chunk} chunk the chunk\n   * @param {ChunkGraph} chunkGraph the chunk graph\n   * @returns {void}\n   */\n\n\n  _createClass(RuntimeModule, [{\n    key: \"attach\",\n    value: function attach(compilation, chunk) {\n      var chunkGraph = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : compilation.chunkGraph;\n      this.compilation = compilation;\n      this.chunk = chunk;\n      this.chunkGraph = chunkGraph;\n    }\n    /**\n     * @returns {string} a unique identifier of the module\n     */\n\n  }, {\n    key: \"identifier\",\n    value: function identifier() {\n      return \"webpack/runtime/\".concat(this.name);\n    }\n    /**\n     * @param {RequestShortener} requestShortener the request shortener\n     * @returns {string} a user readable identifier of the module\n     */\n\n  }, {\n    key: \"readableIdentifier\",\n    value: function readableIdentifier(requestShortener) {\n      return \"webpack/runtime/\".concat(this.name);\n    }\n    /**\n     * @param {NeedBuildContext} context context info\n     * @param {function((WebpackError | null)=, boolean=): void} callback callback function, returns true, if the module needs a rebuild\n     * @returns {void}\n     */\n\n  }, {\n    key: \"needBuild\",\n    value: function needBuild(context, callback) {\n      return callback(null, false);\n    }\n    /**\n     * @param {WebpackOptions} options webpack options\n     * @param {Compilation} compilation the compilation\n     * @param {ResolverWithOptions} resolver the resolver\n     * @param {InputFileSystem} fs the file system\n     * @param {function(WebpackError=): void} callback callback function\n     * @returns {void}\n     */\n\n  }, {\n    key: \"build\",\n    value: function build(options, compilation, resolver, fs, callback) {\n      // do nothing\n      // should not be called as runtime modules are added later to the compilation\n      callback();\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @param {UpdateHashContext} context context\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash, context) {\n      hash.update(this.name);\n      hash.update(\"\".concat(this.stage));\n\n      try {\n        if (this.fullHash || this.dependentHash) {\n          // Do not use getGeneratedCode here, because i. e. compilation hash might be not\n          // ready at this point. We will cache it later instead.\n          hash.update(this.generate());\n        } else {\n          hash.update(this.getGeneratedCode());\n        }\n      } catch (err) {\n        hash.update(err.message);\n      }\n\n      _get(_getPrototypeOf(RuntimeModule.prototype), \"updateHash\", this).call(this, hash, context);\n    }\n    /**\n     * @returns {Set<string>} types available (do not mutate)\n     */\n\n  }, {\n    key: \"getSourceTypes\",\n    value: function getSourceTypes() {\n      return TYPES;\n    }\n    /**\n     * @param {CodeGenerationContext} context context for code generation\n     * @returns {CodeGenerationResult} result\n     */\n\n  }, {\n    key: \"codeGeneration\",\n    value: function codeGeneration(context) {\n      var sources = new Map();\n      var generatedCode = this.getGeneratedCode();\n\n      if (generatedCode) {\n        sources.set(\"runtime\", this.useSourceMap || this.useSimpleSourceMap ? new OriginalSource(generatedCode, this.identifier()) : new RawSource(generatedCode));\n      }\n\n      return {\n        sources: sources,\n        runtimeRequirements: null\n      };\n    }\n    /**\n     * @param {string=} type the source type for which the size should be estimated\n     * @returns {number} the estimated size of the module (must be non-zero)\n     */\n\n  }, {\n    key: \"size\",\n    value: function size(type) {\n      try {\n        var source = this.getGeneratedCode();\n        return source ? source.length : 0;\n      } catch (e) {\n        return 0;\n      }\n    }\n    /* istanbul ignore next */\n\n    /**\n     * @abstract\n     * @returns {string} runtime code\n     */\n\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      var AbstractMethodError = require(\"./AbstractMethodError\");\n\n      throw new AbstractMethodError();\n    }\n    /**\n     * @returns {string} runtime code\n     */\n\n  }, {\n    key: \"getGeneratedCode\",\n    value: function getGeneratedCode() {\n      if (this._cachedGeneratedCode) {\n        return this._cachedGeneratedCode;\n      }\n\n      return this._cachedGeneratedCode = this.generate();\n    }\n    /**\n     * @returns {boolean} true, if the runtime module should get it's own scope\n     */\n\n  }, {\n    key: \"shouldIsolate\",\n    value: function shouldIsolate() {\n      return true;\n    }\n  }]);\n\n  return RuntimeModule;\n}(Module);\n/**\n * Runtime modules without any dependencies to other runtime modules\n */\n\n\nRuntimeModule.STAGE_NORMAL = 0;\n/**\n * Runtime modules with simple dependencies on other runtime modules\n */\n\nRuntimeModule.STAGE_BASIC = 5;\n/**\n * Runtime modules which attach to handlers of other runtime modules\n */\n\nRuntimeModule.STAGE_ATTACH = 10;\n/**\n * Runtime modules which trigger actions on bootstrap\n */\n\nRuntimeModule.STAGE_TRIGGER = 20;\nmodule.exports = RuntimeModule;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/RuntimeModule.js"],"names":["require","RawSource","OriginalSource","Module","TYPES","Set","RuntimeModule","name","stage","buildMeta","buildInfo","compilation","undefined","chunk","chunkGraph","fullHash","dependentHash","_cachedGeneratedCode","requestShortener","context","callback","options","resolver","fs","hash","update","generate","getGeneratedCode","err","message","sources","Map","generatedCode","set","useSourceMap","useSimpleSourceMap","identifier","runtimeRequirements","type","source","length","e","AbstractMethodError","STAGE_NORMAL","STAGE_BASIC","STAGE_ATTACH","STAGE_TRIGGER","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { RawSource } = require(\"webpack-sources\");\nconst OriginalSource = require(\"webpack-sources\").OriginalSource;\nconst Module = require(\"./Module\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").WebpackOptionsNormalized} WebpackOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./Compilation\")} Compilation */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./Module\").CodeGenerationContext} CodeGenerationContext */\n/** @typedef {import(\"./Module\").CodeGenerationResult} CodeGenerationResult */\n/** @typedef {import(\"./Module\").NeedBuildContext} NeedBuildContext */\n/** @typedef {import(\"./RequestShortener\")} RequestShortener */\n/** @typedef {import(\"./ResolverFactory\").ResolverWithOptions} ResolverWithOptions */\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n/** @typedef {import(\"./util/Hash\")} Hash */\n/** @typedef {import(\"./util/fs\").InputFileSystem} InputFileSystem */\n\nconst TYPES = new Set([\"runtime\"]);\n\nclass RuntimeModule extends Module {\n\t/**\n\t * @param {string} name a readable name\n\t * @param {number=} stage an optional stage\n\t */\n\tconstructor(name, stage = 0) {\n\t\tsuper(\"runtime\");\n\t\tthis.name = name;\n\t\tthis.stage = stage;\n\t\tthis.buildMeta = {};\n\t\tthis.buildInfo = {};\n\t\t/** @type {Compilation} */\n\t\tthis.compilation = undefined;\n\t\t/** @type {Chunk} */\n\t\tthis.chunk = undefined;\n\t\t/** @type {ChunkGraph} */\n\t\tthis.chunkGraph = undefined;\n\t\tthis.fullHash = false;\n\t\tthis.dependentHash = false;\n\t\t/** @type {string} */\n\t\tthis._cachedGeneratedCode = undefined;\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation\n\t * @param {Chunk} chunk the chunk\n\t * @param {ChunkGraph} chunkGraph the chunk graph\n\t * @returns {void}\n\t */\n\tattach(compilation, chunk, chunkGraph = compilation.chunkGraph) {\n\t\tthis.compilation = compilation;\n\t\tthis.chunk = chunk;\n\t\tthis.chunkGraph = chunkGraph;\n\t}\n\n\t/**\n\t * @returns {string} a unique identifier of the module\n\t */\n\tidentifier() {\n\t\treturn `webpack/runtime/${this.name}`;\n\t}\n\n\t/**\n\t * @param {RequestShortener} requestShortener the request shortener\n\t * @returns {string} a user readable identifier of the module\n\t */\n\treadableIdentifier(requestShortener) {\n\t\treturn `webpack/runtime/${this.name}`;\n\t}\n\n\t/**\n\t * @param {NeedBuildContext} context context info\n\t * @param {function((WebpackError | null)=, boolean=): void} callback callback function, returns true, if the module needs a rebuild\n\t * @returns {void}\n\t */\n\tneedBuild(context, callback) {\n\t\treturn callback(null, false);\n\t}\n\n\t/**\n\t * @param {WebpackOptions} options webpack options\n\t * @param {Compilation} compilation the compilation\n\t * @param {ResolverWithOptions} resolver the resolver\n\t * @param {InputFileSystem} fs the file system\n\t * @param {function(WebpackError=): void} callback callback function\n\t * @returns {void}\n\t */\n\tbuild(options, compilation, resolver, fs, callback) {\n\t\t// do nothing\n\t\t// should not be called as runtime modules are added later to the compilation\n\t\tcallback();\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\thash.update(this.name);\n\t\thash.update(`${this.stage}`);\n\t\ttry {\n\t\t\tif (this.fullHash || this.dependentHash) {\n\t\t\t\t// Do not use getGeneratedCode here, because i. e. compilation hash might be not\n\t\t\t\t// ready at this point. We will cache it later instead.\n\t\t\t\thash.update(this.generate());\n\t\t\t} else {\n\t\t\t\thash.update(this.getGeneratedCode());\n\t\t\t}\n\t\t} catch (err) {\n\t\t\thash.update(err.message);\n\t\t}\n\t\tsuper.updateHash(hash, context);\n\t}\n\n\t/**\n\t * @returns {Set<string>} types available (do not mutate)\n\t */\n\tgetSourceTypes() {\n\t\treturn TYPES;\n\t}\n\n\t/**\n\t * @param {CodeGenerationContext} context context for code generation\n\t * @returns {CodeGenerationResult} result\n\t */\n\tcodeGeneration(context) {\n\t\tconst sources = new Map();\n\t\tconst generatedCode = this.getGeneratedCode();\n\t\tif (generatedCode) {\n\t\t\tsources.set(\n\t\t\t\t\"runtime\",\n\t\t\t\tthis.useSourceMap || this.useSimpleSourceMap\n\t\t\t\t\t? new OriginalSource(generatedCode, this.identifier())\n\t\t\t\t\t: new RawSource(generatedCode)\n\t\t\t);\n\t\t}\n\t\treturn {\n\t\t\tsources,\n\t\t\truntimeRequirements: null\n\t\t};\n\t}\n\n\t/**\n\t * @param {string=} type the source type for which the size should be estimated\n\t * @returns {number} the estimated size of the module (must be non-zero)\n\t */\n\tsize(type) {\n\t\ttry {\n\t\t\tconst source = this.getGeneratedCode();\n\t\t\treturn source ? source.length : 0;\n\t\t} catch (e) {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/* istanbul ignore next */\n\t/**\n\t * @abstract\n\t * @returns {string} runtime code\n\t */\n\tgenerate() {\n\t\tconst AbstractMethodError = require(\"./AbstractMethodError\");\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * @returns {string} runtime code\n\t */\n\tgetGeneratedCode() {\n\t\tif (this._cachedGeneratedCode) {\n\t\t\treturn this._cachedGeneratedCode;\n\t\t}\n\t\treturn (this._cachedGeneratedCode = this.generate());\n\t}\n\n\t/**\n\t * @returns {boolean} true, if the runtime module should get it's own scope\n\t */\n\tshouldIsolate() {\n\t\treturn true;\n\t}\n}\n\n/**\n * Runtime modules without any dependencies to other runtime modules\n */\nRuntimeModule.STAGE_NORMAL = 0;\n\n/**\n * Runtime modules with simple dependencies on other runtime modules\n */\nRuntimeModule.STAGE_BASIC = 5;\n\n/**\n * Runtime modules which attach to handlers of other runtime modules\n */\nRuntimeModule.STAGE_ATTACH = 10;\n\n/**\n * Runtime modules which trigger actions on bootstrap\n */\nRuntimeModule.STAGE_TRIGGER = 20;\n\nmodule.exports = RuntimeModule;\n"]},"metadata":{},"sourceType":"script"}