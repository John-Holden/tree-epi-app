{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar CommonJsChunkFormatPlugin = require(\"../javascript/CommonJsChunkFormatPlugin\");\n\nvar EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar NodeTemplatePlugin = /*#__PURE__*/function () {\n  function NodeTemplatePlugin(options) {\n    _classCallCheck(this, NodeTemplatePlugin);\n\n    this._options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(NodeTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var chunkLoading = this._options.asyncChunkLoading ? \"async-node\" : \"require\";\n      compiler.options.output.chunkLoading = chunkLoading;\n      new CommonJsChunkFormatPlugin().apply(compiler);\n      new EnableChunkLoadingPlugin(chunkLoading).apply(compiler);\n    }\n  }]);\n\n  return NodeTemplatePlugin;\n}();\n\nmodule.exports = NodeTemplatePlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/node/NodeTemplatePlugin.js"],"names":["CommonJsChunkFormatPlugin","require","EnableChunkLoadingPlugin","NodeTemplatePlugin","options","_options","compiler","chunkLoading","asyncChunkLoading","output","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,yBAAyB,GAAGC,OAAO,CAAC,yCAAD,CAAzC;;AACA,IAAMC,wBAAwB,GAAGD,OAAO,CAAC,wCAAD,CAAxC;AAEA;;;IAEME,kB;AACL,8BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKC,QAAL,GAAgBD,OAAO,IAAI,EAA3B;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAME,QAAN,EAAgB;AACf,UAAMC,YAAY,GAAG,KAAKF,QAAL,CAAcG,iBAAd,GAClB,YADkB,GAElB,SAFH;AAGAF,MAAAA,QAAQ,CAACF,OAAT,CAAiBK,MAAjB,CAAwBF,YAAxB,GAAuCA,YAAvC;AACA,UAAIP,yBAAJ,GAAgCU,KAAhC,CAAsCJ,QAAtC;AACA,UAAIJ,wBAAJ,CAA6BK,YAA7B,EAA2CG,KAA3C,CAAiDJ,QAAjD;AACA;;;;;;AAGFK,MAAM,CAACC,OAAP,GAAiBT,kBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst CommonJsChunkFormatPlugin = require(\"../javascript/CommonJsChunkFormatPlugin\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass NodeTemplatePlugin {\n\tconstructor(options) {\n\t\tthis._options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst chunkLoading = this._options.asyncChunkLoading\n\t\t\t? \"async-node\"\n\t\t\t: \"require\";\n\t\tcompiler.options.output.chunkLoading = chunkLoading;\n\t\tnew CommonJsChunkFormatPlugin().apply(compiler);\n\t\tnew EnableChunkLoadingPlugin(chunkLoading).apply(compiler);\n\t}\n}\n\nmodule.exports = NodeTemplatePlugin;\n"]},"metadata":{},"sourceType":"script"}