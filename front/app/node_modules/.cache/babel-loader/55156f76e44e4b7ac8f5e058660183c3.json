{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _slicedToArray = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Compiler = require(\"./Compiler\");\n\nvar MultiCompiler = require(\"./MultiCompiler\");\n\nvar NormalModule = require(\"./NormalModule\");\n\nvar createSchemaValidation = require(\"./util/create-schema-validation\");\n\nvar _require = require(\"./util/identifier\"),\n    contextify = _require.contextify;\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\n\nvar validate = createSchemaValidation(require(\"../schemas/plugins/ProgressPlugin.check.js\"), function () {\n  return require(\"../schemas/plugins/ProgressPlugin.json\");\n}, {\n  name: \"Progress Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar median3 = function median3(a, b, c) {\n  return a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\nvar createDefaultHandler = function createDefaultHandler(profile, logger) {\n  /** @type {{ value: string, time: number }[]} */\n  var lastStateInfo = [];\n\n  var defaultHandler = function defaultHandler(percentage, msg) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (profile) {\n      if (percentage === 0) {\n        lastStateInfo.length = 0;\n      }\n\n      var fullState = [msg].concat(args);\n      var state = fullState.map(function (s) {\n        return s.replace(/\\d+\\/\\d+ /g, \"\");\n      });\n      var now = Date.now();\n      var len = Math.max(state.length, lastStateInfo.length);\n\n      for (var i = len; i >= 0; i--) {\n        var stateItem = i < state.length ? state[i] : undefined;\n        var lastStateItem = i < lastStateInfo.length ? lastStateInfo[i] : undefined;\n\n        if (lastStateItem) {\n          if (stateItem !== lastStateItem.value) {\n            var diff = now - lastStateItem.time;\n\n            if (lastStateItem.value) {\n              var reportState = lastStateItem.value;\n\n              if (i > 0) {\n                reportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n              }\n\n              var stateMsg = \"\".concat(\" | \".repeat(i)).concat(diff, \" ms \").concat(reportState);\n              var d = diff; // This depends on timing so we ignore it for coverage\n\n              /* istanbul ignore next */\n\n              {\n                if (d > 10000) {\n                  logger.error(stateMsg);\n                } else if (d > 1000) {\n                  logger.warn(stateMsg);\n                } else if (d > 10) {\n                  logger.info(stateMsg);\n                } else if (d > 5) {\n                  logger.log(stateMsg);\n                } else {\n                  logger.debug(stateMsg);\n                }\n              }\n            }\n\n            if (stateItem === undefined) {\n              lastStateInfo.length = i;\n            } else {\n              lastStateItem.value = stateItem;\n              lastStateItem.time = now;\n              lastStateInfo.length = i + 1;\n            }\n          }\n        } else {\n          lastStateInfo[i] = {\n            value: stateItem,\n            time: now\n          };\n        }\n      }\n    }\n\n    logger.status.apply(logger, [\"\".concat(Math.floor(percentage * 100), \"%\"), msg].concat(args));\n    if (percentage === 1 || !msg && args.length === 0) logger.status();\n  };\n\n  return defaultHandler;\n};\n/**\n * @callback ReportProgress\n * @param {number} p\n * @param {...string} [args]\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler,ReportProgress>} */\n\n\nvar progressReporters = new WeakMap();\n\nvar ProgressPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  function ProgressPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ProgressPlugin);\n\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n\n    validate(options);\n    options = _objectSpread(_objectSpread({}, ProgressPlugin.defaultOptions), options);\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.dependenciesCount = options.dependenciesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showDependencies = options.dependencies;\n    this.showActiveModules = options.activeModules;\n    this.percentBy = options.percentBy;\n  }\n  /**\n   * @param {Compiler | MultiCompiler} compiler webpack compiler\n   * @returns {void}\n   */\n\n\n  _createClass(ProgressPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n\n      if (compiler instanceof MultiCompiler) {\n        this._applyOnMultiCompiler(compiler, handler);\n      } else if (compiler instanceof Compiler) {\n        this._applyOnCompiler(compiler, handler);\n      }\n    }\n    /**\n     * @param {MultiCompiler} compiler webpack multi-compiler\n     * @param {HandlerFunction} handler function that executes for every progress step\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_applyOnMultiCompiler\",\n    value: function _applyOnMultiCompiler(compiler, handler) {\n      var states = compiler.compilers.map(function () {\n        return (\n          /** @type {[number, ...string[]]} */\n          [0]\n        );\n      });\n      compiler.compilers.forEach(function (compiler, idx) {\n        new ProgressPlugin(function (p, msg) {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n            args[_key2 - 2] = arguments[_key2];\n          }\n\n          states[idx] = [p, msg].concat(args);\n          var sum = 0;\n\n          var _iterator = _createForOfIteratorHelper(states),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _step$value = _slicedToArray(_step.value, 1),\n                  _p = _step$value[0];\n\n              sum += _p;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          handler.apply(void 0, [sum / states.length, \"[\".concat(idx, \"] \").concat(msg)].concat(args));\n        }).apply(compiler);\n      });\n    }\n    /**\n     * @param {Compiler} compiler webpack compiler\n     * @param {HandlerFunction} handler function that executes for every progress step\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_applyOnCompiler\",\n    value: function _applyOnCompiler(compiler, handler) {\n      var _this = this;\n\n      var showEntries = this.showEntries;\n      var showModules = this.showModules;\n      var showDependencies = this.showDependencies;\n      var showActiveModules = this.showActiveModules;\n      var lastActiveModule = \"\";\n      var currentLoader = \"\";\n      var lastModulesCount = 0;\n      var lastDependenciesCount = 0;\n      var lastEntriesCount = 0;\n      var modulesCount = 0;\n      var dependenciesCount = 0;\n      var entriesCount = 1;\n      var doneModules = 0;\n      var doneDependencies = 0;\n      var doneEntries = 0;\n      var activeModules = new Set();\n      var lastUpdate = 0;\n\n      var updateThrottled = function updateThrottled() {\n        if (lastUpdate + 500 < Date.now()) update();\n      };\n\n      var update = function update() {\n        /** @type {string[]} */\n        var items = [];\n        var percentByModules = doneModules / Math.max(lastModulesCount || _this.modulesCount || 1, modulesCount);\n        var percentByEntries = doneEntries / Math.max(lastEntriesCount || _this.dependenciesCount || 1, entriesCount);\n        var percentByDependencies = doneDependencies / Math.max(lastDependenciesCount || 1, dependenciesCount);\n        var percentageFactor;\n\n        switch (_this.percentBy) {\n          case \"entries\":\n            percentageFactor = percentByEntries;\n            break;\n\n          case \"dependencies\":\n            percentageFactor = percentByDependencies;\n            break;\n\n          case \"modules\":\n            percentageFactor = percentByModules;\n            break;\n\n          default:\n            percentageFactor = median3(percentByModules, percentByEntries, percentByDependencies);\n        }\n\n        var percentage = 0.1 + percentageFactor * 0.55;\n\n        if (currentLoader) {\n          items.push(\"import loader \".concat(contextify(compiler.context, currentLoader, compiler.root)));\n        } else {\n          var statItems = [];\n\n          if (showEntries) {\n            statItems.push(\"\".concat(doneEntries, \"/\").concat(entriesCount, \" entries\"));\n          }\n\n          if (showDependencies) {\n            statItems.push(\"\".concat(doneDependencies, \"/\").concat(dependenciesCount, \" dependencies\"));\n          }\n\n          if (showModules) {\n            statItems.push(\"\".concat(doneModules, \"/\").concat(modulesCount, \" modules\"));\n          }\n\n          if (showActiveModules) {\n            statItems.push(\"\".concat(activeModules.size, \" active\"));\n          }\n\n          if (statItems.length > 0) {\n            items.push(statItems.join(\" \"));\n          }\n\n          if (showActiveModules) {\n            items.push(lastActiveModule);\n          }\n        }\n\n        handler.apply(void 0, [percentage, \"building\"].concat(items));\n        lastUpdate = Date.now();\n      };\n\n      var factorizeAdd = function factorizeAdd() {\n        dependenciesCount++;\n        if (dependenciesCount < 50 || dependenciesCount % 100 === 0) updateThrottled();\n      };\n\n      var factorizeDone = function factorizeDone() {\n        doneDependencies++;\n        if (doneDependencies < 50 || doneDependencies % 100 === 0) updateThrottled();\n      };\n\n      var moduleAdd = function moduleAdd() {\n        modulesCount++;\n        if (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n      }; // only used when showActiveModules is set\n\n\n      var moduleBuild = function moduleBuild(module) {\n        var ident = module.identifier();\n\n        if (ident) {\n          activeModules.add(ident);\n          lastActiveModule = ident;\n          update();\n        }\n      };\n\n      var entryAdd = function entryAdd(entry, options) {\n        entriesCount++;\n        if (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n      };\n\n      var moduleDone = function moduleDone(module) {\n        doneModules++;\n\n        if (showActiveModules) {\n          var ident = module.identifier();\n\n          if (ident) {\n            activeModules.delete(ident);\n\n            if (lastActiveModule === ident) {\n              lastActiveModule = \"\";\n\n              var _iterator2 = _createForOfIteratorHelper(activeModules),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var m = _step2.value;\n                  lastActiveModule = m;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              update();\n              return;\n            }\n          }\n        }\n\n        if (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n      };\n\n      var entryDone = function entryDone(entry, options) {\n        doneEntries++;\n        update();\n      };\n\n      var cache = compiler.getCache(\"ProgressPlugin\").getItemCache(\"counts\", null);\n      var cacheGetPromise;\n      compiler.hooks.beforeCompile.tap(\"ProgressPlugin\", function () {\n        if (!cacheGetPromise) {\n          cacheGetPromise = cache.getPromise().then(function (data) {\n            if (data) {\n              lastModulesCount = lastModulesCount || data.modulesCount;\n              lastDependenciesCount = lastDependenciesCount || data.dependenciesCount;\n            }\n\n            return data;\n          }, function (err) {// Ignore error\n          });\n        }\n      });\n      compiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", function (compilation) {\n        if (compilation.compiler.isChild()) return Promise.resolve();\n        return cacheGetPromise.then( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(oldData) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(!oldData || oldData.modulesCount !== modulesCount || oldData.dependenciesCount !== dependenciesCount)) {\n                      _context.next = 3;\n                      break;\n                    }\n\n                    _context.next = 3;\n                    return cache.storePromise({\n                      modulesCount: modulesCount,\n                      dependenciesCount: dependenciesCount\n                    });\n\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      });\n      compiler.hooks.compilation.tap(\"ProgressPlugin\", function (compilation) {\n        if (compilation.compiler.isChild()) return;\n        lastModulesCount = modulesCount;\n        lastEntriesCount = entriesCount;\n        lastDependenciesCount = dependenciesCount;\n        modulesCount = dependenciesCount = entriesCount = 0;\n        doneModules = doneDependencies = doneEntries = 0;\n        compilation.factorizeQueue.hooks.added.tap(\"ProgressPlugin\", factorizeAdd);\n        compilation.factorizeQueue.hooks.result.tap(\"ProgressPlugin\", factorizeDone);\n        compilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n        compilation.processDependenciesQueue.hooks.result.tap(\"ProgressPlugin\", moduleDone);\n\n        if (showActiveModules) {\n          compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n        }\n\n        compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n        compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n        compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone); // avoid dynamic require if bundled with webpack\n        // @ts-expect-error\n\n        if (typeof __webpack_require__ !== \"function\") {\n          var requiredLoaders = new Set();\n          NormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\"ProgressPlugin\", function (loaders) {\n            var _iterator3 = _createForOfIteratorHelper(loaders),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var loader = _step3.value;\n\n                if (loader.type !== \"module\" && !requiredLoaders.has(loader.loader)) {\n                  requiredLoaders.add(loader.loader);\n                  currentLoader = loader.loader;\n                  update();\n\n                  require(loader.loader);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            if (currentLoader) {\n              currentLoader = \"\";\n              update();\n            }\n          });\n        }\n\n        var hooks = {\n          finishModules: \"finish module graph\",\n          seal: \"plugins\",\n          optimizeDependencies: \"dependencies optimization\",\n          afterOptimizeDependencies: \"after dependencies optimization\",\n          beforeChunks: \"chunk graph\",\n          afterChunks: \"after chunk graph\",\n          optimize: \"optimizing\",\n          optimizeModules: \"module optimization\",\n          afterOptimizeModules: \"after module optimization\",\n          optimizeChunks: \"chunk optimization\",\n          afterOptimizeChunks: \"after chunk optimization\",\n          optimizeTree: \"module and chunk tree optimization\",\n          afterOptimizeTree: \"after module and chunk tree optimization\",\n          optimizeChunkModules: \"chunk modules optimization\",\n          afterOptimizeChunkModules: \"after chunk modules optimization\",\n          reviveModules: \"module reviving\",\n          beforeModuleIds: \"before module ids\",\n          moduleIds: \"module ids\",\n          optimizeModuleIds: \"module id optimization\",\n          afterOptimizeModuleIds: \"module id optimization\",\n          reviveChunks: \"chunk reviving\",\n          beforeChunkIds: \"before chunk ids\",\n          chunkIds: \"chunk ids\",\n          optimizeChunkIds: \"chunk id optimization\",\n          afterOptimizeChunkIds: \"after chunk id optimization\",\n          recordModules: \"record modules\",\n          recordChunks: \"record chunks\",\n          beforeModuleHash: \"module hashing\",\n          beforeCodeGeneration: \"code generation\",\n          beforeRuntimeRequirements: \"runtime requirements\",\n          beforeHash: \"hashing\",\n          afterHash: \"after hashing\",\n          recordHash: \"record hash\",\n          beforeModuleAssets: \"module assets processing\",\n          beforeChunkAssets: \"chunk assets processing\",\n          processAssets: \"asset processing\",\n          afterProcessAssets: \"after asset optimization\",\n          record: \"recording\",\n          afterSeal: \"after seal\"\n        };\n        var numberOfHooks = Object.keys(hooks).length;\n        Object.keys(hooks).forEach(function (name, idx) {\n          var title = hooks[name];\n          var percentage = idx / numberOfHooks * 0.25 + 0.7;\n          compilation.hooks[name].intercept({\n            name: \"ProgressPlugin\",\n            call: function call() {\n              handler(percentage, \"sealing\", title);\n            },\n            done: function done() {\n              progressReporters.set(compiler, undefined);\n              handler(percentage, \"sealing\", title);\n            },\n            result: function result() {\n              handler(percentage, \"sealing\", title);\n            },\n            error: function error() {\n              handler(percentage, \"sealing\", title);\n            },\n            tap: function tap(_tap) {\n              // p is percentage from 0 to 1\n              // args is any number of messages in a hierarchical matter\n              progressReporters.set(compilation.compiler, function (p) {\n                for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                  args[_key3 - 1] = arguments[_key3];\n                }\n\n                handler.apply(void 0, [percentage, \"sealing\", title, _tap.name].concat(args));\n              });\n              handler(percentage, \"sealing\", title, _tap.name);\n            }\n          });\n        });\n      });\n      compiler.hooks.make.intercept({\n        name: \"ProgressPlugin\",\n        call: function call() {\n          handler(0.1, \"building\");\n        },\n        done: function done() {\n          handler(0.65, \"building\");\n        }\n      });\n\n      var interceptHook = function interceptHook(hook, progress, category, name) {\n        hook.intercept({\n          name: \"ProgressPlugin\",\n          call: function call() {\n            handler(progress, category, name);\n          },\n          done: function done() {\n            progressReporters.set(compiler, undefined);\n            handler(progress, category, name);\n          },\n          result: function result() {\n            handler(progress, category, name);\n          },\n          error: function error() {\n            handler(progress, category, name);\n          },\n          tap: function tap(_tap2) {\n            progressReporters.set(compiler, function (p) {\n              for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                args[_key4 - 1] = arguments[_key4];\n              }\n\n              handler.apply(void 0, [progress, category, name, _tap2.name].concat(args));\n            });\n            handler(progress, category, name, _tap2.name);\n          }\n        });\n      };\n\n      compiler.cache.hooks.endIdle.intercept({\n        name: \"ProgressPlugin\",\n        call: function call() {\n          handler(0, \"\");\n        }\n      });\n      interceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n      compiler.hooks.initialize.intercept({\n        name: \"ProgressPlugin\",\n        call: function call() {\n          handler(0, \"\");\n        }\n      });\n      interceptHook(compiler.hooks.initialize, 0.01, \"setup\", \"initialize\");\n      interceptHook(compiler.hooks.beforeRun, 0.02, \"setup\", \"before run\");\n      interceptHook(compiler.hooks.run, 0.03, \"setup\", \"run\");\n      interceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n      interceptHook(compiler.hooks.normalModuleFactory, 0.04, \"setup\", \"normal module factory\");\n      interceptHook(compiler.hooks.contextModuleFactory, 0.05, \"setup\", \"context module factory\");\n      interceptHook(compiler.hooks.beforeCompile, 0.06, \"setup\", \"before compile\");\n      interceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n      interceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n      interceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n      interceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n      interceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n      interceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n      interceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n      compiler.hooks.done.intercept({\n        name: \"ProgressPlugin\",\n        done: function done() {\n          handler(0.99, \"\");\n        }\n      });\n      interceptHook(compiler.cache.hooks.storeBuildDependencies, 0.99, \"cache\", \"store build dependencies\");\n      interceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n      interceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n      interceptHook(compiler.hooks.watchClose, 0.99, \"end\", \"closing watch compilation\");\n      compiler.cache.hooks.beginIdle.intercept({\n        name: \"ProgressPlugin\",\n        done: function done() {\n          handler(1, \"\");\n        }\n      });\n      compiler.cache.hooks.shutdown.intercept({\n        name: \"ProgressPlugin\",\n        done: function done() {\n          handler(1, \"\");\n        }\n      });\n    }\n  }], [{\n    key: \"getReporter\",\n    value:\n    /**\n     * @param {Compiler} compiler the current compiler\n     * @returns {ReportProgress} a progress reporter, if any\n     */\n    function getReporter(compiler) {\n      return progressReporters.get(compiler);\n    }\n  }]);\n\n  return ProgressPlugin;\n}();\n\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 5000,\n  dependenciesCount: 10000,\n  modules: true,\n  dependencies: true,\n  activeModules: false,\n  entries: true\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ProgressPlugin.js"],"names":["Compiler","require","MultiCompiler","NormalModule","createSchemaValidation","contextify","validate","name","baseDataPath","median3","a","b","c","Math","max","min","createDefaultHandler","profile","logger","lastStateInfo","defaultHandler","percentage","msg","args","length","fullState","state","map","s","replace","now","Date","len","i","stateItem","undefined","lastStateItem","value","diff","time","reportState","stateMsg","repeat","d","error","warn","info","log","debug","status","floor","progressReporters","WeakMap","ProgressPlugin","options","handler","defaultOptions","modulesCount","dependenciesCount","showEntries","entries","showModules","modules","showDependencies","dependencies","showActiveModules","activeModules","percentBy","compiler","getInfrastructureLogger","_applyOnMultiCompiler","_applyOnCompiler","states","compilers","forEach","idx","p","sum","apply","lastActiveModule","currentLoader","lastModulesCount","lastDependenciesCount","lastEntriesCount","entriesCount","doneModules","doneDependencies","doneEntries","Set","lastUpdate","updateThrottled","update","items","percentByModules","percentByEntries","percentByDependencies","percentageFactor","push","context","root","statItems","size","join","factorizeAdd","factorizeDone","moduleAdd","moduleBuild","module","ident","identifier","add","entryAdd","entry","moduleDone","delete","m","entryDone","cache","getCache","getItemCache","cacheGetPromise","hooks","beforeCompile","tap","getPromise","then","data","err","afterCompile","tapPromise","compilation","isChild","Promise","resolve","oldData","storePromise","factorizeQueue","added","result","addModuleQueue","processDependenciesQueue","buildModule","addEntry","failedEntry","succeedEntry","__webpack_require__","requiredLoaders","getCompilationHooks","beforeLoaders","loaders","loader","type","has","finishModules","seal","optimizeDependencies","afterOptimizeDependencies","beforeChunks","afterChunks","optimize","optimizeModules","afterOptimizeModules","optimizeChunks","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModules","afterOptimizeChunkModules","reviveModules","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","beforeChunkIds","chunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeModuleHash","beforeCodeGeneration","beforeRuntimeRequirements","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","processAssets","afterProcessAssets","record","afterSeal","numberOfHooks","Object","keys","title","intercept","call","done","set","make","interceptHook","hook","progress","category","endIdle","initialize","beforeRun","run","watchRun","normalModuleFactory","contextModuleFactory","compile","thisCompilation","finishMake","emit","afterEmit","storeBuildDependencies","shutdown","beginIdle","watchClose","get","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\nconst MultiCompiler = require(\"./MultiCompiler\");\nconst NormalModule = require(\"./NormalModule\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\nconst { contextify } = require(\"./util/identifier\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").HandlerFunction} HandlerFunction */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/ProgressPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/ProgressPlugin.json\"),\n\t{\n\t\tname: \"Progress Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\nconst median3 = (a, b, c) => {\n\treturn a + b + c - Math.max(a, b, c) - Math.min(a, b, c);\n};\n\nconst createDefaultHandler = (profile, logger) => {\n\t/** @type {{ value: string, time: number }[]} */\n\tconst lastStateInfo = [];\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tif (profile) {\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastStateInfo.length = 0;\n\t\t\t}\n\t\t\tconst fullState = [msg, ...args];\n\t\t\tconst state = fullState.map(s => s.replace(/\\d+\\/\\d+ /g, \"\"));\n\t\t\tconst now = Date.now();\n\t\t\tconst len = Math.max(state.length, lastStateInfo.length);\n\t\t\tfor (let i = len; i >= 0; i--) {\n\t\t\t\tconst stateItem = i < state.length ? state[i] : undefined;\n\t\t\t\tconst lastStateItem =\n\t\t\t\t\ti < lastStateInfo.length ? lastStateInfo[i] : undefined;\n\t\t\t\tif (lastStateItem) {\n\t\t\t\t\tif (stateItem !== lastStateItem.value) {\n\t\t\t\t\t\tconst diff = now - lastStateItem.time;\n\t\t\t\t\t\tif (lastStateItem.value) {\n\t\t\t\t\t\t\tlet reportState = lastStateItem.value;\n\t\t\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\t\t\treportState = lastStateInfo[i - 1].value + \" > \" + reportState;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst stateMsg = `${\" | \".repeat(i)}${diff} ms ${reportState}`;\n\t\t\t\t\t\t\tconst d = diff;\n\t\t\t\t\t\t\t// This depends on timing so we ignore it for coverage\n\t\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (d > 10000) {\n\t\t\t\t\t\t\t\t\tlogger.error(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 1000) {\n\t\t\t\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 10) {\n\t\t\t\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t\t\t\t} else if (d > 5) {\n\t\t\t\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (stateItem === undefined) {\n\t\t\t\t\t\t\tlastStateInfo.length = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlastStateItem.value = stateItem;\n\t\t\t\t\t\t\tlastStateItem.time = now;\n\t\t\t\t\t\t\tlastStateInfo.length = i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlastStateInfo[i] = {\n\t\t\t\t\t\tvalue: stateItem,\n\t\t\t\t\t\ttime: now\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (percentage === 1 || (!msg && args.length === 0)) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\n/**\n * @callback ReportProgress\n * @param {number} p\n * @param {...string} [args]\n * @returns {void}\n */\n\n/** @type {WeakMap<Compiler,ReportProgress>} */\nconst progressReporters = new WeakMap();\n\nclass ProgressPlugin {\n\t/**\n\t * @param {Compiler} compiler the current compiler\n\t * @returns {ReportProgress} a progress reporter, if any\n\t */\n\tstatic getReporter(compiler) {\n\t\treturn progressReporters.get(compiler);\n\t}\n\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options = {}) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\tvalidate(options);\n\t\toptions = { ...ProgressPlugin.defaultOptions, ...options };\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.dependenciesCount = options.dependenciesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showDependencies = options.dependencies;\n\t\tthis.showActiveModules = options.activeModules;\n\t\tthis.percentBy = options.percentBy;\n\t}\n\n\t/**\n\t * @param {Compiler | MultiCompiler} compiler webpack compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tif (compiler instanceof MultiCompiler) {\n\t\t\tthis._applyOnMultiCompiler(compiler, handler);\n\t\t} else if (compiler instanceof Compiler) {\n\t\t\tthis._applyOnCompiler(compiler, handler);\n\t\t}\n\t}\n\n\t/**\n\t * @param {MultiCompiler} compiler webpack multi-compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnMultiCompiler(compiler, handler) {\n\t\tconst states = compiler.compilers.map(\n\t\t\t() => /** @type {[number, ...string[]]} */ ([0])\n\t\t);\n\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\tlet sum = 0;\n\t\t\t\tfor (const [p] of states) sum += p;\n\t\t\t\thandler(sum / states.length, `[${idx}] ${msg}`, ...args);\n\t\t\t}).apply(compiler);\n\t\t});\n\t}\n\n\t/**\n\t * @param {Compiler} compiler webpack compiler\n\t * @param {HandlerFunction} handler function that executes for every progress step\n\t * @returns {void}\n\t */\n\t_applyOnCompiler(compiler, handler) {\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showDependencies = this.showDependencies;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tlet lastActiveModule = \"\";\n\t\tlet currentLoader = \"\";\n\t\tlet lastModulesCount = 0;\n\t\tlet lastDependenciesCount = 0;\n\t\tlet lastEntriesCount = 0;\n\t\tlet modulesCount = 0;\n\t\tlet dependenciesCount = 0;\n\t\tlet entriesCount = 1;\n\t\tlet doneModules = 0;\n\t\tlet doneDependencies = 0;\n\t\tlet doneEntries = 0;\n\t\tconst activeModules = new Set();\n\t\tlet lastUpdate = 0;\n\n\t\tconst updateThrottled = () => {\n\t\t\tif (lastUpdate + 500 < Date.now()) update();\n\t\t};\n\n\t\tconst update = () => {\n\t\t\t/** @type {string[]} */\n\t\t\tconst items = [];\n\t\t\tconst percentByModules =\n\t\t\t\tdoneModules /\n\t\t\t\tMath.max(lastModulesCount || this.modulesCount || 1, modulesCount);\n\t\t\tconst percentByEntries =\n\t\t\t\tdoneEntries /\n\t\t\t\tMath.max(lastEntriesCount || this.dependenciesCount || 1, entriesCount);\n\t\t\tconst percentByDependencies =\n\t\t\t\tdoneDependencies /\n\t\t\t\tMath.max(lastDependenciesCount || 1, dependenciesCount);\n\t\t\tlet percentageFactor;\n\n\t\t\tswitch (this.percentBy) {\n\t\t\t\tcase \"entries\":\n\t\t\t\t\tpercentageFactor = percentByEntries;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"dependencies\":\n\t\t\t\t\tpercentageFactor = percentByDependencies;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"modules\":\n\t\t\t\t\tpercentageFactor = percentByModules;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tpercentageFactor = median3(\n\t\t\t\t\t\tpercentByModules,\n\t\t\t\t\t\tpercentByEntries,\n\t\t\t\t\t\tpercentByDependencies\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst percentage = 0.1 + percentageFactor * 0.55;\n\n\t\t\tif (currentLoader) {\n\t\t\t\titems.push(\n\t\t\t\t\t`import loader ${contextify(\n\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\tcurrentLoader,\n\t\t\t\t\t\tcompiler.root\n\t\t\t\t\t)}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst statItems = [];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\tstatItems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showDependencies) {\n\t\t\t\t\tstatItems.push(\n\t\t\t\t\t\t`${doneDependencies}/${dependenciesCount} dependencies`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\tstatItems.push(`${doneModules}/${modulesCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tstatItems.push(`${activeModules.size} active`);\n\t\t\t\t}\n\t\t\t\tif (statItems.length > 0) {\n\t\t\t\t\titems.push(statItems.join(\" \"));\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandler(percentage, \"building\", ...items);\n\t\t\tlastUpdate = Date.now();\n\t\t};\n\n\t\tconst factorizeAdd = () => {\n\t\t\tdependenciesCount++;\n\t\t\tif (dependenciesCount < 50 || dependenciesCount % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst factorizeDone = () => {\n\t\t\tdoneDependencies++;\n\t\t\tif (doneDependencies < 50 || doneDependencies % 100 === 0)\n\t\t\t\tupdateThrottled();\n\t\t};\n\n\t\tconst moduleAdd = () => {\n\t\t\tmodulesCount++;\n\t\t\tif (modulesCount < 50 || modulesCount % 100 === 0) updateThrottled();\n\t\t};\n\n\t\t// only used when showActiveModules is set\n\t\tconst moduleBuild = module => {\n\t\t\tconst ident = module.identifier();\n\t\t\tif (ident) {\n\t\t\t\tactiveModules.add(ident);\n\t\t\t\tlastActiveModule = ident;\n\t\t\t\tupdate();\n\t\t\t}\n\t\t};\n\n\t\tconst entryAdd = (entry, options) => {\n\t\t\tentriesCount++;\n\t\t\tif (entriesCount < 5 || entriesCount % 10 === 0) updateThrottled();\n\t\t};\n\n\t\tconst moduleDone = module => {\n\t\t\tdoneModules++;\n\t\t\tif (showActiveModules) {\n\t\t\t\tconst ident = module.identifier();\n\t\t\t\tif (ident) {\n\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (doneModules < 50 || doneModules % 100 === 0) updateThrottled();\n\t\t};\n\n\t\tconst entryDone = (entry, options) => {\n\t\t\tdoneEntries++;\n\t\t\tupdate();\n\t\t};\n\n\t\tconst cache = compiler\n\t\t\t.getCache(\"ProgressPlugin\")\n\t\t\t.getItemCache(\"counts\", null);\n\n\t\tlet cacheGetPromise;\n\n\t\tcompiler.hooks.beforeCompile.tap(\"ProgressPlugin\", () => {\n\t\t\tif (!cacheGetPromise) {\n\t\t\t\tcacheGetPromise = cache.getPromise().then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\tlastModulesCount = lastModulesCount || data.modulesCount;\n\t\t\t\t\t\t\tlastDependenciesCount =\n\t\t\t\t\t\t\t\tlastDependenciesCount || data.dependenciesCount;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\t// Ignore error\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tcompiler.hooks.afterCompile.tapPromise(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return Promise.resolve();\n\t\t\treturn cacheGetPromise.then(async oldData => {\n\t\t\t\tif (\n\t\t\t\t\t!oldData ||\n\t\t\t\t\toldData.modulesCount !== modulesCount ||\n\t\t\t\t\toldData.dependenciesCount !== dependenciesCount\n\t\t\t\t) {\n\t\t\t\t\tawait cache.storePromise({ modulesCount, dependenciesCount });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\tlastModulesCount = modulesCount;\n\t\t\tlastEntriesCount = entriesCount;\n\t\t\tlastDependenciesCount = dependenciesCount;\n\t\t\tmodulesCount = dependenciesCount = entriesCount = 0;\n\t\t\tdoneModules = doneDependencies = doneEntries = 0;\n\n\t\t\tcompilation.factorizeQueue.hooks.added.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeAdd\n\t\t\t);\n\t\t\tcompilation.factorizeQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tfactorizeDone\n\t\t\t);\n\n\t\t\tcompilation.addModuleQueue.hooks.added.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\tcompilation.processDependenciesQueue.hooks.result.tap(\n\t\t\t\t\"ProgressPlugin\",\n\t\t\t\tmoduleDone\n\t\t\t);\n\n\t\t\tif (showActiveModules) {\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleBuild);\n\t\t\t}\n\n\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t// avoid dynamic require if bundled with webpack\n\t\t\t// @ts-expect-error\n\t\t\tif (typeof __webpack_require__ !== \"function\") {\n\t\t\t\tconst requiredLoaders = new Set();\n\t\t\t\tNormalModule.getCompilationHooks(compilation).beforeLoaders.tap(\n\t\t\t\t\t\"ProgressPlugin\",\n\t\t\t\t\tloaders => {\n\t\t\t\t\t\tfor (const loader of loaders) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tloader.type !== \"module\" &&\n\t\t\t\t\t\t\t\t!requiredLoaders.has(loader.loader)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\trequiredLoaders.add(loader.loader);\n\t\t\t\t\t\t\t\tcurrentLoader = loader.loader;\n\t\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t\t\trequire(loader.loader);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (currentLoader) {\n\t\t\t\t\t\t\tcurrentLoader = \"\";\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst hooks = {\n\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\tseal: \"plugins\",\n\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\toptimize: \"optimizing\",\n\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\tchunkIds: \"chunk ids\",\n\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\trecordModules: \"record modules\",\n\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\tbeforeModuleHash: \"module hashing\",\n\t\t\t\tbeforeCodeGeneration: \"code generation\",\n\t\t\t\tbeforeRuntimeRequirements: \"runtime requirements\",\n\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\trecordHash: \"record hash\",\n\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\tprocessAssets: \"asset processing\",\n\t\t\t\tafterProcessAssets: \"after asset optimization\",\n\t\t\t\trecord: \"recording\",\n\t\t\t\tafterSeal: \"after seal\"\n\t\t\t};\n\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\tconst title = hooks[name];\n\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\tcall() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tdone() {\n\t\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\tresult() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\terror() {\n\t\t\t\t\t\thandler(percentage, \"sealing\", title);\n\t\t\t\t\t},\n\t\t\t\t\ttap(tap) {\n\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\tprogressReporters.set(compilation.compiler, (p, ...args) => {\n\t\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name, ...args);\n\t\t\t\t\t\t});\n\t\t\t\t\t\thandler(percentage, \"sealing\", title, tap.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tcompiler.hooks.make.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0.1, \"building\");\n\t\t\t},\n\t\t\tdone() {\n\t\t\t\thandler(0.65, \"building\");\n\t\t\t}\n\t\t});\n\t\tconst interceptHook = (hook, progress, category, name) => {\n\t\t\thook.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcall() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tdone() {\n\t\t\t\t\tprogressReporters.set(compiler, undefined);\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\tresult() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\terror() {\n\t\t\t\t\thandler(progress, category, name);\n\t\t\t\t},\n\t\t\t\ttap(tap) {\n\t\t\t\t\tprogressReporters.set(compiler, (p, ...args) => {\n\t\t\t\t\t\thandler(progress, category, name, tap.name, ...args);\n\t\t\t\t\t});\n\t\t\t\t\thandler(progress, category, name, tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tcompiler.cache.hooks.endIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.cache.hooks.endIdle, 0.01, \"cache\", \"end idle\");\n\t\tcompiler.hooks.initialize.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tcall() {\n\t\t\t\thandler(0, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(compiler.hooks.initialize, 0.01, \"setup\", \"initialize\");\n\t\tinterceptHook(compiler.hooks.beforeRun, 0.02, \"setup\", \"before run\");\n\t\tinterceptHook(compiler.hooks.run, 0.03, \"setup\", \"run\");\n\t\tinterceptHook(compiler.hooks.watchRun, 0.03, \"setup\", \"watch run\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.normalModuleFactory,\n\t\t\t0.04,\n\t\t\t\"setup\",\n\t\t\t\"normal module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.contextModuleFactory,\n\t\t\t0.05,\n\t\t\t\"setup\",\n\t\t\t\"context module factory\"\n\t\t);\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.beforeCompile,\n\t\t\t0.06,\n\t\t\t\"setup\",\n\t\t\t\"before compile\"\n\t\t);\n\t\tinterceptHook(compiler.hooks.compile, 0.07, \"setup\", \"compile\");\n\t\tinterceptHook(compiler.hooks.thisCompilation, 0.08, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.compilation, 0.09, \"setup\", \"compilation\");\n\t\tinterceptHook(compiler.hooks.finishMake, 0.69, \"building\", \"finish\");\n\t\tinterceptHook(compiler.hooks.emit, 0.95, \"emitting\", \"emit\");\n\t\tinterceptHook(compiler.hooks.afterEmit, 0.98, \"emitting\", \"after emit\");\n\t\tinterceptHook(compiler.hooks.done, 0.99, \"done\", \"plugins\");\n\t\tcompiler.hooks.done.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(0.99, \"\");\n\t\t\t}\n\t\t});\n\t\tinterceptHook(\n\t\t\tcompiler.cache.hooks.storeBuildDependencies,\n\t\t\t0.99,\n\t\t\t\"cache\",\n\t\t\t\"store build dependencies\"\n\t\t);\n\t\tinterceptHook(compiler.cache.hooks.shutdown, 0.99, \"cache\", \"shutdown\");\n\t\tinterceptHook(compiler.cache.hooks.beginIdle, 0.99, \"cache\", \"begin idle\");\n\t\tinterceptHook(\n\t\t\tcompiler.hooks.watchClose,\n\t\t\t0.99,\n\t\t\t\"end\",\n\t\t\t\"closing watch compilation\"\n\t\t);\n\t\tcompiler.cache.hooks.beginIdle.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t\tcompiler.cache.hooks.shutdown.intercept({\n\t\t\tname: \"ProgressPlugin\",\n\t\t\tdone() {\n\t\t\t\thandler(1, \"\");\n\t\t\t}\n\t\t});\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 5000,\n\tdependenciesCount: 10000,\n\tmodules: true,\n\tdependencies: true,\n\tactiveModules: false,\n\tentries: true\n};\n\nmodule.exports = ProgressPlugin;\n"]},"metadata":{},"sourceType":"script"}