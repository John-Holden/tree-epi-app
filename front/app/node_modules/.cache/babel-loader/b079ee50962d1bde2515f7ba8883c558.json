{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar makeSerializable = require(\"./makeSerializable.js\");\n/**\n * @template T\n * @param {Set<T>} targetSet set where items should be added\n * @param {Set<Iterable<T>>} toMerge iterables to be merged\n * @returns {void}\n */\n\n\nvar merge = function merge(targetSet, toMerge) {\n  var _iterator = _createForOfIteratorHelper(toMerge),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var set = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(set),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          targetSet.add(item);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * @template T\n * @param {Set<Iterable<T>>} targetSet set where iterables should be added\n * @param {Array<LazySet<T>>} toDeepMerge lazy sets to be flattened\n * @returns {void}\n */\n\n\nvar flatten = function flatten(targetSet, toDeepMerge) {\n  var _iterator3 = _createForOfIteratorHelper(toDeepMerge),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var set = _step3.value;\n      if (set._set.size > 0) targetSet.add(set._set);\n\n      if (set._needMerge) {\n        var _iterator4 = _createForOfIteratorHelper(set._toMerge),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var mergedSet = _step4.value;\n            targetSet.add(mergedSet);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        flatten(targetSet, set._toDeepMerge);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n};\n/**\n * Like Set but with an addAll method to eventually add items from another iterable.\n * Access methods make sure that all delayed operations are executed.\n * Iteration methods deopts to normal Set performance until clear is called again (because of the chance of modifications during iteration).\n * @template T\n */\n\n\nvar LazySet = /*#__PURE__*/function (_Symbol$iterator, _Symbol$toStringTag) {\n  /**\n   * @param {Iterable<T>=} iterable init iterable\n   */\n  function LazySet(iterable) {\n    _classCallCheck(this, LazySet);\n\n    /** @type {Set<T>} */\n    this._set = new Set(iterable);\n    /** @type {Set<Iterable<T>>} */\n\n    this._toMerge = new Set();\n    /** @type {Array<LazySet<T>>} */\n\n    this._toDeepMerge = [];\n    this._needMerge = false;\n    this._deopt = false;\n  }\n\n  _createClass(LazySet, [{\n    key: \"_flatten\",\n    value: function _flatten() {\n      flatten(this._toMerge, this._toDeepMerge);\n      this._toDeepMerge.length = 0;\n    }\n  }, {\n    key: \"_merge\",\n    value: function _merge() {\n      this._flatten();\n\n      merge(this._set, this._toMerge);\n\n      this._toMerge.clear();\n\n      this._needMerge = false;\n    }\n  }, {\n    key: \"_isEmpty\",\n    value: function _isEmpty() {\n      return this._set.size === 0 && this._toMerge.size === 0 && this._toDeepMerge.length === 0;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._needMerge) this._merge();\n      return this._set.size;\n    }\n    /**\n     * @param {T} item an item\n     * @returns {this} itself\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      this._set.add(item);\n\n      return this;\n    }\n    /**\n     * @param {Iterable<T> | LazySet<T>} iterable a immutable iterable or another immutable LazySet which will eventually be merged into the Set\n     * @returns {this} itself\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function addAll(iterable) {\n      if (this._deopt) {\n        var _set = this._set;\n\n        var _iterator5 = _createForOfIteratorHelper(iterable),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var item = _step5.value;\n\n            _set.add(item);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      } else {\n        if (iterable instanceof LazySet) {\n          if (iterable._isEmpty()) return this;\n\n          this._toDeepMerge.push(iterable);\n\n          this._needMerge = true;\n\n          if (this._toDeepMerge.length > 100000) {\n            this._flatten();\n          }\n        } else {\n          this._toMerge.add(iterable);\n\n          this._needMerge = true;\n        }\n\n        if (this._toMerge.size > 100000) this._merge();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._set.clear();\n\n      this._toMerge.clear();\n\n      this._toDeepMerge.length = 0;\n      this._needMerge = false;\n      this._deopt = false;\n    }\n    /**\n     * @param {T} value an item\n     * @returns {boolean} true, if the value was in the Set before\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      if (this._needMerge) this._merge();\n      return this._set.delete(value);\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      this._deopt = true;\n      if (this._needMerge) this._merge();\n      return this._set.entries();\n    }\n    /**\n     * @param {function(T, T, Set<T>): void} callbackFn function called for each entry\n     * @param {any} thisArg this argument for the callbackFn\n     * @returns {void}\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackFn, thisArg) {\n      this._deopt = true;\n      if (this._needMerge) this._merge();\n\n      this._set.forEach(callbackFn, thisArg);\n    }\n    /**\n     * @param {T} item an item\n     * @returns {boolean} true, when the item is in the Set\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(item) {\n      if (this._needMerge) this._merge();\n      return this._set.has(item);\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this._deopt = true;\n      if (this._needMerge) this._merge();\n      return this._set.keys();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      this._deopt = true;\n      if (this._needMerge) this._merge();\n      return this._set.values();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      this._deopt = true;\n      if (this._needMerge) this._merge();\n      return this._set[Symbol.iterator]();\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"LazySet\";\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(_ref) {\n      var write = _ref.write;\n      if (this._needMerge) this._merge();\n      write(this._set.size);\n\n      var _iterator6 = _createForOfIteratorHelper(this._set),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var item = _step6.value;\n          write(item);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(_ref2) {\n      var read = _ref2.read;\n      var count = read();\n      var items = [];\n\n      for (var i = 0; i < count; i++) {\n        items.push(read());\n      }\n\n      return new LazySet(items);\n    }\n  }]);\n\n  return LazySet;\n}(Symbol.iterator, Symbol.toStringTag);\n\nmakeSerializable(LazySet, \"webpack/lib/util/LazySet\");\nmodule.exports = LazySet;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/util/LazySet.js"],"names":["makeSerializable","require","merge","targetSet","toMerge","set","item","add","flatten","toDeepMerge","_set","size","_needMerge","_toMerge","mergedSet","_toDeepMerge","LazySet","iterable","Set","_deopt","length","_flatten","clear","_merge","_isEmpty","push","value","delete","entries","callbackFn","thisArg","forEach","has","keys","values","Symbol","iterator","write","read","count","items","i","toStringTag","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./makeSerializable.js\");\n\n/**\n * @template T\n * @param {Set<T>} targetSet set where items should be added\n * @param {Set<Iterable<T>>} toMerge iterables to be merged\n * @returns {void}\n */\nconst merge = (targetSet, toMerge) => {\n\tfor (const set of toMerge) {\n\t\tfor (const item of set) {\n\t\t\ttargetSet.add(item);\n\t\t}\n\t}\n};\n\n/**\n * @template T\n * @param {Set<Iterable<T>>} targetSet set where iterables should be added\n * @param {Array<LazySet<T>>} toDeepMerge lazy sets to be flattened\n * @returns {void}\n */\nconst flatten = (targetSet, toDeepMerge) => {\n\tfor (const set of toDeepMerge) {\n\t\tif (set._set.size > 0) targetSet.add(set._set);\n\t\tif (set._needMerge) {\n\t\t\tfor (const mergedSet of set._toMerge) {\n\t\t\t\ttargetSet.add(mergedSet);\n\t\t\t}\n\t\t\tflatten(targetSet, set._toDeepMerge);\n\t\t}\n\t}\n};\n\n/**\n * Like Set but with an addAll method to eventually add items from another iterable.\n * Access methods make sure that all delayed operations are executed.\n * Iteration methods deopts to normal Set performance until clear is called again (because of the chance of modifications during iteration).\n * @template T\n */\nclass LazySet {\n\t/**\n\t * @param {Iterable<T>=} iterable init iterable\n\t */\n\tconstructor(iterable) {\n\t\t/** @type {Set<T>} */\n\t\tthis._set = new Set(iterable);\n\t\t/** @type {Set<Iterable<T>>} */\n\t\tthis._toMerge = new Set();\n\t\t/** @type {Array<LazySet<T>>} */\n\t\tthis._toDeepMerge = [];\n\t\tthis._needMerge = false;\n\t\tthis._deopt = false;\n\t}\n\n\t_flatten() {\n\t\tflatten(this._toMerge, this._toDeepMerge);\n\t\tthis._toDeepMerge.length = 0;\n\t}\n\n\t_merge() {\n\t\tthis._flatten();\n\t\tmerge(this._set, this._toMerge);\n\t\tthis._toMerge.clear();\n\t\tthis._needMerge = false;\n\t}\n\n\t_isEmpty() {\n\t\treturn (\n\t\t\tthis._set.size === 0 &&\n\t\t\tthis._toMerge.size === 0 &&\n\t\t\tthis._toDeepMerge.length === 0\n\t\t);\n\t}\n\n\tget size() {\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.size;\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {this} itself\n\t */\n\tadd(item) {\n\t\tthis._set.add(item);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @param {Iterable<T> | LazySet<T>} iterable a immutable iterable or another immutable LazySet which will eventually be merged into the Set\n\t * @returns {this} itself\n\t */\n\taddAll(iterable) {\n\t\tif (this._deopt) {\n\t\t\tconst _set = this._set;\n\t\t\tfor (const item of iterable) {\n\t\t\t\t_set.add(item);\n\t\t\t}\n\t\t} else {\n\t\t\tif (iterable instanceof LazySet) {\n\t\t\t\tif (iterable._isEmpty()) return this;\n\t\t\t\tthis._toDeepMerge.push(iterable);\n\t\t\t\tthis._needMerge = true;\n\t\t\t\tif (this._toDeepMerge.length > 100000) {\n\t\t\t\t\tthis._flatten();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._toMerge.add(iterable);\n\t\t\t\tthis._needMerge = true;\n\t\t\t}\n\t\t\tif (this._toMerge.size > 100000) this._merge();\n\t\t}\n\t\treturn this;\n\t}\n\n\tclear() {\n\t\tthis._set.clear();\n\t\tthis._toMerge.clear();\n\t\tthis._toDeepMerge.length = 0;\n\t\tthis._needMerge = false;\n\t\tthis._deopt = false;\n\t}\n\n\t/**\n\t * @param {T} value an item\n\t * @returns {boolean} true, if the value was in the Set before\n\t */\n\tdelete(value) {\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.delete(value);\n\t}\n\n\tentries() {\n\t\tthis._deopt = true;\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.entries();\n\t}\n\n\t/**\n\t * @param {function(T, T, Set<T>): void} callbackFn function called for each entry\n\t * @param {any} thisArg this argument for the callbackFn\n\t * @returns {void}\n\t */\n\tforEach(callbackFn, thisArg) {\n\t\tthis._deopt = true;\n\t\tif (this._needMerge) this._merge();\n\t\tthis._set.forEach(callbackFn, thisArg);\n\t}\n\n\t/**\n\t * @param {T} item an item\n\t * @returns {boolean} true, when the item is in the Set\n\t */\n\thas(item) {\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.has(item);\n\t}\n\n\tkeys() {\n\t\tthis._deopt = true;\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.keys();\n\t}\n\n\tvalues() {\n\t\tthis._deopt = true;\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set.values();\n\t}\n\n\t[Symbol.iterator]() {\n\t\tthis._deopt = true;\n\t\tif (this._needMerge) this._merge();\n\t\treturn this._set[Symbol.iterator]();\n\t}\n\n\t/* istanbul ignore next */\n\tget [Symbol.toStringTag]() {\n\t\treturn \"LazySet\";\n\t}\n\n\tserialize({ write }) {\n\t\tif (this._needMerge) this._merge();\n\t\twrite(this._set.size);\n\t\tfor (const item of this._set) write(item);\n\t}\n\n\tstatic deserialize({ read }) {\n\t\tconst count = read();\n\t\tconst items = [];\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\titems.push(read());\n\t\t}\n\t\treturn new LazySet(items);\n\t}\n}\n\nmakeSerializable(LazySet, \"webpack/lib/util/LazySet\");\n\nmodule.exports = LazySet;\n"]},"metadata":{},"sourceType":"script"}