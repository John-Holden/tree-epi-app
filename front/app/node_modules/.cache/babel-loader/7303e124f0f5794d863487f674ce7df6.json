{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/SetHelpers\"),\n    find = _require.find;\n\nvar _require2 = require(\"../util/comparators\"),\n    compareModulesByPreOrderIndexOrIdentifier = _require2.compareModulesByPreOrderIndexOrIdentifier,\n    compareModulesByPostOrderIndexOrIdentifier = _require2.compareModulesByPostOrderIndexOrIdentifier;\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar ChunkModuleIdRangePlugin = /*#__PURE__*/function () {\n  function ChunkModuleIdRangePlugin(options) {\n    _classCallCheck(this, ChunkModuleIdRangePlugin);\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(ChunkModuleIdRangePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"ChunkModuleIdRangePlugin\", function (compilation) {\n        var moduleGraph = compilation.moduleGraph;\n        compilation.hooks.moduleIds.tap(\"ChunkModuleIdRangePlugin\", function (modules) {\n          var chunkGraph = compilation.chunkGraph;\n          var chunk = find(compilation.chunks, function (chunk) {\n            return chunk.name === options.name;\n          });\n\n          if (!chunk) {\n            throw new Error(\"ChunkModuleIdRangePlugin: Chunk with name '\".concat(options.name, \"\\\"' was not found\"));\n          }\n\n          var chunkModules;\n\n          if (options.order) {\n            var cmpFn;\n\n            switch (options.order) {\n              case \"index\":\n              case \"preOrderIndex\":\n                cmpFn = compareModulesByPreOrderIndexOrIdentifier(moduleGraph);\n                break;\n\n              case \"index2\":\n              case \"postOrderIndex\":\n                cmpFn = compareModulesByPostOrderIndexOrIdentifier(moduleGraph);\n                break;\n\n              default:\n                throw new Error(\"ChunkModuleIdRangePlugin: unexpected value of order\");\n            }\n\n            chunkModules = chunkGraph.getOrderedChunkModules(chunk, cmpFn);\n          } else {\n            chunkModules = Array.from(modules).filter(function (m) {\n              return chunkGraph.isModuleInChunk(m, chunk);\n            }).sort(compareModulesByPreOrderIndexOrIdentifier(moduleGraph));\n          }\n\n          var currentId = options.start || 0;\n\n          for (var i = 0; i < chunkModules.length; i++) {\n            var m = chunkModules[i];\n\n            if (m.needId && chunkGraph.getModuleId(m) === null) {\n              chunkGraph.setModuleId(m, currentId++);\n            }\n\n            if (options.end && currentId > options.end) break;\n          }\n        });\n      });\n    }\n  }]);\n\n  return ChunkModuleIdRangePlugin;\n}();\n\nmodule.exports = ChunkModuleIdRangePlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/ChunkModuleIdRangePlugin.js"],"names":["require","find","compareModulesByPreOrderIndexOrIdentifier","compareModulesByPostOrderIndexOrIdentifier","ChunkModuleIdRangePlugin","options","compiler","hooks","compilation","tap","moduleGraph","moduleIds","modules","chunkGraph","chunk","chunks","name","Error","chunkModules","order","cmpFn","getOrderedChunkModules","Array","from","filter","m","isModuleInChunk","sort","currentId","start","i","length","needId","getModuleId","setModuleId","end","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,eAAiBA,OAAO,CAAC,oBAAD,CAAxB;AAAA,IAAQC,IAAR,YAAQA,IAAR;;AACA,gBAGID,OAAO,CAAC,qBAAD,CAHX;AAAA,IACCE,yCADD,aACCA,yCADD;AAAA,IAECC,0CAFD,aAECA,0CAFD;AAKA;;;IAEMC,wB;AACL,oCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AACf,UAAMD,OAAO,GAAG,KAAKA,OAArB;AACAC,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,0BAA/B,EAA2D,UAAAD,WAAW,EAAI;AACzE,YAAME,WAAW,GAAGF,WAAW,CAACE,WAAhC;AACAF,QAAAA,WAAW,CAACD,KAAZ,CAAkBI,SAAlB,CAA4BF,GAA5B,CAAgC,0BAAhC,EAA4D,UAAAG,OAAO,EAAI;AACtE,cAAMC,UAAU,GAAGL,WAAW,CAACK,UAA/B;AACA,cAAMC,KAAK,GAAGb,IAAI,CACjBO,WAAW,CAACO,MADK,EAEjB,UAAAD,KAAK;AAAA,mBAAIA,KAAK,CAACE,IAAN,KAAeX,OAAO,CAACW,IAA3B;AAAA,WAFY,CAAlB;;AAIA,cAAI,CAACF,KAAL,EAAY;AACX,kBAAM,IAAIG,KAAJ,sDACyCZ,OAAO,CAACW,IADjD,uBAAN;AAGA;;AAED,cAAIE,YAAJ;;AACA,cAAIb,OAAO,CAACc,KAAZ,EAAmB;AAClB,gBAAIC,KAAJ;;AACA,oBAAQf,OAAO,CAACc,KAAhB;AACC,mBAAK,OAAL;AACA,mBAAK,eAAL;AACCC,gBAAAA,KAAK,GAAGlB,yCAAyC,CAACQ,WAAD,CAAjD;AACA;;AACD,mBAAK,QAAL;AACA,mBAAK,gBAAL;AACCU,gBAAAA,KAAK,GAAGjB,0CAA0C,CAACO,WAAD,CAAlD;AACA;;AACD;AACC,sBAAM,IAAIO,KAAJ,CACL,qDADK,CAAN;AAVF;;AAcAC,YAAAA,YAAY,GAAGL,UAAU,CAACQ,sBAAX,CAAkCP,KAAlC,EAAyCM,KAAzC,CAAf;AACA,WAjBD,MAiBO;AACNF,YAAAA,YAAY,GAAGI,KAAK,CAACC,IAAN,CAAWX,OAAX,EACbY,MADa,CACN,UAAAC,CAAC,EAAI;AACZ,qBAAOZ,UAAU,CAACa,eAAX,CAA2BD,CAA3B,EAA8BX,KAA9B,CAAP;AACA,aAHa,EAIba,IAJa,CAIRzB,yCAAyC,CAACQ,WAAD,CAJjC,CAAf;AAKA;;AAED,cAAIkB,SAAS,GAAGvB,OAAO,CAACwB,KAAR,IAAiB,CAAjC;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,YAAY,CAACa,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC7C,gBAAML,CAAC,GAAGP,YAAY,CAACY,CAAD,CAAtB;;AACA,gBAAIL,CAAC,CAACO,MAAF,IAAYnB,UAAU,CAACoB,WAAX,CAAuBR,CAAvB,MAA8B,IAA9C,EAAoD;AACnDZ,cAAAA,UAAU,CAACqB,WAAX,CAAuBT,CAAvB,EAA0BG,SAAS,EAAnC;AACA;;AACD,gBAAIvB,OAAO,CAAC8B,GAAR,IAAeP,SAAS,GAAGvB,OAAO,CAAC8B,GAAvC,EAA4C;AAC5C;AACD,SA9CD;AA+CA,OAjDD;AAkDA;;;;;;AAEFC,MAAM,CAACC,OAAP,GAAiBjC,wBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { find } = require(\"../util/SetHelpers\");\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier,\n\tcompareModulesByPostOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkModuleIdRangePlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"ChunkModuleIdRangePlugin\", compilation => {\n\t\t\tconst moduleGraph = compilation.moduleGraph;\n\t\t\tcompilation.hooks.moduleIds.tap(\"ChunkModuleIdRangePlugin\", modules => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst chunk = find(\n\t\t\t\t\tcompilation.chunks,\n\t\t\t\t\tchunk => chunk.name === options.name\n\t\t\t\t);\n\t\t\t\tif (!chunk) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`ChunkModuleIdRangePlugin: Chunk with name '${options.name}\"' was not found`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tlet chunkModules;\n\t\t\t\tif (options.order) {\n\t\t\t\t\tlet cmpFn;\n\t\t\t\t\tswitch (options.order) {\n\t\t\t\t\t\tcase \"index\":\n\t\t\t\t\t\tcase \"preOrderIndex\":\n\t\t\t\t\t\t\tcmpFn = compareModulesByPreOrderIndexOrIdentifier(moduleGraph);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"index2\":\n\t\t\t\t\t\tcase \"postOrderIndex\":\n\t\t\t\t\t\t\tcmpFn = compareModulesByPostOrderIndexOrIdentifier(moduleGraph);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\"ChunkModuleIdRangePlugin: unexpected value of order\"\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tchunkModules = chunkGraph.getOrderedChunkModules(chunk, cmpFn);\n\t\t\t\t} else {\n\t\t\t\t\tchunkModules = Array.from(modules)\n\t\t\t\t\t\t.filter(m => {\n\t\t\t\t\t\t\treturn chunkGraph.isModuleInChunk(m, chunk);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.sort(compareModulesByPreOrderIndexOrIdentifier(moduleGraph));\n\t\t\t\t}\n\n\t\t\t\tlet currentId = options.start || 0;\n\t\t\t\tfor (let i = 0; i < chunkModules.length; i++) {\n\t\t\t\t\tconst m = chunkModules[i];\n\t\t\t\t\tif (m.needId && chunkGraph.getModuleId(m) === null) {\n\t\t\t\t\t\tchunkGraph.setModuleId(m, currentId++);\n\t\t\t\t\t}\n\t\t\t\t\tif (options.end && currentId > options.end) break;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\nmodule.exports = ChunkModuleIdRangePlugin;\n"]},"metadata":{},"sourceType":"script"}