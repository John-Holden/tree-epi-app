{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource,\n    PrefixSource = _require.PrefixSource;\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\n\nvar START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nvar START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nvar DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nvar NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\n\nvar NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\n\nvar FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nvar INDENT_MULTILINE_REGEX = /^\\t/gm;\nvar LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nvar IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nvar IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nvar COMMENT_END_REGEX = /\\*\\//g;\nvar PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nvar MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\nvar Template = /*#__PURE__*/function () {\n  function Template() {\n    _classCallCheck(this, Template);\n  }\n\n  _createClass(Template, null, [{\n    key: \"getFunctionContent\",\n    value:\n    /**\n     *\n     * @param {Function} fn a runtime function (.runtime.js) \"template\"\n     * @returns {string} the updated and normalized function string\n     */\n    function getFunctionContent(fn) {\n      return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n    }\n    /**\n     * @param {string} str the string converted to identifier\n     * @returns {string} created identifier\n     */\n\n  }, {\n    key: \"toIdentifier\",\n    value: function toIdentifier(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to commented in bundle code\n     * @returns {string} returns a commented version of string\n     */\n\n  }, {\n    key: \"toComment\",\n    value: function toComment(str) {\n      if (!str) return \"\";\n      return \"/*! \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to \"normal comment\"\n     * @returns {string} returns a commented version of string\n     */\n\n  }, {\n    key: \"toNormalComment\",\n    value: function toNormalComment(str) {\n      if (!str) return \"\";\n      return \"/* \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n    /**\n     * @param {string} str string path to be normalized\n     * @returns {string} normalized bundle-safe path\n     */\n\n  }, {\n    key: \"toPath\",\n    value: function toPath(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n    } // map number to a single character a-z, A-Z or multiple characters if number is too big\n\n    /**\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n\n  }, {\n    key: \"numberToIdentifier\",\n    value: function numberToIdentifier(n) {\n      if (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n        // use multiple letters\n        return Template.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS));\n      } // lower case\n\n\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      }\n\n      n -= DELTA_A_TO_Z; // upper case\n\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n      }\n\n      if (n === DELTA_A_TO_Z) return \"_\";\n      return \"$\";\n    }\n    /**\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n\n  }, {\n    key: \"numberToIdentifierContinuation\",\n    value: function numberToIdentifierContinuation(n) {\n      if (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n        // use multiple letters\n        return Template.numberToIdentifierContinuation(n % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS));\n      } // lower case\n\n\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      }\n\n      n -= DELTA_A_TO_Z; // upper case\n\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n      }\n\n      n -= DELTA_A_TO_Z; // numbers\n\n      if (n < 10) {\n        return \"\".concat(n);\n      }\n\n      if (n === 10) return \"_\";\n      return \"$\";\n    }\n    /**\n     *\n     * @param {string | string[]} s string to convert to identity\n     * @returns {string} converted identity\n     */\n\n  }, {\n    key: \"indent\",\n    value: function indent(s) {\n      if (Array.isArray(s)) {\n        return s.map(Template.indent).join(\"\\n\");\n      } else {\n        var str = s.trimRight();\n        if (!str) return \"\";\n        var ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n        return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n      }\n    }\n    /**\n     *\n     * @param {string|string[]} s string to create prefix for\n     * @param {string} prefix prefix to compose\n     * @returns {string} returns new prefix string\n     */\n\n  }, {\n    key: \"prefix\",\n    value: function prefix(s, _prefix) {\n      var str = Template.asString(s).trim();\n      if (!str) return \"\";\n      var ind = str[0] === \"\\n\" ? \"\" : _prefix;\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + _prefix + \"$1\");\n    }\n    /**\n     *\n     * @param {string|string[]} str string or string collection\n     * @returns {string} returns a single string from array\n     */\n\n  }, {\n    key: \"asString\",\n    value: function asString(str) {\n      if (Array.isArray(str)) {\n        return str.join(\"\\n\");\n      }\n\n      return str;\n    }\n    /**\n     * @typedef {Object} WithId\n     * @property {string|number} id\n     */\n\n    /**\n     * @param {WithId[]} modules a collection of modules to get array bounds for\n     * @returns {[number, number] | false} returns the upper and lower array bounds\n     * or false if not every module has a number based id\n     */\n\n  }, {\n    key: \"getModulesArrayBounds\",\n    value: function getModulesArrayBounds(modules) {\n      var maxId = -Infinity;\n      var minId = Infinity;\n\n      var _iterator = _createForOfIteratorHelper(modules),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _module = _step.value;\n          var moduleId = _module.id;\n          if (typeof moduleId !== \"number\") return false;\n          if (maxId < moduleId) maxId = moduleId;\n          if (minId > moduleId) minId = moduleId;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (minId < 16 + (\"\" + minId).length) {\n        // add minId x ',' instead of 'Array(minId).concat(…)'\n        minId = 0;\n      } // start with -1 because the first module needs no comma\n\n\n      var objectOverhead = -1;\n\n      var _iterator2 = _createForOfIteratorHelper(modules),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _module2 = _step2.value;\n          // module id + colon + comma\n          objectOverhead += \"\".concat(_module2.id).length + 2;\n        } // number of commas, or when starting non-zero the length of Array(minId).concat()\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var arrayOverhead = minId === 0 ? maxId : 16 + \"\".concat(minId).length + maxId;\n      return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n    }\n    /**\n     * @param {ChunkRenderContext} renderContext render context\n     * @param {Module[]} modules modules to render (should be ordered by identifier)\n     * @param {function(Module): Source} renderModule function to render a module\n     * @param {string=} prefix applying prefix strings\n     * @returns {Source} rendered chunk modules in a Source object\n     */\n\n  }, {\n    key: \"renderChunkModules\",\n    value: function renderChunkModules(renderContext, modules, renderModule) {\n      var prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n      var chunkGraph = renderContext.chunkGraph;\n      var source = new ConcatSource();\n\n      if (modules.length === 0) {\n        return null;\n      }\n      /** @type {{id: string|number, source: Source|string}[]} */\n\n\n      var allModules = modules.map(function (module) {\n        return {\n          id: chunkGraph.getModuleId(module),\n          source: renderModule(module) || \"false\"\n        };\n      });\n      var bounds = Template.getModulesArrayBounds(allModules);\n\n      if (bounds) {\n        // Render a spare array\n        var minId = bounds[0];\n        var maxId = bounds[1];\n\n        if (minId !== 0) {\n          source.add(\"Array(\".concat(minId, \").concat(\"));\n        }\n\n        source.add(\"[\\n\");\n        /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\n        var _modules = new Map();\n\n        var _iterator3 = _createForOfIteratorHelper(allModules),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _module4 = _step3.value;\n\n            _modules.set(_module4.id, _module4);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        for (var idx = minId; idx <= maxId; idx++) {\n          var _module3 = _modules.get(idx);\n\n          if (idx !== minId) {\n            source.add(\",\\n\");\n          }\n\n          source.add(\"/* \".concat(idx, \" */\"));\n\n          if (_module3) {\n            source.add(\"\\n\");\n            source.add(_module3.source);\n          }\n        }\n\n        source.add(\"\\n\" + prefix + \"]\");\n\n        if (minId !== 0) {\n          source.add(\")\");\n        }\n      } else {\n        // Render an object\n        source.add(\"{\\n\");\n\n        for (var i = 0; i < allModules.length; i++) {\n          var _module5 = allModules[i];\n\n          if (i !== 0) {\n            source.add(\",\\n\");\n          }\n\n          source.add(\"\\n/***/ \".concat(JSON.stringify(_module5.id), \":\\n\"));\n          source.add(_module5.source);\n        }\n\n        source.add(\"\\n\\n\".concat(prefix, \"}\"));\n      }\n\n      return source;\n    }\n    /**\n     * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n     * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n     * @returns {Source} rendered runtime modules in a Source object\n     */\n\n  }, {\n    key: \"renderRuntimeModules\",\n    value: function renderRuntimeModules(runtimeModules, renderContext) {\n      var source = new ConcatSource();\n\n      var _iterator4 = _createForOfIteratorHelper(runtimeModules),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _module6 = _step4.value;\n          var codeGenerationResults = renderContext.codeGenerationResults;\n          var runtimeSource = void 0;\n\n          if (codeGenerationResults) {\n            runtimeSource = codeGenerationResults.getSource(_module6, renderContext.chunk.runtime, \"runtime\");\n          } else {\n            var codeGenResult = _module6.codeGeneration({\n              chunkGraph: renderContext.chunkGraph,\n              dependencyTemplates: renderContext.dependencyTemplates,\n              moduleGraph: renderContext.moduleGraph,\n              runtimeTemplate: renderContext.runtimeTemplate,\n              runtime: renderContext.chunk.runtime,\n              codeGenerationResults: codeGenerationResults\n            });\n\n            if (!codeGenResult) continue;\n            runtimeSource = codeGenResult.sources.get(\"runtime\");\n          }\n\n          if (runtimeSource) {\n            source.add(Template.toNormalComment(_module6.identifier()) + \"\\n\");\n\n            if (!_module6.shouldIsolate()) {\n              source.add(runtimeSource);\n              source.add(\"\\n\\n\");\n            } else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n              source.add(\"(() => {\\n\");\n              source.add(new PrefixSource(\"\\t\", runtimeSource));\n              source.add(\"\\n})();\\n\\n\");\n            } else {\n              source.add(\"!function() {\\n\");\n              source.add(new PrefixSource(\"\\t\", runtimeSource));\n              source.add(\"\\n}();\\n\\n\");\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return source;\n    }\n    /**\n     * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n     * @param {RenderContext} renderContext render context\n     * @returns {Source} rendered chunk runtime modules in a Source object\n     */\n\n  }, {\n    key: \"renderChunkRuntimeModules\",\n    value: function renderChunkRuntimeModules(runtimeModules, renderContext) {\n      return new PrefixSource(\"/******/ \", new ConcatSource(\"function(__webpack_require__) { // webpackRuntimeModules\\n\", this.renderRuntimeModules(runtimeModules, renderContext), \"}\\n\"));\n    }\n  }]);\n\n  return Template;\n}();\n\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/Template.js"],"names":["require","ConcatSource","PrefixSource","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","NUMBER_OF_IDENTIFIER_START_CHARS","NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","Template","fn","toString","replace","str","n","numberToIdentifier","numberToIdentifierContinuation","Math","floor","String","fromCharCode","s","Array","isArray","map","indent","join","trimRight","ind","prefix","asString","trim","modules","maxId","Infinity","minId","module","moduleId","id","length","objectOverhead","arrayOverhead","renderContext","renderModule","chunkGraph","source","allModules","getModuleId","bounds","getModulesArrayBounds","add","Map","set","idx","get","i","JSON","stringify","runtimeModules","codeGenerationResults","runtimeSource","getSource","chunk","runtime","codeGenResult","codeGeneration","dependencyTemplates","moduleGraph","runtimeTemplate","sources","toNormalComment","identifier","shouldIsolate","supportsArrowFunction","renderRuntimeModules","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\n * @typedef {Object} RenderManifestOptions\n * @property {Chunk} chunk the chunk used to render\n * @property {string} hash\n * @property {string} fullHash\n * @property {OutputOptions} outputOptions\n * @property {CodeGenerationResults} codeGenerationResults\n * @property {{javascript: ModuleTemplate}} moduleTemplates\n * @property {DependencyTemplates} dependencyTemplates\n * @property {RuntimeTemplate} runtimeTemplate\n * @property {ModuleGraph} moduleGraph\n * @property {ChunkGraph} chunkGraph\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\n * @typedef {Object} RenderManifestEntryTemplated\n * @property {function(): Source} render\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\n * @property {PathData=} pathOptions\n * @property {AssetInfo=} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} RenderManifestEntryStatic\n * @property {function(): Source} render\n * @property {string} filename\n * @property {AssetInfo} info\n * @property {string} identifier\n * @property {string=} hash\n * @property {boolean=} auxiliary\n */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or multiple characters if number is too big\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifier(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\tif (n === DELTA_A_TO_Z) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifierContinuation(n) {\n\t\tif (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n\t\t\t// use multiple letters\n\t\t\treturn (\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tn % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS\n\t\t\t\t) +\n\t\t\t\tTemplate.numberToIdentifierContinuation(\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n\t\t}\n\t\tn -= DELTA_A_TO_Z;\n\n\t\t// numbers\n\t\tif (n < 10) {\n\t\t\treturn `${n}`;\n\t\t}\n\n\t\tif (n === 10) return \"_\";\n\t\treturn \"$\";\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimRight();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tconst moduleId = module.id;\n\t\t\tif (typeof moduleId !== \"number\") return false;\n\t\t\tif (maxId < moduleId) maxId = moduleId;\n\t\t\tif (minId > moduleId) minId = moduleId;\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\t// start with -1 because the first module needs no comma\n\t\tlet objectOverhead = -1;\n\t\tfor (const module of modules) {\n\t\t\t// module id + colon + comma\n\t\t\tobjectOverhead += `${module.id}`.length + 2;\n\t\t}\n\t\t// number of commas, or when starting non-zero the length of Array(minId).concat()\n\t\tconst arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {ChunkRenderContext} renderContext render context\n\t * @param {Module[]} modules modules to render (should be ordered by identifier)\n\t * @param {function(Module): Source} renderModule function to render a module\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {Source} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(renderContext, modules, renderModule, prefix = \"\") {\n\t\tconst { chunkGraph } = renderContext;\n\t\tvar source = new ConcatSource();\n\t\tif (modules.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: chunkGraph.getModuleId(module),\n\t\t\t\tsource: renderModule(module) || \"false\"\n\t\t\t};\n\t\t});\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tfor (let i = 0; i < allModules.length; i++) {\n\t\t\t\tconst module = allModules[i];\n\t\t\t\tif (i !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t}\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\n\t * @returns {Source} rendered runtime modules in a Source object\n\t */\n\tstatic renderRuntimeModules(runtimeModules, renderContext) {\n\t\tconst source = new ConcatSource();\n\t\tfor (const module of runtimeModules) {\n\t\t\tconst codeGenerationResults = renderContext.codeGenerationResults;\n\t\t\tlet runtimeSource;\n\t\t\tif (codeGenerationResults) {\n\t\t\t\truntimeSource = codeGenerationResults.getSource(\n\t\t\t\t\tmodule,\n\t\t\t\t\trenderContext.chunk.runtime,\n\t\t\t\t\t\"runtime\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst codeGenResult = module.codeGeneration({\n\t\t\t\t\tchunkGraph: renderContext.chunkGraph,\n\t\t\t\t\tdependencyTemplates: renderContext.dependencyTemplates,\n\t\t\t\t\tmoduleGraph: renderContext.moduleGraph,\n\t\t\t\t\truntimeTemplate: renderContext.runtimeTemplate,\n\t\t\t\t\truntime: renderContext.chunk.runtime,\n\t\t\t\t\tcodeGenerationResults\n\t\t\t\t});\n\t\t\t\tif (!codeGenResult) continue;\n\t\t\t\truntimeSource = codeGenResult.sources.get(\"runtime\");\n\t\t\t}\n\t\t\tif (runtimeSource) {\n\t\t\t\tsource.add(Template.toNormalComment(module.identifier()) + \"\\n\");\n\t\t\t\tif (!module.shouldIsolate()) {\n\t\t\t\t\tsource.add(runtimeSource);\n\t\t\t\t\tsource.add(\"\\n\\n\");\n\t\t\t\t} else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n\t\t\t\t\tsource.add(\"(() => {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n})();\\n\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tsource.add(\"!function() {\\n\");\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\n\t\t\t\t\tsource.add(\"\\n}();\\n\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn source;\n\t}\n\n\t/**\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\n\t * @param {RenderContext} renderContext render context\n\t * @returns {Source} rendered chunk runtime modules in a Source object\n\t */\n\tstatic renderChunkRuntimeModules(runtimeModules, renderContext) {\n\t\treturn new PrefixSource(\n\t\t\t\"/******/ \",\n\t\t\tnew ConcatSource(\n\t\t\t\t\"function(__webpack_require__) { // webpackRuntimeModules\\n\",\n\t\t\t\tthis.renderRuntimeModules(runtimeModules, renderContext),\n\t\t\t\t\"}\\n\"\n\t\t\t)\n\t\t);\n\t}\n}\n\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS =\n\tNUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\n\tNUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;\n"]},"metadata":{},"sourceType":"script"}