{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar EntryDependency = require(\"./dependencies/EntryDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\n\nvar EntryPlugin = /*#__PURE__*/function () {\n  /**\n   * An entry plugin which will handle\n   * creation of the EntryDependency\n   *\n   * @param {string} context context path\n   * @param {string} entry entry path\n   * @param {EntryOptions | string=} options entry options (passing a string is deprecated)\n   */\n  function EntryPlugin(context, entry, options) {\n    _classCallCheck(this, EntryPlugin);\n\n    this.context = context;\n    this.entry = entry;\n    this.options = options || \"\";\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(EntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"EntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(EntryDependency, normalModuleFactory);\n      });\n      var entry = this.entry,\n          options = this.options,\n          context = this.context;\n      var dep = EntryPlugin.createDependency(entry, options);\n      compiler.hooks.make.tapAsync(\"EntryPlugin\", function (compilation, callback) {\n        compilation.addEntry(context, dep, options, function (err) {\n          callback(err);\n        });\n      });\n    }\n    /**\n     * @param {string} entry entry request\n     * @param {EntryOptions | string} options entry options (passing string is deprecated)\n     * @returns {EntryDependency} the dependency\n     */\n\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entry, options) {\n      var dep = new EntryDependency(entry); // TODO webpack 6 remove string option\n\n      dep.loc = {\n        name: typeof options === \"object\" ? options.name : options\n      };\n      return dep;\n    }\n  }]);\n\n  return EntryPlugin;\n}();\n\nmodule.exports = EntryPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/EntryPlugin.js"],"names":["EntryDependency","require","EntryPlugin","context","entry","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dep","createDependency","make","tapAsync","callback","addEntry","err","loc","name","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,gCAAD,CAA/B;AAEA;;AACA;;;IAEMC,W;AACL;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACC,uBAAYC,OAAZ,EAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AAAA;;AACpC,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,aADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCZ,eADD,EAECU,mBAFD;AAIA,OAPF;AAUA,UAAQN,KAAR,GAAoC,IAApC,CAAQA,KAAR;AAAA,UAAeC,OAAf,GAAoC,IAApC,CAAeA,OAAf;AAAA,UAAwBF,OAAxB,GAAoC,IAApC,CAAwBA,OAAxB;AACA,UAAMU,GAAG,GAAGX,WAAW,CAACY,gBAAZ,CAA6BV,KAA7B,EAAoCC,OAApC,CAAZ;AAEAC,MAAAA,QAAQ,CAACC,KAAT,CAAeQ,IAAf,CAAoBC,QAApB,CAA6B,aAA7B,EAA4C,UAACR,WAAD,EAAcS,QAAd,EAA2B;AACtET,QAAAA,WAAW,CAACU,QAAZ,CAAqBf,OAArB,EAA8BU,GAA9B,EAAmCR,OAAnC,EAA4C,UAAAc,GAAG,EAAI;AAClDF,UAAAA,QAAQ,CAACE,GAAD,CAAR;AACA,SAFD;AAGA,OAJD;AAKA;AAED;AACD;AACA;AACA;AACA;;;;WACC,0BAAwBf,KAAxB,EAA+BC,OAA/B,EAAwC;AACvC,UAAMQ,GAAG,GAAG,IAAIb,eAAJ,CAAoBI,KAApB,CAAZ,CADuC,CAEvC;;AACAS,MAAAA,GAAG,CAACO,GAAJ,GAAU;AAAEC,QAAAA,IAAI,EAAE,OAAOhB,OAAP,KAAmB,QAAnB,GAA8BA,OAAO,CAACgB,IAAtC,GAA6ChB;AAArD,OAAV;AACA,aAAOQ,GAAP;AACA;;;;;;AAGFS,MAAM,CAACC,OAAP,GAAiBrB,WAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst EntryDependency = require(\"./dependencies/EntryDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Entrypoint\").EntryOptions} EntryOptions */\n\nclass EntryPlugin {\n\t/**\n\t * An entry plugin which will handle\n\t * creation of the EntryDependency\n\t *\n\t * @param {string} context context path\n\t * @param {string} entry entry path\n\t * @param {EntryOptions | string=} options entry options (passing a string is deprecated)\n\t */\n\tconstructor(context, entry, options) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t\tthis.options = options || \"\";\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"EntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tconst { entry, options, context } = this;\n\t\tconst dep = EntryPlugin.createDependency(entry, options);\n\n\t\tcompiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n\t\t\tcompilation.addEntry(context, dep, options, err => {\n\t\t\t\tcallback(err);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} entry entry request\n\t * @param {EntryOptions | string} options entry options (passing string is deprecated)\n\t * @returns {EntryDependency} the dependency\n\t */\n\tstatic createDependency(entry, options) {\n\t\tconst dep = new EntryDependency(entry);\n\t\t// TODO webpack 6 remove string option\n\t\tdep.loc = { name: typeof options === \"object\" ? options.name : options };\n\t\treturn dep;\n\t}\n}\n\nmodule.exports = EntryPlugin;\n"]},"metadata":{},"sourceType":"script"}