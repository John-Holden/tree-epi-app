{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/comparators\"),\n    compareModulesByIdentifier = _require.compareModulesByIdentifier;\n\nvar _require2 = require(\"./IdHelpers\"),\n    getShortModuleName = _require2.getShortModuleName,\n    getLongModuleName = _require2.getLongModuleName,\n    assignNames = _require2.assignNames,\n    getUsedModuleIdsAndModules = _require2.getUsedModuleIdsAndModules,\n    assignAscendingModuleIds = _require2.assignAscendingModuleIds;\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar NamedModuleIdsPlugin = /*#__PURE__*/function () {\n  function NamedModuleIdsPlugin(options) {\n    _classCallCheck(this, NamedModuleIdsPlugin);\n\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(NamedModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      var root = compiler.root;\n      compiler.hooks.compilation.tap(\"NamedModuleIdsPlugin\", function (compilation) {\n        var hashFunction = compilation.outputOptions.hashFunction;\n        compilation.hooks.moduleIds.tap(\"NamedModuleIdsPlugin\", function () {\n          var chunkGraph = compilation.chunkGraph;\n          var context = _this.options.context ? _this.options.context : compiler.context;\n\n          var _getUsedModuleIdsAndM = getUsedModuleIdsAndModules(compilation),\n              _getUsedModuleIdsAndM2 = _slicedToArray(_getUsedModuleIdsAndM, 2),\n              usedIds = _getUsedModuleIdsAndM2[0],\n              modules = _getUsedModuleIdsAndM2[1];\n\n          var unnamedModules = assignNames(modules, function (m) {\n            return getShortModuleName(m, context, root);\n          }, function (m, shortName) {\n            return getLongModuleName(shortName, m, context, hashFunction, root);\n          }, compareModulesByIdentifier, usedIds, function (m, name) {\n            return chunkGraph.setModuleId(m, name);\n          });\n\n          if (unnamedModules.length > 0) {\n            assignAscendingModuleIds(usedIds, unnamedModules, compilation);\n          }\n        });\n      });\n    }\n  }]);\n\n  return NamedModuleIdsPlugin;\n}();\n\nmodule.exports = NamedModuleIdsPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/NamedModuleIdsPlugin.js"],"names":["require","compareModulesByIdentifier","getShortModuleName","getLongModuleName","assignNames","getUsedModuleIdsAndModules","assignAscendingModuleIds","NamedModuleIdsPlugin","options","compiler","root","hooks","compilation","tap","hashFunction","outputOptions","moduleIds","chunkGraph","context","usedIds","modules","unnamedModules","m","shortName","name","setModuleId","length","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,eAAuCA,OAAO,CAAC,qBAAD,CAA9C;AAAA,IAAQC,0BAAR,YAAQA,0BAAR;;AACA,gBAMID,OAAO,CAAC,aAAD,CANX;AAAA,IACCE,kBADD,aACCA,kBADD;AAAA,IAECC,iBAFD,aAECA,iBAFD;AAAA,IAGCC,WAHD,aAGCA,WAHD;AAAA,IAICC,0BAJD,aAICA,0BAJD;AAAA,IAKCC,wBALD,aAKCA,wBALD;AAQA;;AACA;;;IAEMC,oB;AACL,gCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACf,UAAQC,IAAR,GAAiBD,QAAjB,CAAQC,IAAR;AACAD,MAAAA,QAAQ,CAACE,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,sBAA/B,EAAuD,UAAAD,WAAW,EAAI;AACrE,YAAQE,YAAR,GAAyBF,WAAW,CAACG,aAArC,CAAQD,YAAR;AACAF,QAAAA,WAAW,CAACD,KAAZ,CAAkBK,SAAlB,CAA4BH,GAA5B,CAAgC,sBAAhC,EAAwD,YAAM;AAC7D,cAAMI,UAAU,GAAGL,WAAW,CAACK,UAA/B;AACA,cAAMC,OAAO,GAAG,KAAI,CAACV,OAAL,CAAaU,OAAb,GACb,KAAI,CAACV,OAAL,CAAaU,OADA,GAEbT,QAAQ,CAACS,OAFZ;;AAIA,sCAA2Bb,0BAA0B,CAACO,WAAD,CAArD;AAAA;AAAA,cAAOO,OAAP;AAAA,cAAgBC,OAAhB;;AACA,cAAMC,cAAc,GAAGjB,WAAW,CACjCgB,OADiC,EAEjC,UAAAE,CAAC;AAAA,mBAAIpB,kBAAkB,CAACoB,CAAD,EAAIJ,OAAJ,EAAaR,IAAb,CAAtB;AAAA,WAFgC,EAGjC,UAACY,CAAD,EAAIC,SAAJ;AAAA,mBACCpB,iBAAiB,CAACoB,SAAD,EAAYD,CAAZ,EAAeJ,OAAf,EAAwBJ,YAAxB,EAAsCJ,IAAtC,CADlB;AAAA,WAHiC,EAKjCT,0BALiC,EAMjCkB,OANiC,EAOjC,UAACG,CAAD,EAAIE,IAAJ;AAAA,mBAAaP,UAAU,CAACQ,WAAX,CAAuBH,CAAvB,EAA0BE,IAA1B,CAAb;AAAA,WAPiC,CAAlC;;AASA,cAAIH,cAAc,CAACK,MAAf,GAAwB,CAA5B,EAA+B;AAC9BpB,YAAAA,wBAAwB,CAACa,OAAD,EAAUE,cAAV,EAA0BT,WAA1B,CAAxB;AACA;AACD,SAnBD;AAoBA,OAtBD;AAuBA;;;;;;AAGFe,MAAM,CAACC,OAAP,GAAiBrB,oBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\nconst {\n\tgetShortModuleName,\n\tgetLongModuleName,\n\tassignNames,\n\tgetUsedModuleIdsAndModules,\n\tassignAscendingModuleIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NamedModuleIdsPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { root } = compiler;\n\t\tcompiler.hooks.compilation.tap(\"NamedModuleIdsPlugin\", compilation => {\n\t\t\tconst { hashFunction } = compilation.outputOptions;\n\t\t\tcompilation.hooks.moduleIds.tap(\"NamedModuleIdsPlugin\", () => {\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\tconst context = this.options.context\n\t\t\t\t\t? this.options.context\n\t\t\t\t\t: compiler.context;\n\n\t\t\t\tconst [usedIds, modules] = getUsedModuleIdsAndModules(compilation);\n\t\t\t\tconst unnamedModules = assignNames(\n\t\t\t\t\tmodules,\n\t\t\t\t\tm => getShortModuleName(m, context, root),\n\t\t\t\t\t(m, shortName) =>\n\t\t\t\t\t\tgetLongModuleName(shortName, m, context, hashFunction, root),\n\t\t\t\t\tcompareModulesByIdentifier,\n\t\t\t\t\tusedIds,\n\t\t\t\t\t(m, name) => chunkGraph.setModuleId(m, name)\n\t\t\t\t);\n\t\t\t\tif (unnamedModules.length > 0) {\n\t\t\t\t\tassignAscendingModuleIds(usedIds, unnamedModules, compilation);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NamedModuleIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}