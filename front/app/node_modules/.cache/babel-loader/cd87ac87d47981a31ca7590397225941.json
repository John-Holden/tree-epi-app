{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/comparators\"),\n    compareChunksNatural = _require.compareChunksNatural;\n\nvar _require2 = require(\"./IdHelpers\"),\n    getFullChunkName = _require2.getFullChunkName,\n    getUsedChunkIds = _require2.getUsedChunkIds,\n    assignDeterministicIds = _require2.assignDeterministicIds;\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar DeterministicChunkIdsPlugin = /*#__PURE__*/function () {\n  function DeterministicChunkIdsPlugin(options) {\n    _classCallCheck(this, DeterministicChunkIdsPlugin);\n\n    this.options = options || {};\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(DeterministicChunkIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DeterministicChunkIdsPlugin\", function (compilation) {\n        compilation.hooks.chunkIds.tap(\"DeterministicChunkIdsPlugin\", function (chunks) {\n          var chunkGraph = compilation.chunkGraph;\n          var context = _this.options.context ? _this.options.context : compiler.context;\n          var maxLength = _this.options.maxLength || 3;\n          var compareNatural = compareChunksNatural(chunkGraph);\n          var usedIds = getUsedChunkIds(compilation);\n          assignDeterministicIds(Array.from(chunks).filter(function (chunk) {\n            return chunk.id === null;\n          }), function (chunk) {\n            return getFullChunkName(chunk, chunkGraph, context, compiler.root);\n          }, compareNatural, function (chunk, id) {\n            var size = usedIds.size;\n            usedIds.add(\"\".concat(id));\n            if (size === usedIds.size) return false;\n            chunk.id = id;\n            chunk.ids = [id];\n            return true;\n          }, [Math.pow(10, maxLength)], 10, usedIds.size);\n        });\n      });\n    }\n  }]);\n\n  return DeterministicChunkIdsPlugin;\n}();\n\nmodule.exports = DeterministicChunkIdsPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/DeterministicChunkIdsPlugin.js"],"names":["require","compareChunksNatural","getFullChunkName","getUsedChunkIds","assignDeterministicIds","DeterministicChunkIdsPlugin","options","compiler","hooks","compilation","tap","chunkIds","chunks","chunkGraph","context","maxLength","compareNatural","usedIds","Array","from","filter","chunk","id","root","size","add","ids","Math","pow","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;AAEA,eAAiCA,OAAO,CAAC,qBAAD,CAAxC;AAAA,IAAQC,oBAAR,YAAQA,oBAAR;;AACA,gBAIID,OAAO,CAAC,aAAD,CAJX;AAAA,IACCE,gBADD,aACCA,gBADD;AAAA,IAECC,eAFD,aAECA,eAFD;AAAA,IAGCC,sBAHD,aAGCA,sBAHD;AAMA;;AACA;;;IAEMC,2B;AACL,uCAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,6BADD,EAEC,UAAAD,WAAW,EAAI;AACdA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,QAAlB,CAA2BD,GAA3B,CACC,6BADD,EAEC,UAAAE,MAAM,EAAI;AACT,cAAMC,UAAU,GAAGJ,WAAW,CAACI,UAA/B;AACA,cAAMC,OAAO,GAAG,KAAI,CAACR,OAAL,CAAaQ,OAAb,GACb,KAAI,CAACR,OAAL,CAAaQ,OADA,GAEbP,QAAQ,CAACO,OAFZ;AAGA,cAAMC,SAAS,GAAG,KAAI,CAACT,OAAL,CAAaS,SAAb,IAA0B,CAA5C;AAEA,cAAMC,cAAc,GAAGf,oBAAoB,CAACY,UAAD,CAA3C;AAEA,cAAMI,OAAO,GAAGd,eAAe,CAACM,WAAD,CAA/B;AACAL,UAAAA,sBAAsB,CACrBc,KAAK,CAACC,IAAN,CAAWP,MAAX,EAAmBQ,MAAnB,CAA0B,UAAAC,KAAK,EAAI;AAClC,mBAAOA,KAAK,CAACC,EAAN,KAAa,IAApB;AACA,WAFD,CADqB,EAIrB,UAAAD,KAAK;AAAA,mBACJnB,gBAAgB,CAACmB,KAAD,EAAQR,UAAR,EAAoBC,OAApB,EAA6BP,QAAQ,CAACgB,IAAtC,CADZ;AAAA,WAJgB,EAMrBP,cANqB,EAOrB,UAACK,KAAD,EAAQC,EAAR,EAAe;AACd,gBAAME,IAAI,GAAGP,OAAO,CAACO,IAArB;AACAP,YAAAA,OAAO,CAACQ,GAAR,WAAeH,EAAf;AACA,gBAAIE,IAAI,KAAKP,OAAO,CAACO,IAArB,EAA2B,OAAO,KAAP;AAC3BH,YAAAA,KAAK,CAACC,EAAN,GAAWA,EAAX;AACAD,YAAAA,KAAK,CAACK,GAAN,GAAY,CAACJ,EAAD,CAAZ;AACA,mBAAO,IAAP;AACA,WAdoB,EAerB,CAACK,IAAI,CAACC,GAAL,CAAS,EAAT,EAAab,SAAb,CAAD,CAfqB,EAgBrB,EAhBqB,EAiBrBE,OAAO,CAACO,IAjBa,CAAtB;AAmBA,SA/BF;AAiCA,OApCF;AAsCA;;;;;;AAGFK,MAAM,CAACC,OAAP,GAAiBzB,2BAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst { compareChunksNatural } = require(\"../util/comparators\");\nconst {\n\tgetFullChunkName,\n\tgetUsedChunkIds,\n\tassignDeterministicIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass DeterministicChunkIdsPlugin {\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DeterministicChunkIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.chunkIds.tap(\n\t\t\t\t\t\"DeterministicChunkIdsPlugin\",\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\n\t\t\t\t\t\tconst context = this.options.context\n\t\t\t\t\t\t\t? this.options.context\n\t\t\t\t\t\t\t: compiler.context;\n\t\t\t\t\t\tconst maxLength = this.options.maxLength || 3;\n\n\t\t\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\n\n\t\t\t\t\t\tconst usedIds = getUsedChunkIds(compilation);\n\t\t\t\t\t\tassignDeterministicIds(\n\t\t\t\t\t\t\tArray.from(chunks).filter(chunk => {\n\t\t\t\t\t\t\t\treturn chunk.id === null;\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tchunk =>\n\t\t\t\t\t\t\t\tgetFullChunkName(chunk, chunkGraph, context, compiler.root),\n\t\t\t\t\t\t\tcompareNatural,\n\t\t\t\t\t\t\t(chunk, id) => {\n\t\t\t\t\t\t\t\tconst size = usedIds.size;\n\t\t\t\t\t\t\t\tusedIds.add(`${id}`);\n\t\t\t\t\t\t\t\tif (size === usedIds.size) return false;\n\t\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\t\tchunk.ids = [id];\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t[Math.pow(10, maxLength)],\n\t\t\t\t\t\t\t10,\n\t\t\t\t\t\t\tusedIds.size\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DeterministicChunkIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}