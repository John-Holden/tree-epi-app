{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar isValidExternalsType = require(\"../../schemas/plugins/container/ExternalsType.check.js\");\n\nvar SharePlugin = require(\"../sharing/SharePlugin\");\n\nvar createSchemaValidation = require(\"../util/create-schema-validation\");\n\nvar ContainerPlugin = require(\"./ContainerPlugin\");\n\nvar ContainerReferencePlugin = require(\"./ContainerReferencePlugin\");\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").ExternalsType} ExternalsType */\n\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").ModuleFederationPluginOptions} ModuleFederationPluginOptions */\n\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").Shared} Shared */\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n\nvar validate = createSchemaValidation(require(\"../../schemas/plugins/container/ModuleFederationPlugin.check.js\"), function () {\n  return require(\"../../schemas/plugins/container/ModuleFederationPlugin.json\");\n}, {\n  name: \"Module Federation Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar ModuleFederationPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ModuleFederationPluginOptions} options options\n   */\n  function ModuleFederationPlugin(options) {\n    _classCallCheck(this, ModuleFederationPlugin);\n\n    validate(options);\n    this._options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(ModuleFederationPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this._options;\n      var library = options.library || {\n        type: \"var\",\n        name: options.name\n      };\n      var remoteType = options.remoteType || (options.library && isValidExternalsType(options.library.type) ?\n      /** @type {ExternalsType} */\n      options.library.type : \"script\");\n\n      if (library && !compiler.options.output.enabledLibraryTypes.includes(library.type)) {\n        compiler.options.output.enabledLibraryTypes.push(library.type);\n      }\n\n      compiler.hooks.afterPlugins.tap(\"ModuleFederationPlugin\", function () {\n        if (options.exposes && (Array.isArray(options.exposes) ? options.exposes.length > 0 : Object.keys(options.exposes).length > 0)) {\n          new ContainerPlugin({\n            name: options.name,\n            library: library,\n            filename: options.filename,\n            runtime: options.runtime,\n            exposes: options.exposes\n          }).apply(compiler);\n        }\n\n        if (options.remotes && (Array.isArray(options.remotes) ? options.remotes.length > 0 : Object.keys(options.remotes).length > 0)) {\n          new ContainerReferencePlugin({\n            remoteType: remoteType,\n            remotes: options.remotes\n          }).apply(compiler);\n        }\n\n        if (options.shared) {\n          new SharePlugin({\n            shared: options.shared,\n            shareScope: options.shareScope\n          }).apply(compiler);\n        }\n      });\n    }\n  }]);\n\n  return ModuleFederationPlugin;\n}();\n\nmodule.exports = ModuleFederationPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/container/ModuleFederationPlugin.js"],"names":["isValidExternalsType","require","SharePlugin","createSchemaValidation","ContainerPlugin","ContainerReferencePlugin","validate","name","baseDataPath","ModuleFederationPlugin","options","_options","compiler","library","type","remoteType","output","enabledLibraryTypes","includes","push","hooks","afterPlugins","tap","exposes","Array","isArray","length","Object","keys","filename","runtime","apply","remotes","shared","shareScope","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra and Zackary Jackson @ScriptedAlchemy\n*/\n\n\"use strict\";\n\nconst isValidExternalsType = require(\"../../schemas/plugins/container/ExternalsType.check.js\");\nconst SharePlugin = require(\"../sharing/SharePlugin\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst ContainerPlugin = require(\"./ContainerPlugin\");\nconst ContainerReferencePlugin = require(\"./ContainerReferencePlugin\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").ExternalsType} ExternalsType */\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").ModuleFederationPluginOptions} ModuleFederationPluginOptions */\n/** @typedef {import(\"../../declarations/plugins/container/ModuleFederationPlugin\").Shared} Shared */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../../schemas/plugins/container/ModuleFederationPlugin.check.js\"),\n\t() => require(\"../../schemas/plugins/container/ModuleFederationPlugin.json\"),\n\t{\n\t\tname: \"Module Federation Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\nclass ModuleFederationPlugin {\n\t/**\n\t * @param {ModuleFederationPluginOptions} options options\n\t */\n\tconstructor(options) {\n\t\tvalidate(options);\n\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst { _options: options } = this;\n\t\tconst library = options.library || { type: \"var\", name: options.name };\n\t\tconst remoteType =\n\t\t\toptions.remoteType ||\n\t\t\t(options.library && isValidExternalsType(options.library.type)\n\t\t\t\t? /** @type {ExternalsType} */ (options.library.type)\n\t\t\t\t: \"script\");\n\t\tif (\n\t\t\tlibrary &&\n\t\t\t!compiler.options.output.enabledLibraryTypes.includes(library.type)\n\t\t) {\n\t\t\tcompiler.options.output.enabledLibraryTypes.push(library.type);\n\t\t}\n\t\tcompiler.hooks.afterPlugins.tap(\"ModuleFederationPlugin\", () => {\n\t\t\tif (\n\t\t\t\toptions.exposes &&\n\t\t\t\t(Array.isArray(options.exposes)\n\t\t\t\t\t? options.exposes.length > 0\n\t\t\t\t\t: Object.keys(options.exposes).length > 0)\n\t\t\t) {\n\t\t\t\tnew ContainerPlugin({\n\t\t\t\t\tname: options.name,\n\t\t\t\t\tlibrary,\n\t\t\t\t\tfilename: options.filename,\n\t\t\t\t\truntime: options.runtime,\n\t\t\t\t\texposes: options.exposes\n\t\t\t\t}).apply(compiler);\n\t\t\t}\n\t\t\tif (\n\t\t\t\toptions.remotes &&\n\t\t\t\t(Array.isArray(options.remotes)\n\t\t\t\t\t? options.remotes.length > 0\n\t\t\t\t\t: Object.keys(options.remotes).length > 0)\n\t\t\t) {\n\t\t\t\tnew ContainerReferencePlugin({\n\t\t\t\t\tremoteType,\n\t\t\t\t\tremotes: options.remotes\n\t\t\t\t}).apply(compiler);\n\t\t\t}\n\t\t\tif (options.shared) {\n\t\t\t\tnew SharePlugin({\n\t\t\t\t\tshared: options.shared,\n\t\t\t\t\tshareScope: options.shareScope\n\t\t\t\t}).apply(compiler);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = ModuleFederationPlugin;\n"]},"metadata":{},"sourceType":"script"}