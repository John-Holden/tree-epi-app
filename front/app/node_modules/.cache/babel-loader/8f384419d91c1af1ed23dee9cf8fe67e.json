{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Dependency = require(\"../Dependency\");\n\nvar DependencyTemplate = require(\"../DependencyTemplate\");\n\nvar memoize = require(\"../util/memoize\");\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar getRawModule = memoize(function () {\n  return require(\"../RawModule\");\n});\n\nvar ModuleDependency = /*#__PURE__*/function (_Dependency) {\n  _inherits(ModuleDependency, _Dependency);\n\n  var _super = _createSuper(ModuleDependency);\n\n  /**\n   * @param {string} request request path which needs resolving\n   */\n  function ModuleDependency(request) {\n    var _this;\n\n    _classCallCheck(this, ModuleDependency);\n\n    _this = _super.call(this);\n    _this.request = request;\n    _this.userRequest = request;\n    _this.range = undefined; // assertions must be serialized by subclasses that use it\n\n    /** @type {Record<string, any> | undefined} */\n\n    _this.assertions = undefined;\n    return _this;\n  }\n  /**\n   * @returns {string | null} an identifier to merge equal requests\n   */\n\n\n  _createClass(ModuleDependency, [{\n    key: \"getResourceIdentifier\",\n    value: function getResourceIdentifier() {\n      var str = \"module\".concat(this.request);\n\n      if (this.assertions !== undefined) {\n        str += JSON.stringify(this.assertions);\n      }\n\n      return str;\n    }\n    /**\n     * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n     */\n\n  }, {\n    key: \"couldAffectReferencingModule\",\n    value: function couldAffectReferencingModule() {\n      return true;\n    }\n    /**\n     * @param {string} context context directory\n     * @returns {Module} a module\n     */\n\n  }, {\n    key: \"createIgnoredModule\",\n    value: function createIgnoredModule(context) {\n      var RawModule = getRawModule();\n      return new RawModule(\"/* (ignored) */\", \"ignored|\".concat(context, \"|\").concat(this.request), \"\".concat(this.request, \" (ignored)\"));\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(context) {\n      var write = context.write;\n      write(this.request);\n      write(this.userRequest);\n      write(this.range);\n\n      _get(_getPrototypeOf(ModuleDependency.prototype), \"serialize\", this).call(this, context);\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(context) {\n      var read = context.read;\n      this.request = read();\n      this.userRequest = read();\n      this.range = read();\n\n      _get(_getPrototypeOf(ModuleDependency.prototype), \"deserialize\", this).call(this, context);\n    }\n  }]);\n\n  return ModuleDependency;\n}(Dependency);\n\nModuleDependency.Template = DependencyTemplate;\nmodule.exports = ModuleDependency;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/dependencies/ModuleDependency.js"],"names":["Dependency","require","DependencyTemplate","memoize","getRawModule","ModuleDependency","request","userRequest","range","undefined","assertions","str","JSON","stringify","context","RawModule","write","read","Template","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAD,CAAlC;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;AAEA;;AACA;;;AAEA,IAAMG,YAAY,GAAGD,OAAO,CAAC;AAAA,SAAMF,OAAO,CAAC,cAAD,CAAb;AAAA,CAAD,CAA5B;;IAEMI,gB;;;;;AACL;AACD;AACA;AACC,4BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACpB;AACA,UAAKA,OAAL,GAAeA,OAAf;AACA,UAAKC,WAAL,GAAmBD,OAAnB;AACA,UAAKE,KAAL,GAAaC,SAAb,CAJoB,CAKpB;;AACA;;AACA,UAAKC,UAAL,GAAkBD,SAAlB;AAPoB;AAQpB;AAED;AACD;AACA;;;;;WACC,iCAAwB;AACvB,UAAIE,GAAG,mBAAY,KAAKL,OAAjB,CAAP;;AACA,UAAI,KAAKI,UAAL,KAAoBD,SAAxB,EAAmC;AAClCE,QAAAA,GAAG,IAAIC,IAAI,CAACC,SAAL,CAAe,KAAKH,UAApB,CAAP;AACA;;AACD,aAAOC,GAAP;AACA;AAED;AACD;AACA;;;;WACC,wCAA+B;AAC9B,aAAO,IAAP;AACA;AAED;AACD;AACA;AACA;;;;WACC,6BAAoBG,OAApB,EAA6B;AAC5B,UAAMC,SAAS,GAAGX,YAAY,EAA9B;AACA,aAAO,IAAIW,SAAJ,CACN,iBADM,oBAEKD,OAFL,cAEgB,KAAKR,OAFrB,aAGH,KAAKA,OAHF,gBAAP;AAKA;;;WAED,mBAAUQ,OAAV,EAAmB;AAClB,UAAQE,KAAR,GAAkBF,OAAlB,CAAQE,KAAR;AACAA,MAAAA,KAAK,CAAC,KAAKV,OAAN,CAAL;AACAU,MAAAA,KAAK,CAAC,KAAKT,WAAN,CAAL;AACAS,MAAAA,KAAK,CAAC,KAAKR,KAAN,CAAL;;AACA,sFAAgBM,OAAhB;AACA;;;WAED,qBAAYA,OAAZ,EAAqB;AACpB,UAAQG,IAAR,GAAiBH,OAAjB,CAAQG,IAAR;AACA,WAAKX,OAAL,GAAeW,IAAI,EAAnB;AACA,WAAKV,WAAL,GAAmBU,IAAI,EAAvB;AACA,WAAKT,KAAL,GAAaS,IAAI,EAAjB;;AACA,wFAAkBH,OAAlB;AACA;;;;EA3D6Bd,U;;AA8D/BK,gBAAgB,CAACa,QAAjB,GAA4BhB,kBAA5B;AAEAiB,MAAM,CAACC,OAAP,GAAiBf,gBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getRawModule = memoize(() => require(\"../RawModule\"));\n\nclass ModuleDependency extends Dependency {\n\t/**\n\t * @param {string} request request path which needs resolving\n\t */\n\tconstructor(request) {\n\t\tsuper();\n\t\tthis.request = request;\n\t\tthis.userRequest = request;\n\t\tthis.range = undefined;\n\t\t// assertions must be serialized by subclasses that use it\n\t\t/** @type {Record<string, any> | undefined} */\n\t\tthis.assertions = undefined;\n\t}\n\n\t/**\n\t * @returns {string | null} an identifier to merge equal requests\n\t */\n\tgetResourceIdentifier() {\n\t\tlet str = `module${this.request}`;\n\t\tif (this.assertions !== undefined) {\n\t\t\tstr += JSON.stringify(this.assertions);\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\n\t */\n\tcouldAffectReferencingModule() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} context context directory\n\t * @returns {Module} a module\n\t */\n\tcreateIgnoredModule(context) {\n\t\tconst RawModule = getRawModule();\n\t\treturn new RawModule(\n\t\t\t\"/* (ignored) */\",\n\t\t\t`ignored|${context}|${this.request}`,\n\t\t\t`${this.request} (ignored)`\n\t\t);\n\t}\n\n\tserialize(context) {\n\t\tconst { write } = context;\n\t\twrite(this.request);\n\t\twrite(this.userRequest);\n\t\twrite(this.range);\n\t\tsuper.serialize(context);\n\t}\n\n\tdeserialize(context) {\n\t\tconst { read } = context;\n\t\tthis.request = read();\n\t\tthis.userRequest = read();\n\t\tthis.range = read();\n\t\tsuper.deserialize(context);\n\t}\n}\n\nModuleDependency.Template = DependencyTemplate;\n\nmodule.exports = ModuleDependency;\n"]},"metadata":{},"sourceType":"script"}