{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"../util/comparators\"),\n    compareModulesByPreOrderIndexOrIdentifier = _require.compareModulesByPreOrderIndexOrIdentifier;\n\nvar _require2 = require(\"./IdHelpers\"),\n    assignAscendingModuleIds = _require2.assignAscendingModuleIds,\n    getUsedModuleIdsAndModules = _require2.getUsedModuleIdsAndModules;\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Module\")} Module */\n\n\nvar NaturalModuleIdsPlugin = /*#__PURE__*/function () {\n  function NaturalModuleIdsPlugin() {\n    _classCallCheck(this, NaturalModuleIdsPlugin);\n  }\n\n  _createClass(NaturalModuleIdsPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", function (compilation) {\n        compilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", function (modules) {\n          var _getUsedModuleIdsAndM = getUsedModuleIdsAndModules(compilation),\n              _getUsedModuleIdsAndM2 = _slicedToArray(_getUsedModuleIdsAndM, 2),\n              usedIds = _getUsedModuleIdsAndM2[0],\n              modulesInNaturalOrder = _getUsedModuleIdsAndM2[1];\n\n          modulesInNaturalOrder.sort(compareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph));\n          assignAscendingModuleIds(usedIds, modulesInNaturalOrder, compilation);\n        });\n      });\n    }\n  }]);\n\n  return NaturalModuleIdsPlugin;\n}();\n\nmodule.exports = NaturalModuleIdsPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/ids/NaturalModuleIdsPlugin.js"],"names":["require","compareModulesByPreOrderIndexOrIdentifier","assignAscendingModuleIds","getUsedModuleIdsAndModules","NaturalModuleIdsPlugin","compiler","hooks","compilation","tap","moduleIds","modules","usedIds","modulesInNaturalOrder","sort","moduleGraph","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,eAEIA,OAAO,CAAC,qBAAD,CAFX;AAAA,IACCC,yCADD,YACCA,yCADD;;AAGA,gBAGID,OAAO,CAAC,aAAD,CAHX;AAAA,IACCE,wBADD,aACCA,wBADD;AAAA,IAECC,0BAFD,aAECA,0BAFD;AAKA;;AACA;;;IAEMC,sB;;;;;;;;AACL;AACD;AACA;AACA;AACA;AACC,mBAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,wBAA/B,EAAyD,UAAAD,WAAW,EAAI;AACvEA,QAAAA,WAAW,CAACD,KAAZ,CAAkBG,SAAlB,CAA4BD,GAA5B,CAAgC,wBAAhC,EAA0D,UAAAE,OAAO,EAAI;AACpE,sCACCP,0BAA0B,CAACI,WAAD,CAD3B;AAAA;AAAA,cAAOI,OAAP;AAAA,cAAgBC,qBAAhB;;AAEAA,UAAAA,qBAAqB,CAACC,IAAtB,CACCZ,yCAAyC,CAACM,WAAW,CAACO,WAAb,CAD1C;AAGAZ,UAAAA,wBAAwB,CAACS,OAAD,EAAUC,qBAAV,EAAiCL,WAAjC,CAAxB;AACA,SAPD;AAQA,OATD;AAUA;;;;;;AAGFQ,MAAM,CAACC,OAAP,GAAiBZ,sBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Florent Cailhol @ooflorent\n*/\n\n\"use strict\";\n\nconst {\n\tcompareModulesByPreOrderIndexOrIdentifier\n} = require(\"../util/comparators\");\nconst {\n\tassignAscendingModuleIds,\n\tgetUsedModuleIdsAndModules\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NaturalModuleIdsPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"NaturalModuleIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.moduleIds.tap(\"NaturalModuleIdsPlugin\", modules => {\n\t\t\t\tconst [usedIds, modulesInNaturalOrder] =\n\t\t\t\t\tgetUsedModuleIdsAndModules(compilation);\n\t\t\t\tmodulesInNaturalOrder.sort(\n\t\t\t\t\tcompareModulesByPreOrderIndexOrIdentifier(compilation.moduleGraph)\n\t\t\t\t);\n\t\t\t\tassignAscendingModuleIds(usedIds, modulesInNaturalOrder, compilation);\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = NaturalModuleIdsPlugin;\n"]},"metadata":{},"sourceType":"script"}