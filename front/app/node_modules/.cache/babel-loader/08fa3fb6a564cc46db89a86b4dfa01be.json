{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar makeSerializable = require(\"./util/makeSerializable\");\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n\nvar DependenciesBlock = /*#__PURE__*/function () {\n  function DependenciesBlock() {\n    _classCallCheck(this, DependenciesBlock);\n\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n\n    this.blocks = [];\n    /** @type {DependenciesBlock} */\n\n    this.parent = undefined;\n  }\n\n  _createClass(DependenciesBlock, [{\n    key: \"getRootBlock\",\n    value: function getRootBlock() {\n      /** @type {DependenciesBlock} */\n      var current = this;\n\n      while (current.parent) {\n        current = current.parent;\n      }\n\n      return current;\n    }\n    /**\n     * Adds a DependencyBlock to DependencyBlock relationship.\n     * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n     *\n     * @param {AsyncDependenciesBlock} block block being added\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      this.blocks.push(block);\n      block.parent = this;\n    }\n    /**\n     * @param {Dependency} dependency dependency being tied to block.\n     * This is an \"edge\" pointing to another \"node\" on module graph.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addDependency\",\n    value: function addDependency(dependency) {\n      this.dependencies.push(dependency);\n    }\n    /**\n     * @param {Dependency} dependency dependency being removed\n     * @returns {void}\n     */\n\n  }, {\n    key: \"removeDependency\",\n    value: function removeDependency(dependency) {\n      var idx = this.dependencies.indexOf(dependency);\n\n      if (idx >= 0) {\n        this.dependencies.splice(idx, 1);\n      }\n    }\n    /**\n     * Removes all dependencies and blocks\n     * @returns {void}\n     */\n\n  }, {\n    key: \"clearDependenciesAndBlocks\",\n    value: function clearDependenciesAndBlocks() {\n      this.dependencies.length = 0;\n      this.blocks.length = 0;\n    }\n    /**\n     * @param {Hash} hash the hash used to track dependencies\n     * @param {UpdateHashContext} context context\n     * @returns {void}\n     */\n\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash, context) {\n      var _iterator = _createForOfIteratorHelper(this.dependencies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dep = _step.value;\n          dep.updateHash(hash, context);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.blocks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var block = _step2.value;\n          block.updateHash(hash, context);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(_ref) {\n      var write = _ref.write;\n      write(this.dependencies);\n      write(this.blocks);\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(_ref2) {\n      var read = _ref2.read;\n      this.dependencies = read();\n      this.blocks = read();\n\n      var _iterator3 = _createForOfIteratorHelper(this.blocks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var block = _step3.value;\n          block.parent = this;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }]);\n\n  return DependenciesBlock;\n}();\n\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\nmodule.exports = DependenciesBlock;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/DependenciesBlock.js"],"names":["makeSerializable","require","DependenciesBlock","dependencies","blocks","parent","undefined","current","block","push","dependency","idx","indexOf","splice","length","hash","context","dep","updateHash","write","read","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,yBAAD,CAAhC;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;IAEMC,iB;AACL,+BAAc;AAAA;;AACb;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA;;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;;AACA,SAAKC,MAAL,GAAcC,SAAd;AACA;;;;WAED,wBAAe;AACd;AACA,UAAIC,OAAO,GAAG,IAAd;;AACA,aAAOA,OAAO,CAACF,MAAf;AAAuBE,QAAAA,OAAO,GAAGA,OAAO,CAACF,MAAlB;AAAvB;;AACA,aAAOE,OAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;;WACC,kBAASC,KAAT,EAAgB;AACf,WAAKJ,MAAL,CAAYK,IAAZ,CAAiBD,KAAjB;AACAA,MAAAA,KAAK,CAACH,MAAN,GAAe,IAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,uBAAcK,UAAd,EAA0B;AACzB,WAAKP,YAAL,CAAkBM,IAAlB,CAAuBC,UAAvB;AACA;AAED;AACD;AACA;AACA;;;;WACC,0BAAiBA,UAAjB,EAA6B;AAC5B,UAAMC,GAAG,GAAG,KAAKR,YAAL,CAAkBS,OAAlB,CAA0BF,UAA1B,CAAZ;;AACA,UAAIC,GAAG,IAAI,CAAX,EAAc;AACb,aAAKR,YAAL,CAAkBU,MAAlB,CAAyBF,GAAzB,EAA8B,CAA9B;AACA;AACD;AAED;AACD;AACA;AACA;;;;WACC,sCAA6B;AAC5B,WAAKR,YAAL,CAAkBW,MAAlB,GAA2B,CAA3B;AACA,WAAKV,MAAL,CAAYU,MAAZ,GAAqB,CAArB;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,oBAAWC,IAAX,EAAiBC,OAAjB,EAA0B;AAAA,iDACP,KAAKb,YADE;AAAA;;AAAA;AACzB,4DAAqC;AAAA,cAA1Bc,GAA0B;AACpCA,UAAAA,GAAG,CAACC,UAAJ,CAAeH,IAAf,EAAqBC,OAArB;AACA;AAHwB;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAIL,KAAKZ,MAJA;AAAA;;AAAA;AAIzB,+DAAiC;AAAA,cAAtBI,KAAsB;AAChCA,UAAAA,KAAK,CAACU,UAAN,CAAiBH,IAAjB,EAAuBC,OAAvB;AACA;AANwB;AAAA;AAAA;AAAA;AAAA;AAOzB;;;WAED,yBAAqB;AAAA,UAATG,KAAS,QAATA,KAAS;AACpBA,MAAAA,KAAK,CAAC,KAAKhB,YAAN,CAAL;AACAgB,MAAAA,KAAK,CAAC,KAAKf,MAAN,CAAL;AACA;;;WAED,4BAAsB;AAAA,UAARgB,IAAQ,SAARA,IAAQ;AACrB,WAAKjB,YAAL,GAAoBiB,IAAI,EAAxB;AACA,WAAKhB,MAAL,GAAcgB,IAAI,EAAlB;;AAFqB,kDAGD,KAAKhB,MAHJ;AAAA;;AAAA;AAGrB,+DAAiC;AAAA,cAAtBI,KAAsB;AAChCA,UAAAA,KAAK,CAACH,MAAN,GAAe,IAAf;AACA;AALoB;AAAA;AAAA;AAAA;AAAA;AAMrB;;;;;;AAGFL,gBAAgB,CAACE,iBAAD,EAAoB,+BAApB,CAAhB;AAEAmB,MAAM,CAACC,OAAP,GAAiBpB,iBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\nclass DependenciesBlock {\n\tconstructor() {\n\t\t/** @type {Dependency[]} */\n\t\tthis.dependencies = [];\n\t\t/** @type {AsyncDependenciesBlock[]} */\n\t\tthis.blocks = [];\n\t\t/** @type {DependenciesBlock} */\n\t\tthis.parent = undefined;\n\t}\n\n\tgetRootBlock() {\n\t\t/** @type {DependenciesBlock} */\n\t\tlet current = this;\n\t\twhile (current.parent) current = current.parent;\n\t\treturn current;\n\t}\n\n\t/**\n\t * Adds a DependencyBlock to DependencyBlock relationship.\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\n\t *\n\t * @param {AsyncDependenciesBlock} block block being added\n\t * @returns {void}\n\t */\n\taddBlock(block) {\n\t\tthis.blocks.push(block);\n\t\tblock.parent = this;\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being tied to block.\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\n\t * @returns {void}\n\t */\n\taddDependency(dependency) {\n\t\tthis.dependencies.push(dependency);\n\t}\n\n\t/**\n\t * @param {Dependency} dependency dependency being removed\n\t * @returns {void}\n\t */\n\tremoveDependency(dependency) {\n\t\tconst idx = this.dependencies.indexOf(dependency);\n\t\tif (idx >= 0) {\n\t\t\tthis.dependencies.splice(idx, 1);\n\t\t}\n\t}\n\n\t/**\n\t * Removes all dependencies and blocks\n\t * @returns {void}\n\t */\n\tclearDependenciesAndBlocks() {\n\t\tthis.dependencies.length = 0;\n\t\tthis.blocks.length = 0;\n\t}\n\n\t/**\n\t * @param {Hash} hash the hash used to track dependencies\n\t * @param {UpdateHashContext} context context\n\t * @returns {void}\n\t */\n\tupdateHash(hash, context) {\n\t\tfor (const dep of this.dependencies) {\n\t\t\tdep.updateHash(hash, context);\n\t\t}\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.updateHash(hash, context);\n\t\t}\n\t}\n\n\tserialize({ write }) {\n\t\twrite(this.dependencies);\n\t\twrite(this.blocks);\n\t}\n\n\tdeserialize({ read }) {\n\t\tthis.dependencies = read();\n\t\tthis.blocks = read();\n\t\tfor (const block of this.blocks) {\n\t\t\tblock.parent = this;\n\t\t}\n\t}\n}\n\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\n\nmodule.exports = DependenciesBlock;\n"]},"metadata":{},"sourceType":"script"}