{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\n\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar DelegatedPlugin = /*#__PURE__*/function () {\n  function DelegatedPlugin(options) {\n    _classCallCheck(this, DelegatedPlugin);\n\n    this.options = options;\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(DelegatedPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n\n      compiler.hooks.compilation.tap(\"DelegatedPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n      });\n      compiler.hooks.compile.tap(\"DelegatedPlugin\", function (_ref2) {\n        var normalModuleFactory = _ref2.normalModuleFactory;\n        new DelegatedModuleFactoryPlugin(_objectSpread({\n          associatedObjectForCache: compiler.root\n        }, _this.options)).apply(normalModuleFactory);\n      });\n    }\n  }]);\n\n  return DelegatedPlugin;\n}();\n\nmodule.exports = DelegatedPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/DelegatedPlugin.js"],"names":["DelegatedModuleFactoryPlugin","require","DelegatedSourceDependency","DelegatedPlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","compile","associatedObjectForCache","root","apply","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,4BAA4B,GAAGC,OAAO,CAAC,gCAAD,CAA5C;;AACA,IAAMC,yBAAyB,GAAGD,OAAO,CAAC,0CAAD,CAAzC;AAEA;;;IAEME,e;AACL,2BAAYC,OAAZ,EAAqB;AAAA;;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA;AAED;AACD;AACA;AACA;AACA;;;;;WACC,eAAMC,QAAN,EAAgB;AAAA;;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,iBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCT,yBADD,EAECO,mBAFD;AAIA,OAPF;AAUAJ,MAAAA,QAAQ,CAACC,KAAT,CAAeM,OAAf,CAAuBJ,GAAvB,CAA2B,iBAA3B,EAA8C,iBAA6B;AAAA,YAA1BC,mBAA0B,SAA1BA,mBAA0B;AAC1E,YAAIT,4BAAJ;AACCa,UAAAA,wBAAwB,EAAER,QAAQ,CAACS;AADpC,WAEI,KAAI,CAACV,OAFT,GAGGW,KAHH,CAGSN,mBAHT;AAIA,OALD;AAMA;;;;;;AAGFO,MAAM,CAACC,OAAP,GAAiBd,eAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass DelegatedPlugin {\n\tconstructor(options) {\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DelegatedPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DelegatedPlugin\", ({ normalModuleFactory }) => {\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tassociatedObjectForCache: compiler.root,\n\t\t\t\t...this.options\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\t}\n}\n\nmodule.exports = DelegatedPlugin;\n"]},"metadata":{},"sourceType":"script"}