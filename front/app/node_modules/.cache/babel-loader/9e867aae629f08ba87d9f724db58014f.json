{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar asyncLib = require(\"neo-async\");\n\nvar NormalModule = require(\"./NormalModule\");\n\nvar PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar AutomaticPrefetchPlugin = /*#__PURE__*/function () {\n  function AutomaticPrefetchPlugin() {\n    _classCallCheck(this, AutomaticPrefetchPlugin);\n  }\n\n  _createClass(AutomaticPrefetchPlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * Apply the plugin\n     * @param {Compiler} compiler the compiler instance\n     * @returns {void}\n     */\n    function apply(compiler) {\n      compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n      });\n      var lastModules = null;\n      compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", function (compilation) {\n        lastModules = [];\n\n        var _iterator = _createForOfIteratorHelper(compilation.modules),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var m = _step.value;\n\n            if (m instanceof NormalModule) {\n              lastModules.push({\n                context: m.context,\n                request: m.request\n              });\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", function (compilation, callback) {\n        if (!lastModules) return callback();\n        asyncLib.forEach(lastModules, function (m, callback) {\n          compilation.addModuleChain(m.context || compiler.context, new PrefetchDependency(\"!!\".concat(m.request)), callback);\n        }, function (err) {\n          lastModules = null;\n          callback(err);\n        });\n      });\n    }\n  }]);\n\n  return AutomaticPrefetchPlugin;\n}();\n\nmodule.exports = AutomaticPrefetchPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/AutomaticPrefetchPlugin.js"],"names":["asyncLib","require","NormalModule","PrefetchDependency","AutomaticPrefetchPlugin","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","lastModules","afterCompile","modules","m","push","context","request","make","tapAsync","callback","forEach","addModuleChain","err","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAME,kBAAkB,GAAGF,OAAO,CAAC,mCAAD,CAAlC;AAEA;;;IAEMG,uB;;;;;;;;AACL;AACD;AACA;AACA;AACA;AACC,mBAAMC,QAAN,EAAgB;AACfA,MAAAA,QAAQ,CAACC,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CACC,yBADD,EAEC,UAACD,WAAD,QAA0C;AAAA,YAA1BE,mBAA0B,QAA1BA,mBAA0B;AACzCF,QAAAA,WAAW,CAACG,mBAAZ,CAAgCC,GAAhC,CACCR,kBADD,EAECM,mBAFD;AAIA,OAPF;AASA,UAAIG,WAAW,GAAG,IAAlB;AACAP,MAAAA,QAAQ,CAACC,KAAT,CAAeO,YAAf,CAA4BL,GAA5B,CAAgC,yBAAhC,EAA2D,UAAAD,WAAW,EAAI;AACzEK,QAAAA,WAAW,GAAG,EAAd;;AADyE,mDAGzDL,WAAW,CAACO,OAH6C;AAAA;;AAAA;AAGzE,8DAAqC;AAAA,gBAA1BC,CAA0B;;AACpC,gBAAIA,CAAC,YAAYb,YAAjB,EAA+B;AAC9BU,cAAAA,WAAW,CAACI,IAAZ,CAAiB;AAChBC,gBAAAA,OAAO,EAAEF,CAAC,CAACE,OADK;AAEhBC,gBAAAA,OAAO,EAAEH,CAAC,CAACG;AAFK,eAAjB;AAIA;AACD;AAVwE;AAAA;AAAA;AAAA;AAAA;AAWzE,OAXD;AAYAb,MAAAA,QAAQ,CAACC,KAAT,CAAea,IAAf,CAAoBC,QAApB,CACC,yBADD,EAEC,UAACb,WAAD,EAAcc,QAAd,EAA2B;AAC1B,YAAI,CAACT,WAAL,EAAkB,OAAOS,QAAQ,EAAf;AAClBrB,QAAAA,QAAQ,CAACsB,OAAT,CACCV,WADD,EAEC,UAACG,CAAD,EAAIM,QAAJ,EAAiB;AAChBd,UAAAA,WAAW,CAACgB,cAAZ,CACCR,CAAC,CAACE,OAAF,IAAaZ,QAAQ,CAACY,OADvB,EAEC,IAAId,kBAAJ,aAA4BY,CAAC,CAACG,OAA9B,EAFD,EAGCG,QAHD;AAKA,SARF,EASC,UAAAG,GAAG,EAAI;AACNZ,UAAAA,WAAW,GAAG,IAAd;AACAS,UAAAA,QAAQ,CAACG,GAAD,CAAR;AACA,SAZF;AAcA,OAlBF;AAoBA;;;;;;AAEFC,MAAM,CAACC,OAAP,GAAiBtB,uBAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst NormalModule = require(\"./NormalModule\");\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass AutomaticPrefetchPlugin {\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tPrefetchDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t\tlet lastModules = null;\n\t\tcompiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n\t\t\tlastModules = [];\n\n\t\t\tfor (const m of compilation.modules) {\n\t\t\t\tif (m instanceof NormalModule) {\n\t\t\t\t\tlastModules.push({\n\t\t\t\t\t\tcontext: m.context,\n\t\t\t\t\t\trequest: m.request\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"AutomaticPrefetchPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tif (!lastModules) return callback();\n\t\t\t\tasyncLib.forEach(\n\t\t\t\t\tlastModules,\n\t\t\t\t\t(m, callback) => {\n\t\t\t\t\t\tcompilation.addModuleChain(\n\t\t\t\t\t\t\tm.context || compiler.context,\n\t\t\t\t\t\t\tnew PrefetchDependency(`!!${m.request}`),\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\tlastModules = null;\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = AutomaticPrefetchPlugin;\n"]},"metadata":{},"sourceType":"script"}