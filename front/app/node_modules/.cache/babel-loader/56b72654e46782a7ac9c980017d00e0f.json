{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\"use strict\";\n\nvar memoize = require(\"./memoize\");\n/** @typedef {import(\"../serialization/BinaryMiddleware\").MEASURE_END_OPERATION_TYPE} MEASURE_END_OPERATION */\n\n/** @typedef {import(\"../serialization/BinaryMiddleware\").MEASURE_START_OPERATION_TYPE} MEASURE_START_OPERATION */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n\n/** @typedef {import(\"../serialization/Serializer\")} Serializer */\n\n\nvar getBinaryMiddleware = memoize(function () {\n  return require(\"../serialization/BinaryMiddleware\");\n});\nvar getObjectMiddleware = memoize(function () {\n  return require(\"../serialization/ObjectMiddleware\");\n});\nvar getSingleItemMiddleware = memoize(function () {\n  return require(\"../serialization/SingleItemMiddleware\");\n});\nvar getSerializer = memoize(function () {\n  return require(\"../serialization/Serializer\");\n});\nvar getSerializerMiddleware = memoize(function () {\n  return require(\"../serialization/SerializerMiddleware\");\n});\nvar getBinaryMiddlewareInstance = memoize(function () {\n  return new (getBinaryMiddleware())();\n});\nvar registerSerializers = memoize(function () {\n  require(\"./registerExternalSerializer\"); // Load internal paths with a relative require\n  // This allows bundling all internal serializers\n\n\n  var internalSerializables = require(\"./internalSerializables\");\n\n  getObjectMiddleware().registerLoader(/^webpack\\/lib\\//, function (req) {\n    var loader = internalSerializables[req.slice(\"webpack/lib/\".length)];\n\n    if (loader) {\n      loader();\n    } else {\n      console.warn(\"\".concat(req, \" not found in internalSerializables\"));\n    }\n\n    return true;\n  });\n});\n/** @type {Serializer} */\n\nvar buffersSerializer; // Expose serialization API\n\nmodule.exports = {\n  get register() {\n    return getObjectMiddleware().register;\n  },\n\n  get registerLoader() {\n    return getObjectMiddleware().registerLoader;\n  },\n\n  get registerNotSerializable() {\n    return getObjectMiddleware().registerNotSerializable;\n  },\n\n  get NOT_SERIALIZABLE() {\n    return getObjectMiddleware().NOT_SERIALIZABLE;\n  },\n\n  /** @type {MEASURE_START_OPERATION} */\n  get MEASURE_START_OPERATION() {\n    return getBinaryMiddleware().MEASURE_START_OPERATION;\n  },\n\n  /** @type {MEASURE_END_OPERATION} */\n  get MEASURE_END_OPERATION() {\n    return getBinaryMiddleware().MEASURE_END_OPERATION;\n  },\n\n  get buffersSerializer() {\n    if (buffersSerializer !== undefined) return buffersSerializer;\n    registerSerializers();\n    var Serializer = getSerializer();\n    var binaryMiddleware = getBinaryMiddlewareInstance();\n    var SerializerMiddleware = getSerializerMiddleware();\n    var SingleItemMiddleware = getSingleItemMiddleware();\n    return buffersSerializer = new Serializer([new SingleItemMiddleware(), new (getObjectMiddleware())(function (context) {\n      if (context.write) {\n        context.writeLazy = function (value) {\n          context.write(SerializerMiddleware.createLazy(value, binaryMiddleware));\n        };\n      }\n    }, \"md4\"), binaryMiddleware]);\n  },\n\n  createFileSerializer: function createFileSerializer(fs, hashFunction) {\n    registerSerializers();\n    var Serializer = getSerializer();\n\n    var FileMiddleware = require(\"../serialization/FileMiddleware\");\n\n    var fileMiddleware = new FileMiddleware(fs, hashFunction);\n    var binaryMiddleware = getBinaryMiddlewareInstance();\n    var SerializerMiddleware = getSerializerMiddleware();\n    var SingleItemMiddleware = getSingleItemMiddleware();\n    return new Serializer([new SingleItemMiddleware(), new (getObjectMiddleware())(function (context) {\n      if (context.write) {\n        context.writeLazy = function (value) {\n          context.write(SerializerMiddleware.createLazy(value, binaryMiddleware));\n        };\n\n        context.writeSeparate = function (value, options) {\n          var lazy = SerializerMiddleware.createLazy(value, fileMiddleware, options);\n          context.write(lazy);\n          return lazy;\n        };\n      }\n    }, hashFunction), binaryMiddleware, fileMiddleware]);\n  }\n};","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/util/serialization.js"],"names":["memoize","require","getBinaryMiddleware","getObjectMiddleware","getSingleItemMiddleware","getSerializer","getSerializerMiddleware","getBinaryMiddlewareInstance","registerSerializers","internalSerializables","registerLoader","req","loader","slice","length","console","warn","buffersSerializer","module","exports","register","registerNotSerializable","NOT_SERIALIZABLE","MEASURE_START_OPERATION","MEASURE_END_OPERATION","undefined","Serializer","binaryMiddleware","SerializerMiddleware","SingleItemMiddleware","context","write","writeLazy","value","createLazy","createFileSerializer","fs","hashFunction","FileMiddleware","fileMiddleware","writeSeparate","options","lazy"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n*/\n\n\"use strict\";\n\nconst memoize = require(\"./memoize\");\n\n/** @typedef {import(\"../serialization/BinaryMiddleware\").MEASURE_END_OPERATION_TYPE} MEASURE_END_OPERATION */\n/** @typedef {import(\"../serialization/BinaryMiddleware\").MEASURE_START_OPERATION_TYPE} MEASURE_START_OPERATION */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectDeserializerContext} ObjectDeserializerContext */\n/** @typedef {import(\"../serialization/ObjectMiddleware\").ObjectSerializerContext} ObjectSerializerContext */\n/** @typedef {import(\"../serialization/Serializer\")} Serializer */\n\nconst getBinaryMiddleware = memoize(() =>\n\trequire(\"../serialization/BinaryMiddleware\")\n);\nconst getObjectMiddleware = memoize(() =>\n\trequire(\"../serialization/ObjectMiddleware\")\n);\nconst getSingleItemMiddleware = memoize(() =>\n\trequire(\"../serialization/SingleItemMiddleware\")\n);\nconst getSerializer = memoize(() => require(\"../serialization/Serializer\"));\nconst getSerializerMiddleware = memoize(() =>\n\trequire(\"../serialization/SerializerMiddleware\")\n);\n\nconst getBinaryMiddlewareInstance = memoize(\n\t() => new (getBinaryMiddleware())()\n);\n\nconst registerSerializers = memoize(() => {\n\trequire(\"./registerExternalSerializer\");\n\n\t// Load internal paths with a relative require\n\t// This allows bundling all internal serializers\n\tconst internalSerializables = require(\"./internalSerializables\");\n\tgetObjectMiddleware().registerLoader(/^webpack\\/lib\\//, req => {\n\t\tconst loader = internalSerializables[req.slice(\"webpack/lib/\".length)];\n\t\tif (loader) {\n\t\t\tloader();\n\t\t} else {\n\t\t\tconsole.warn(`${req} not found in internalSerializables`);\n\t\t}\n\t\treturn true;\n\t});\n});\n\n/** @type {Serializer} */\nlet buffersSerializer;\n\n// Expose serialization API\nmodule.exports = {\n\tget register() {\n\t\treturn getObjectMiddleware().register;\n\t},\n\tget registerLoader() {\n\t\treturn getObjectMiddleware().registerLoader;\n\t},\n\tget registerNotSerializable() {\n\t\treturn getObjectMiddleware().registerNotSerializable;\n\t},\n\tget NOT_SERIALIZABLE() {\n\t\treturn getObjectMiddleware().NOT_SERIALIZABLE;\n\t},\n\t/** @type {MEASURE_START_OPERATION} */\n\tget MEASURE_START_OPERATION() {\n\t\treturn getBinaryMiddleware().MEASURE_START_OPERATION;\n\t},\n\t/** @type {MEASURE_END_OPERATION} */\n\tget MEASURE_END_OPERATION() {\n\t\treturn getBinaryMiddleware().MEASURE_END_OPERATION;\n\t},\n\tget buffersSerializer() {\n\t\tif (buffersSerializer !== undefined) return buffersSerializer;\n\t\tregisterSerializers();\n\t\tconst Serializer = getSerializer();\n\t\tconst binaryMiddleware = getBinaryMiddlewareInstance();\n\t\tconst SerializerMiddleware = getSerializerMiddleware();\n\t\tconst SingleItemMiddleware = getSingleItemMiddleware();\n\t\treturn (buffersSerializer = new Serializer([\n\t\t\tnew SingleItemMiddleware(),\n\t\t\tnew (getObjectMiddleware())(context => {\n\t\t\t\tif (context.write) {\n\t\t\t\t\tcontext.writeLazy = value => {\n\t\t\t\t\t\tcontext.write(\n\t\t\t\t\t\t\tSerializerMiddleware.createLazy(value, binaryMiddleware)\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}, \"md4\"),\n\t\t\tbinaryMiddleware\n\t\t]));\n\t},\n\tcreateFileSerializer: (fs, hashFunction) => {\n\t\tregisterSerializers();\n\t\tconst Serializer = getSerializer();\n\t\tconst FileMiddleware = require(\"../serialization/FileMiddleware\");\n\t\tconst fileMiddleware = new FileMiddleware(fs, hashFunction);\n\t\tconst binaryMiddleware = getBinaryMiddlewareInstance();\n\t\tconst SerializerMiddleware = getSerializerMiddleware();\n\t\tconst SingleItemMiddleware = getSingleItemMiddleware();\n\t\treturn new Serializer([\n\t\t\tnew SingleItemMiddleware(),\n\t\t\tnew (getObjectMiddleware())(context => {\n\t\t\t\tif (context.write) {\n\t\t\t\t\tcontext.writeLazy = value => {\n\t\t\t\t\t\tcontext.write(\n\t\t\t\t\t\t\tSerializerMiddleware.createLazy(value, binaryMiddleware)\n\t\t\t\t\t\t);\n\t\t\t\t\t};\n\t\t\t\t\tcontext.writeSeparate = (value, options) => {\n\t\t\t\t\t\tconst lazy = SerializerMiddleware.createLazy(\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tfileMiddleware,\n\t\t\t\t\t\t\toptions\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcontext.write(lazy);\n\t\t\t\t\t\treturn lazy;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}, hashFunction),\n\t\t\tbinaryMiddleware,\n\t\t\tfileMiddleware\n\t\t]);\n\t}\n};\n"]},"metadata":{},"sourceType":"script"}