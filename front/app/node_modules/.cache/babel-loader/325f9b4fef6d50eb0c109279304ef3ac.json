{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/home/john/tree-epidemic-sim-front-end/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar Compilation = require(\"./Compilation\");\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar Template = require(\"./Template\");\n\nvar createSchemaValidation = require(\"./util/create-schema-validation\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nvar validate = createSchemaValidation(require(\"../schemas/plugins/BannerPlugin.check.js\"), function () {\n  return require(\"../schemas/plugins/BannerPlugin.json\");\n}, {\n  name: \"Banner Plugin\",\n  baseDataPath: \"options\"\n});\n\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \").replace(/\\s+\\n/g, \"\\n\").trimRight(), \"\\n */\");\n};\n\nvar BannerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n\n    validate(options);\n    this.options = options;\n    var bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      var getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.processAssets.tap({\n          name: \"BannerPlugin\",\n          stage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n        }, function () {\n          var _iterator = _createForOfIteratorHelper(compilation.chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n\n              var _iterator2 = _createForOfIteratorHelper(chunk.files),\n                  _step2;\n\n              try {\n                var _loop = function _loop() {\n                  var file = _step2.value;\n\n                  if (!matchObject(file)) {\n                    return \"continue\";\n                  }\n\n                  var data = {\n                    chunk: chunk,\n                    filename: file\n                  };\n                  var comment = compilation.getPath(banner, data);\n                  compilation.updateAsset(file, function (old) {\n                    return new ConcatSource(comment, \"\\n\", old);\n                  });\n                };\n\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _ret = _loop();\n\n                  if (_ret === \"continue\") continue;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return BannerPlugin;\n}();\n\nmodule.exports = BannerPlugin;","map":{"version":3,"sources":["/home/john/tree-epidemic-sim-front-end/node_modules/webpack/lib/BannerPlugin.js"],"names":["require","ConcatSource","Compilation","ModuleFilenameHelpers","Template","createSchemaValidation","validate","name","baseDataPath","wrapComment","str","includes","toComment","replace","split","join","trimRight","BannerPlugin","options","banner","bannerOption","getBanner","raw","data","compiler","matchObject","bind","undefined","hooks","compilation","tap","processAssets","stage","PROCESS_ASSETS_STAGE_ADDITIONS","chunks","chunk","entryOnly","canBeInitial","files","file","filename","comment","getPath","updateAsset","old","module","exports"],"mappings":"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","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst Compilation = require(\"./Compilation\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst Template = require(\"./Template\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(\n\trequire(\"../schemas/plugins/BannerPlugin.check.js\"),\n\t() => require(\"../schemas/plugins/BannerPlugin.json\"),\n\t{\n\t\tname: \"Banner Plugin\",\n\t\tbaseDataPath: \"options\"\n\t}\n);\n\nconst wrapComment = str => {\n\tif (!str.includes(\"\\n\")) {\n\t\treturn Template.toComment(str);\n\t}\n\treturn `/*!\\n * ${str\n\t\t.replace(/\\*\\//g, \"* /\")\n\t\t.split(\"\\n\")\n\t\t.join(\"\\n * \")\n\t\t.replace(/\\s+\\n/g, \"\\n\")\n\t\t.trimRight()}\\n */`;\n};\n\nclass BannerPlugin {\n\t/**\n\t * @param {BannerPluginArgument} options options object\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"string\" || typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\tbanner: options\n\t\t\t};\n\t\t}\n\n\t\tvalidate(options);\n\n\t\tthis.options = options;\n\n\t\tconst bannerOption = options.banner;\n\t\tif (typeof bannerOption === \"function\") {\n\t\t\tconst getBanner = bannerOption;\n\t\t\tthis.banner = this.options.raw\n\t\t\t\t? getBanner\n\t\t\t\t: data => wrapComment(getBanner(data));\n\t\t} else {\n\t\t\tconst banner = this.options.raw\n\t\t\t\t? bannerOption\n\t\t\t\t: wrapComment(bannerOption);\n\t\t\tthis.banner = () => banner;\n\t\t}\n\t}\n\n\t/**\n\t * Apply the plugin\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst banner = this.banner;\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n\t\t\tcompilation.hooks.processAssets.tap(\n\t\t\t\t{\n\t\t\t\t\tname: \"BannerPlugin\",\n\t\t\t\t\tstage: Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tfor (const chunk of compilation.chunks) {\n\t\t\t\t\t\tif (options.entryOnly && !chunk.canBeInitial()) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\t\tif (!matchObject(file)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\tfilename: file\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst comment = compilation.getPath(banner, data);\n\n\t\t\t\t\t\t\tcompilation.updateAsset(\n\t\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = BannerPlugin;\n"]},"metadata":{},"sourceType":"script"}