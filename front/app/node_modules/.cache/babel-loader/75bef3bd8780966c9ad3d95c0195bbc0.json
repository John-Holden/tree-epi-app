{"ast":null,"code":"var _jsxFileName = \"/home/john/react-stuff/src/components/InputParams.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/app.css';\nimport 'katex/dist/katex.min.css';\nimport React, { useState } from 'react';\nimport { InlineMath } from 'react-katex';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst divTableCell = {\n  display: 'table-cell'\n};\nconst labelSize = {\n  fontSize: 15\n};\nconst domainInputform = {\n  fontSize: 12,\n  padding: 1,\n  width: 30,\n  marginLeft: 30\n};\nconst domainInputformR = {\n  fontSize: 12,\n  padding: 1,\n  width: 30,\n  marginLeft: 4\n};\n\nfunction InputParameters() {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  const [dispersaType, setDispersal] = useState('gaussian');\n  const [dispersalScale, setDispersalScale] = useState(100);\n  const [domainX, setDomainX] = useState(500);\n  const [domainY, setDomainY] = useState(500);\n  const [hostNumber, setHostNumber] = useState(1000);\n  const [secondaryR0, setSecondaryR0] = useState(2);\n  const [infectiousLT, setInfectiousLT] = useState(100);\n  const [simulationRT, setSimulationRT] = useState(1000);\n  const [initiallyInfected, setInitiallyInfected] = useState(20);\n  const [initiallyInfectedDist, setInitiallyInfectedDist] = useState(\"Central\");\n  const secondaryR0Label = 'R\\_{0}';\n\n  let handleDomainInputX = e => {\n    const re = /^[0-9\\b]+$/;\n\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      setDomainX(e.target.value);\n    } else {\n      alert('Domain size requires integars!');\n    }\n  };\n\n  let handleDomainInputY = e => {\n    const re = /^[0-9\\b]+$/;\n\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n      setDomainY(e.target.value);\n    } else {\n      alert('Domain size requires integars!');\n    }\n  };\n\n  let handleSubmitResp = async e => {\n    e.preventDefault();\n\n    try {\n      let res = await fetch(\"http://localhost:5000\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"dispersal_type\": dispersaType,\n          \"domain_size\": [domainX, domainY],\n          \"host_number\": hostNumber,\n          \"secondary_R0\": secondaryR0,\n          \"infectious_lifetime\": infectiousLT,\n          \"simulation_runtime\": simulationRT,\n          \"initially_infected_hosts\": initiallyInfected,\n          \"initially_infected_dist\": initiallyInfectedDist\n        })\n      });\n      console.log(res);\n\n      if (res.status === 200) {\n        setMessage(\"successfull\");\n        console.log('successfull post');\n      } else {\n        setMessage(\"error\");\n        console.log('failed failed');\n      }\n    } catch (err) {\n      console.log(err);\n      alert(`${message}, dispersal type is ${dispersaType}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputParamPanel\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitResp,\n      style: {\n        width: 185\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: \" Dispersal type \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: dispersaType,\n        onChange: e => setDispersal(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"gaussian\",\n          children: \"Gaussian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"exponential\",\n          children: \"Exponential\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"inverse_power_Law\",\n          children: \"Inverse power law\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {\n        className: \"p2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Dispersal (m) : \", hostNumber, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: hostNumber,\n        onChange: e => setHostNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: \" Domain size (m) x (m): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: divTableCell,\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: domainInputform,\n          value: domainX,\n          onChange: handleDomainInputX\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 40\n        }, this), \" x \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: divTableCell,\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          style: domainInputformR,\n          value: domainY,\n          onChange: handleDomainInputY\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 40\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Host Number : \", hostNumber, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: hostNumber,\n        onChange: e => setHostNumber(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Secondary \", /*#__PURE__*/_jsxDEV(InlineMath, {\n          math: secondaryR0Label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 47\n        }, this), \" : \", secondaryR0, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"20\",\n        value: secondaryR0,\n        onChange: e => setSecondaryR0(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Infectious period: \", infectiousLT, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"500\",\n        value: infectiousLT,\n        onChange: e => setInfectiousLT(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Initially Infected: \", initiallyInfected, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"100\",\n        value: initiallyInfected,\n        onChange: e => setInitiallyInfected(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: \" Initially Infected Distribution \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: initiallyInfectedDist,\n        onChange: e => setInitiallyInfectedDist(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Central\",\n          children: \" Centralised\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Random\",\n          children: \" Random \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: labelSize,\n        children: [\" Time Steps: \", simulationRT, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"1\",\n        max: \"2000\",\n        value: simulationRT,\n        onChange: e => setSimulationRT(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Simulate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputParameters, \"GRp631Uqw03ZfX7K1ryK1BjwwKw=\");\n\n_c = InputParameters;\nexport default InputParameters;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputParameters\");","map":{"version":3,"sources":["/home/john/react-stuff/src/components/InputParams.js"],"names":["React","useState","InlineMath","divTableCell","display","labelSize","fontSize","domainInputform","padding","width","marginLeft","domainInputformR","InputParameters","message","setMessage","dispersaType","setDispersal","dispersalScale","setDispersalScale","domainX","setDomainX","domainY","setDomainY","hostNumber","setHostNumber","secondaryR0","setSecondaryR0","infectiousLT","setInfectiousLT","simulationRT","setSimulationRT","initiallyInfected","setInitiallyInfected","initiallyInfectedDist","setInitiallyInfectedDist","secondaryR0Label","handleDomainInputX","e","re","target","value","test","alert","handleDomainInputY","handleSubmitResp","preventDefault","res","fetch","method","body","JSON","stringify","console","log","status","err"],"mappings":"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","sourcesContent":["import '../styles/app.css';\nimport 'katex/dist/katex.min.css';\nimport React, { useState } from 'react';\nimport { InlineMath } from 'react-katex';\n\nconst divTableCell = {\n  display: 'table-cell',\n};\n\nconst labelSize = {\n  fontSize: 15\n}\nconst domainInputform = {\n  fontSize: 12, \n  padding: 1, \n  width: 30 ,\n  marginLeft: 30}\n\n  const domainInputformR = {\n    fontSize: 12, \n    padding: 1, \n    width: 30,\n    marginLeft: 4 }\n\nfunction InputParameters() {\n\n  const [message, setMessage] = useState(\"\");\n  const [dispersaType, setDispersal] = useState('gaussian');\n  const [dispersalScale, setDispersalScale] = useState(100);\n  const [domainX, setDomainX] = useState(500);\n  const [domainY, setDomainY] = useState(500);\n  const [hostNumber, setHostNumber] = useState(1000);\n  const [secondaryR0, setSecondaryR0] = useState(2);\n  const [infectiousLT, setInfectiousLT] = useState(100);\n  const [simulationRT, setSimulationRT] = useState(1000);\n  const [initiallyInfected, setInitiallyInfected] = useState(20);\n  const [initiallyInfectedDist, setInitiallyInfectedDist] = useState(\"Central\");\n\n  const secondaryR0Label = 'R\\_{0}';\n\n  let handleDomainInputX = (e) => {\n    const re = /^[0-9\\b]+$/;\n    if (e.target.value === \"\" || re.test(e.target.value)) {\n       setDomainX(e.target.value)\n    }\n    else {\n      alert('Domain size requires integars!')\n    }\n }\n\n let handleDomainInputY = (e) => {\n  const re = /^[0-9\\b]+$/;\n  if (e.target.value === \"\" || re.test(e.target.value)) {\n     setDomainY(e.target.value)\n  }\n  else {\n    alert('Domain size requires integars!')\n  }\n}\n  \n let handleSubmitResp = async (e) => {\n    e.preventDefault();\n    try {\n      let res = await fetch(\"http://localhost:5000\", \n      { \n        method: \"POST\",\n        body: JSON.stringify({\"dispersal_type\": dispersaType,\n                              \"domain_size\": [domainX, domainY],\n                              \"host_number\": hostNumber,\n                              \"secondary_R0\": secondaryR0,\n                              \"infectious_lifetime\": infectiousLT,\n                              \"simulation_runtime\": simulationRT,\n                              \"initially_infected_hosts\": initiallyInfected,\n                              \"initially_infected_dist\": initiallyInfectedDist})\n      });\n      console.log(res)\n      if (res.status === 200) {\n        setMessage(\"successfull\");\n        console.log('successfull post')\n      } else {\n        setMessage(\"error\");\n        console.log('failed failed')\n      }\n    } catch (err) {\n      console.log(err);\n      alert(`${message}, dispersal type is ${dispersaType}`)\n    }\n  };\n\n  return (\n      <div className='inputParamPanel'>\n        <form onSubmit={handleSubmitResp} style={{width: 185}}>\n          <label style={labelSize} > Dispersal type </label> \n          <select value={dispersaType} onChange={e => setDispersal(e.target.value)}> \n            <option value=\"gaussian\">Gaussian</option>  \n            <option value=\"exponential\">Exponential</option>\n            <option value=\"inverse_power_Law\">Inverse power law</option>\n          </select>\n          <br className='p2'></br>\n          <label style={labelSize}> Dispersal (m) : {hostNumber} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={hostNumber}  onChange={e => setHostNumber(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Domain size (m) x (m): </label>\n            <div style={divTableCell}> <input type=\"text\" style={domainInputform} value={domainX} onChange={handleDomainInputX} /> x </div>  \n            <div style={divTableCell}> <input type=\"text\" style={domainInputformR} value={domainY} onChange={handleDomainInputY} /> </div> \n          <></>\n          <label style={labelSize}> Host Number : {hostNumber} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={hostNumber}  onChange={e => setHostNumber(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Secondary <InlineMath math={secondaryR0Label} /> : {secondaryR0} </label>\n          <input type=\"range\" min=\"0\" max=\"20\" value={secondaryR0}  onChange={e => setSecondaryR0(e.target.value)}/>   \n          <br></br>\n          <label style={labelSize}> Infectious period: {infectiousLT} </label>\n          <input type=\"range\" min=\"1\" max=\"500\" value={infectiousLT}  onChange={e => setInfectiousLT(e.target.value)}/>  \n          <br></br>\n          <label style={labelSize}> Initially Infected: {initiallyInfected} </label>\n          <input type=\"range\" min=\"1\" max=\"100\" value={initiallyInfected}  onChange={e => setInitiallyInfected(e.target.value)}/> \n          <br></br>\n          <label style={labelSize} > Initially Infected Distribution </label> \n          <select value={initiallyInfectedDist} onChange={e => setInitiallyInfectedDist(e.target.value)}> \n            <option value=\"Central\"> Centralised</option>\n            <option value=\"Random\"> Random </option>  \n          </select>\n          <br></br>\n          <label style={labelSize}> Time Steps: {simulationRT} </label>\n          <input type=\"range\" min=\"1\" max=\"2000\" value={simulationRT}  onChange={e => setSimulationRT(e.target.value)}/>\n          <p></p>\n          <input type=\"submit\" value=\"Simulate\" />\n        </form>\n      </div>\n  );\n}\n\nexport default InputParameters;\n"]},"metadata":{},"sourceType":"module"}